
semaphore_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000058bc  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005aa8  08005aa8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08005aa8  08005aa8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005aa8  08005aa8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005aa8  08005aa8  00015aa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005aac  08005aac  00015aac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ab0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001214  20000074  08005b24  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001288  08005b24  00021288  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f48  00000000  00000000  0002009d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e25  00000000  00000000  00032fe5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011e0  00000000  00000000  00035e10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00036ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019921  00000000  00000000  000380a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ae  00000000  00000000  000519c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933a1  00000000  00000000  00065377  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f8718  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004de0  00000000  00000000  000f8768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000074 	.word	0x20000074
 800012c:	00000000 	.word	0x00000000
 8000130:	080059b4 	.word	0x080059b4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000078 	.word	0x20000078
 800014c:	080059b4 	.word	0x080059b4

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000160:	b480      	push	{r7}
 8000162:	b085      	sub	sp, #20
 8000164:	af00      	add	r7, sp, #0
 8000166:	60f8      	str	r0, [r7, #12]
 8000168:	60b9      	str	r1, [r7, #8]
 800016a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800016c:	68fb      	ldr	r3, [r7, #12]
 800016e:	4a06      	ldr	r2, [pc, #24]	; (8000188 <vApplicationGetIdleTaskMemory+0x28>)
 8000170:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000172:	68bb      	ldr	r3, [r7, #8]
 8000174:	4a05      	ldr	r2, [pc, #20]	; (800018c <vApplicationGetIdleTaskMemory+0x2c>)
 8000176:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000178:	687b      	ldr	r3, [r7, #4]
 800017a:	2280      	movs	r2, #128	; 0x80
 800017c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800017e:	bf00      	nop
 8000180:	3714      	adds	r7, #20
 8000182:	46bd      	mov	sp, r7
 8000184:	bc80      	pop	{r7}
 8000186:	4770      	bx	lr
 8000188:	20000090 	.word	0x20000090
 800018c:	200000e4 	.word	0x200000e4

08000190 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000190:	b580      	push	{r7, lr}
 8000192:	b086      	sub	sp, #24
 8000194:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000196:	f000 fd23 	bl	8000be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800019a:	f000 f8d3 	bl	8000344 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800019e:	f000 f995 	bl	80004cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001a2:	f000 f93f 	bl	8000424 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80001a6:	f000 f913 	bl	80003d0 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 80001aa:	f000 f965 	bl	8000478 <MX_USART3_UART_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  vSemaphoreCreateBinary(mySem_uart1);
 80001ae:	2203      	movs	r2, #3
 80001b0:	2100      	movs	r1, #0
 80001b2:	2001      	movs	r0, #1
 80001b4:	f002 fe94 	bl	8002ee0 <xQueueGenericCreate>
 80001b8:	4603      	mov	r3, r0
 80001ba:	4a4f      	ldr	r2, [pc, #316]	; (80002f8 <main+0x168>)
 80001bc:	6013      	str	r3, [r2, #0]
 80001be:	4b4e      	ldr	r3, [pc, #312]	; (80002f8 <main+0x168>)
 80001c0:	681b      	ldr	r3, [r3, #0]
 80001c2:	2b00      	cmp	r3, #0
 80001c4:	d006      	beq.n	80001d4 <main+0x44>
 80001c6:	4b4c      	ldr	r3, [pc, #304]	; (80002f8 <main+0x168>)
 80001c8:	6818      	ldr	r0, [r3, #0]
 80001ca:	2300      	movs	r3, #0
 80001cc:	2200      	movs	r2, #0
 80001ce:	2100      	movs	r1, #0
 80001d0:	f002 fee4 	bl	8002f9c <xQueueGenericSend>
  vSemaphoreCreateBinary(mySem_uart3);
 80001d4:	2203      	movs	r2, #3
 80001d6:	2100      	movs	r1, #0
 80001d8:	2001      	movs	r0, #1
 80001da:	f002 fe81 	bl	8002ee0 <xQueueGenericCreate>
 80001de:	4603      	mov	r3, r0
 80001e0:	4a46      	ldr	r2, [pc, #280]	; (80002fc <main+0x16c>)
 80001e2:	6013      	str	r3, [r2, #0]
 80001e4:	4b45      	ldr	r3, [pc, #276]	; (80002fc <main+0x16c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	2b00      	cmp	r3, #0
 80001ea:	d006      	beq.n	80001fa <main+0x6a>
 80001ec:	4b43      	ldr	r3, [pc, #268]	; (80002fc <main+0x16c>)
 80001ee:	6818      	ldr	r0, [r3, #0]
 80001f0:	2300      	movs	r3, #0
 80001f2:	2200      	movs	r2, #0
 80001f4:	2100      	movs	r1, #0
 80001f6:	f002 fed1 	bl	8002f9c <xQueueGenericSend>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  myQueue = xQueueCreate(10, sizeof(item1));
 80001fa:	2200      	movs	r2, #0
 80001fc:	2132      	movs	r1, #50	; 0x32
 80001fe:	200a      	movs	r0, #10
 8000200:	f002 fe6e 	bl	8002ee0 <xQueueGenericCreate>
 8000204:	4603      	mov	r3, r0
 8000206:	4a3e      	ldr	r2, [pc, #248]	; (8000300 <main+0x170>)
 8000208:	6013      	str	r3, [r2, #0]
  /* definition and creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  if (mySem_uart1 != NULL && mySem_uart3 != NULL && myQueue != NULL)
 800020a:	4b3b      	ldr	r3, [pc, #236]	; (80002f8 <main+0x168>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	2b00      	cmp	r3, #0
 8000210:	d055      	beq.n	80002be <main+0x12e>
 8000212:	4b3a      	ldr	r3, [pc, #232]	; (80002fc <main+0x16c>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	2b00      	cmp	r3, #0
 8000218:	d051      	beq.n	80002be <main+0x12e>
 800021a:	4b39      	ldr	r3, [pc, #228]	; (8000300 <main+0x170>)
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	2b00      	cmp	r3, #0
 8000220:	d04d      	beq.n	80002be <main+0x12e>
  {
    status = xTaskCreate(receive_uart1, "Task receive uart 1", 128, NULL, 2, uart1_handle);
 8000222:	4b38      	ldr	r3, [pc, #224]	; (8000304 <main+0x174>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	9301      	str	r3, [sp, #4]
 8000228:	2302      	movs	r3, #2
 800022a:	9300      	str	r3, [sp, #0]
 800022c:	2300      	movs	r3, #0
 800022e:	2280      	movs	r2, #128	; 0x80
 8000230:	4935      	ldr	r1, [pc, #212]	; (8000308 <main+0x178>)
 8000232:	4836      	ldr	r0, [pc, #216]	; (800030c <main+0x17c>)
 8000234:	f003 fbd0 	bl	80039d8 <xTaskCreate>
 8000238:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	2b01      	cmp	r3, #1
 800023e:	d00a      	beq.n	8000256 <main+0xc6>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000244:	f383 8811 	msr	BASEPRI, r3
 8000248:	f3bf 8f6f 	isb	sy
 800024c:	f3bf 8f4f 	dsb	sy
 8000250:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8000252:	bf00      	nop
 8000254:	e7fe      	b.n	8000254 <main+0xc4>
    status = xTaskCreate(receive_uart3, "Task receive uart 3", 128, NULL, 2, uart3_handle);
 8000256:	4b2e      	ldr	r3, [pc, #184]	; (8000310 <main+0x180>)
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	9301      	str	r3, [sp, #4]
 800025c:	2302      	movs	r3, #2
 800025e:	9300      	str	r3, [sp, #0]
 8000260:	2300      	movs	r3, #0
 8000262:	2280      	movs	r2, #128	; 0x80
 8000264:	492b      	ldr	r1, [pc, #172]	; (8000314 <main+0x184>)
 8000266:	482c      	ldr	r0, [pc, #176]	; (8000318 <main+0x188>)
 8000268:	f003 fbb6 	bl	80039d8 <xTaskCreate>
 800026c:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 800026e:	68fb      	ldr	r3, [r7, #12]
 8000270:	2b01      	cmp	r3, #1
 8000272:	d00a      	beq.n	800028a <main+0xfa>
	__asm volatile
 8000274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000278:	f383 8811 	msr	BASEPRI, r3
 800027c:	f3bf 8f6f 	isb	sy
 8000280:	f3bf 8f4f 	dsb	sy
 8000284:	607b      	str	r3, [r7, #4]
}
 8000286:	bf00      	nop
 8000288:	e7fe      	b.n	8000288 <main+0xf8>
    status = xTaskCreate(receive_task, "Task receive", 128, NULL, 1, receive_handle);
 800028a:	4b24      	ldr	r3, [pc, #144]	; (800031c <main+0x18c>)
 800028c:	681b      	ldr	r3, [r3, #0]
 800028e:	9301      	str	r3, [sp, #4]
 8000290:	2301      	movs	r3, #1
 8000292:	9300      	str	r3, [sp, #0]
 8000294:	2300      	movs	r3, #0
 8000296:	2280      	movs	r2, #128	; 0x80
 8000298:	4921      	ldr	r1, [pc, #132]	; (8000320 <main+0x190>)
 800029a:	4822      	ldr	r0, [pc, #136]	; (8000324 <main+0x194>)
 800029c:	f003 fb9c 	bl	80039d8 <xTaskCreate>
 80002a0:	60f8      	str	r0, [r7, #12]
    configASSERT(status == pdPASS);
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	2b01      	cmp	r3, #1
 80002a6:	d019      	beq.n	80002dc <main+0x14c>
	__asm volatile
 80002a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80002ac:	f383 8811 	msr	BASEPRI, r3
 80002b0:	f3bf 8f6f 	isb	sy
 80002b4:	f3bf 8f4f 	dsb	sy
 80002b8:	603b      	str	r3, [r7, #0]
}
 80002ba:	bf00      	nop
 80002bc:	e7fe      	b.n	80002bc <main+0x12c>
  }
  else
  {
    sprintf(user_msg, "Queue/ Semaphore are not created!\r\n");
 80002be:	491a      	ldr	r1, [pc, #104]	; (8000328 <main+0x198>)
 80002c0:	481a      	ldr	r0, [pc, #104]	; (800032c <main+0x19c>)
 80002c2:	f004 ff0b 	bl	80050dc <siprintf>
    HAL_UART_Transmit(&huart2, (uint8_t *)user_msg, strlen(user_msg), 1000);
 80002c6:	4819      	ldr	r0, [pc, #100]	; (800032c <main+0x19c>)
 80002c8:	f7ff ff42 	bl	8000150 <strlen>
 80002cc:	4603      	mov	r3, r0
 80002ce:	b29a      	uxth	r2, r3
 80002d0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80002d4:	4915      	ldr	r1, [pc, #84]	; (800032c <main+0x19c>)
 80002d6:	4816      	ldr	r0, [pc, #88]	; (8000330 <main+0x1a0>)
 80002d8:	f001 febc 	bl	8002054 <HAL_UART_Transmit>
  }

  HAL_UART_Receive_IT(&huart1, &data1, 1);
 80002dc:	2201      	movs	r2, #1
 80002de:	4915      	ldr	r1, [pc, #84]	; (8000334 <main+0x1a4>)
 80002e0:	4815      	ldr	r0, [pc, #84]	; (8000338 <main+0x1a8>)
 80002e2:	f001 ff3a 	bl	800215a <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart3, &data3, 1);
 80002e6:	2201      	movs	r2, #1
 80002e8:	4914      	ldr	r1, [pc, #80]	; (800033c <main+0x1ac>)
 80002ea:	4815      	ldr	r0, [pc, #84]	; (8000340 <main+0x1b0>)
 80002ec:	f001 ff35 	bl	800215a <HAL_UART_Receive_IT>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80002f0:	f002 fcd8 	bl	8002ca4 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002f4:	e7fe      	b.n	80002f4 <main+0x164>
 80002f6:	bf00      	nop
 80002f8:	200003c8 	.word	0x200003c8
 80002fc:	200003cc 	.word	0x200003cc
 8000300:	200003d0 	.word	0x200003d0
 8000304:	200003bc 	.word	0x200003bc
 8000308:	080059cc 	.word	0x080059cc
 800030c:	080006a5 	.word	0x080006a5
 8000310:	200003c0 	.word	0x200003c0
 8000314:	080059e0 	.word	0x080059e0
 8000318:	08000715 	.word	0x08000715
 800031c:	200003c4 	.word	0x200003c4
 8000320:	080059f4 	.word	0x080059f4
 8000324:	08000609 	.word	0x08000609
 8000328:	08005a04 	.word	0x08005a04
 800032c:	20000474 	.word	0x20000474
 8000330:	2000032c 	.word	0x2000032c
 8000334:	200003d4 	.word	0x200003d4
 8000338:	200002e4 	.word	0x200002e4
 800033c:	200003d5 	.word	0x200003d5
 8000340:	20000374 	.word	0x20000374

08000344 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b090      	sub	sp, #64	; 0x40
 8000348:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800034a:	f107 0318 	add.w	r3, r7, #24
 800034e:	2228      	movs	r2, #40	; 0x28
 8000350:	2100      	movs	r1, #0
 8000352:	4618      	mov	r0, r3
 8000354:	f004 feba 	bl	80050cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000358:	1d3b      	adds	r3, r7, #4
 800035a:	2200      	movs	r2, #0
 800035c:	601a      	str	r2, [r3, #0]
 800035e:	605a      	str	r2, [r3, #4]
 8000360:	609a      	str	r2, [r3, #8]
 8000362:	60da      	str	r2, [r3, #12]
 8000364:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000366:	2301      	movs	r3, #1
 8000368:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800036a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800036e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000370:	2300      	movs	r3, #0
 8000372:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000374:	2301      	movs	r3, #1
 8000376:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000378:	2302      	movs	r3, #2
 800037a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800037c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000380:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000382:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000386:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000388:	f107 0318 	add.w	r3, r7, #24
 800038c:	4618      	mov	r0, r3
 800038e:	f000 ff87 	bl	80012a0 <HAL_RCC_OscConfig>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000398:	f000 fa03 	bl	80007a2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800039c:	230f      	movs	r3, #15
 800039e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003a0:	2302      	movs	r3, #2
 80003a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003a4:	2300      	movs	r3, #0
 80003a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80003ac:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ae:	2300      	movs	r3, #0
 80003b0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80003b2:	1d3b      	adds	r3, r7, #4
 80003b4:	2102      	movs	r1, #2
 80003b6:	4618      	mov	r0, r3
 80003b8:	f001 f9f4 	bl	80017a4 <HAL_RCC_ClockConfig>
 80003bc:	4603      	mov	r3, r0
 80003be:	2b00      	cmp	r3, #0
 80003c0:	d001      	beq.n	80003c6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80003c2:	f000 f9ee 	bl	80007a2 <Error_Handler>
  }
}
 80003c6:	bf00      	nop
 80003c8:	3740      	adds	r7, #64	; 0x40
 80003ca:	46bd      	mov	sp, r7
 80003cc:	bd80      	pop	{r7, pc}
	...

080003d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003d4:	4b11      	ldr	r3, [pc, #68]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003d6:	4a12      	ldr	r2, [pc, #72]	; (8000420 <MX_USART1_UART_Init+0x50>)
 80003d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003da:	4b10      	ldr	r3, [pc, #64]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80003e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003e2:	4b0e      	ldr	r3, [pc, #56]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003e8:	4b0c      	ldr	r3, [pc, #48]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ee:	4b0b      	ldr	r3, [pc, #44]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003f4:	4b09      	ldr	r3, [pc, #36]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003f6:	220c      	movs	r2, #12
 80003f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003fa:	4b08      	ldr	r3, [pc, #32]	; (800041c <MX_USART1_UART_Init+0x4c>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000400:	4b06      	ldr	r3, [pc, #24]	; (800041c <MX_USART1_UART_Init+0x4c>)
 8000402:	2200      	movs	r2, #0
 8000404:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000406:	4805      	ldr	r0, [pc, #20]	; (800041c <MX_USART1_UART_Init+0x4c>)
 8000408:	f001 fdd4 	bl	8001fb4 <HAL_UART_Init>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d001      	beq.n	8000416 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000412:	f000 f9c6 	bl	80007a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000416:	bf00      	nop
 8000418:	bd80      	pop	{r7, pc}
 800041a:	bf00      	nop
 800041c:	200002e4 	.word	0x200002e4
 8000420:	40013800 	.word	0x40013800

08000424 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000428:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 800042a:	4a12      	ldr	r2, [pc, #72]	; (8000474 <MX_USART2_UART_Init+0x50>)
 800042c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 800042e:	4b10      	ldr	r3, [pc, #64]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 8000430:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000434:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 8000444:	2200      	movs	r2, #0
 8000446:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 800044a:	220c      	movs	r2, #12
 800044c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 8000450:	2200      	movs	r2, #0
 8000452:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 8000456:	2200      	movs	r2, #0
 8000458:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_USART2_UART_Init+0x4c>)
 800045c:	f001 fdaa 	bl	8001fb4 <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000466:	f000 f99c 	bl	80007a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	2000032c 	.word	0x2000032c
 8000474:	40004400 	.word	0x40004400

08000478 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800047c:	4b11      	ldr	r3, [pc, #68]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 800047e:	4a12      	ldr	r2, [pc, #72]	; (80004c8 <MX_USART3_UART_Init+0x50>)
 8000480:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000482:	4b10      	ldr	r3, [pc, #64]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 8000484:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000488:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800048a:	4b0e      	ldr	r3, [pc, #56]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 800048c:	2200      	movs	r2, #0
 800048e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000490:	4b0c      	ldr	r3, [pc, #48]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000496:	4b0b      	ldr	r3, [pc, #44]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 8000498:	2200      	movs	r2, #0
 800049a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800049c:	4b09      	ldr	r3, [pc, #36]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 800049e:	220c      	movs	r2, #12
 80004a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 80004a4:	2200      	movs	r2, #0
 80004a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80004a8:	4b06      	ldr	r3, [pc, #24]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80004ae:	4805      	ldr	r0, [pc, #20]	; (80004c4 <MX_USART3_UART_Init+0x4c>)
 80004b0:	f001 fd80 	bl	8001fb4 <HAL_UART_Init>
 80004b4:	4603      	mov	r3, r0
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80004ba:	f000 f972 	bl	80007a2 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80004be:	bf00      	nop
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	bf00      	nop
 80004c4:	20000374 	.word	0x20000374
 80004c8:	40004800 	.word	0x40004800

080004cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b088      	sub	sp, #32
 80004d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004d2:	f107 0310 	add.w	r3, r7, #16
 80004d6:	2200      	movs	r2, #0
 80004d8:	601a      	str	r2, [r3, #0]
 80004da:	605a      	str	r2, [r3, #4]
 80004dc:	609a      	str	r2, [r3, #8]
 80004de:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004e0:	4b24      	ldr	r3, [pc, #144]	; (8000574 <MX_GPIO_Init+0xa8>)
 80004e2:	699b      	ldr	r3, [r3, #24]
 80004e4:	4a23      	ldr	r2, [pc, #140]	; (8000574 <MX_GPIO_Init+0xa8>)
 80004e6:	f043 0310 	orr.w	r3, r3, #16
 80004ea:	6193      	str	r3, [r2, #24]
 80004ec:	4b21      	ldr	r3, [pc, #132]	; (8000574 <MX_GPIO_Init+0xa8>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	f003 0310 	and.w	r3, r3, #16
 80004f4:	60fb      	str	r3, [r7, #12]
 80004f6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80004f8:	4b1e      	ldr	r3, [pc, #120]	; (8000574 <MX_GPIO_Init+0xa8>)
 80004fa:	699b      	ldr	r3, [r3, #24]
 80004fc:	4a1d      	ldr	r2, [pc, #116]	; (8000574 <MX_GPIO_Init+0xa8>)
 80004fe:	f043 0320 	orr.w	r3, r3, #32
 8000502:	6193      	str	r3, [r2, #24]
 8000504:	4b1b      	ldr	r3, [pc, #108]	; (8000574 <MX_GPIO_Init+0xa8>)
 8000506:	699b      	ldr	r3, [r3, #24]
 8000508:	f003 0320 	and.w	r3, r3, #32
 800050c:	60bb      	str	r3, [r7, #8]
 800050e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000510:	4b18      	ldr	r3, [pc, #96]	; (8000574 <MX_GPIO_Init+0xa8>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a17      	ldr	r2, [pc, #92]	; (8000574 <MX_GPIO_Init+0xa8>)
 8000516:	f043 0304 	orr.w	r3, r3, #4
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b15      	ldr	r3, [pc, #84]	; (8000574 <MX_GPIO_Init+0xa8>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f003 0304 	and.w	r3, r3, #4
 8000524:	607b      	str	r3, [r7, #4]
 8000526:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000528:	4b12      	ldr	r3, [pc, #72]	; (8000574 <MX_GPIO_Init+0xa8>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a11      	ldr	r2, [pc, #68]	; (8000574 <MX_GPIO_Init+0xa8>)
 800052e:	f043 0308 	orr.w	r3, r3, #8
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <MX_GPIO_Init+0xa8>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0308 	and.w	r3, r3, #8
 800053c:	603b      	str	r3, [r7, #0]
 800053e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000546:	480c      	ldr	r0, [pc, #48]	; (8000578 <MX_GPIO_Init+0xac>)
 8000548:	f000 fe92 	bl	8001270 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800054c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000552:	2301      	movs	r3, #1
 8000554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000556:	2300      	movs	r3, #0
 8000558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800055a:	2302      	movs	r3, #2
 800055c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800055e:	f107 0310 	add.w	r3, r7, #16
 8000562:	4619      	mov	r1, r3
 8000564:	4804      	ldr	r0, [pc, #16]	; (8000578 <MX_GPIO_Init+0xac>)
 8000566:	f000 fcff 	bl	8000f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800056a:	bf00      	nop
 800056c:	3720      	adds	r7, #32
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
 8000572:	bf00      	nop
 8000574:	40021000 	.word	0x40021000
 8000578:	40011000 	.word	0x40011000

0800057c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b084      	sub	sp, #16
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFAIL;
 8000584:	2300      	movs	r3, #0
 8000586:	60fb      	str	r3, [r7, #12]

	if(huart == &huart1)
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	4a18      	ldr	r2, [pc, #96]	; (80005ec <HAL_UART_RxCpltCallback+0x70>)
 800058c:	4293      	cmp	r3, r2
 800058e:	d10c      	bne.n	80005aa <HAL_UART_RxCpltCallback+0x2e>
	{
		xSemaphoreGiveFromISR(mySem_uart1, &xHigherPriorityTaskWoken);
 8000590:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <HAL_UART_RxCpltCallback+0x74>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f107 020c 	add.w	r2, r7, #12
 8000598:	4611      	mov	r1, r2
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fdfc 	bl	8003198 <xQueueGiveFromISR>
		HAL_UART_Receive_IT(&huart1, &data1, 1);
 80005a0:	2201      	movs	r2, #1
 80005a2:	4914      	ldr	r1, [pc, #80]	; (80005f4 <HAL_UART_RxCpltCallback+0x78>)
 80005a4:	4811      	ldr	r0, [pc, #68]	; (80005ec <HAL_UART_RxCpltCallback+0x70>)
 80005a6:	f001 fdd8 	bl	800215a <HAL_UART_Receive_IT>
	}
	if(huart == &huart3)
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4a12      	ldr	r2, [pc, #72]	; (80005f8 <HAL_UART_RxCpltCallback+0x7c>)
 80005ae:	4293      	cmp	r3, r2
 80005b0:	d10c      	bne.n	80005cc <HAL_UART_RxCpltCallback+0x50>
	{
		xSemaphoreGiveFromISR(mySem_uart3, &xHigherPriorityTaskWoken);
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <HAL_UART_RxCpltCallback+0x80>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f107 020c 	add.w	r2, r7, #12
 80005ba:	4611      	mov	r1, r2
 80005bc:	4618      	mov	r0, r3
 80005be:	f002 fdeb 	bl	8003198 <xQueueGiveFromISR>
		HAL_UART_Receive_IT(&huart3, &data3, 1);
 80005c2:	2201      	movs	r2, #1
 80005c4:	490e      	ldr	r1, [pc, #56]	; (8000600 <HAL_UART_RxCpltCallback+0x84>)
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <HAL_UART_RxCpltCallback+0x7c>)
 80005c8:	f001 fdc7 	bl	800215a <HAL_UART_Receive_IT>
	}

	portEND_SWITCHING_ISR(xHigherPriorityTaskWoken);
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d007      	beq.n	80005e2 <HAL_UART_RxCpltCallback+0x66>
 80005d2:	4b0c      	ldr	r3, [pc, #48]	; (8000604 <HAL_UART_RxCpltCallback+0x88>)
 80005d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	f3bf 8f4f 	dsb	sy
 80005de:	f3bf 8f6f 	isb	sy
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	200002e4 	.word	0x200002e4
 80005f0:	200003c8 	.word	0x200003c8
 80005f4:	200003d4 	.word	0x200003d4
 80005f8:	20000374 	.word	0x20000374
 80005fc:	200003cc 	.word	0x200003cc
 8000600:	200003d5 	.word	0x200003d5
 8000604:	e000ed04 	.word	0xe000ed04

08000608 <receive_task>:

void receive_task(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b082      	sub	sp, #8
 800060c:	af00      	add	r7, sp, #0
	BaseType_t status;
	while(1)
	{
		space = uxQueueSpacesAvailable(myQueue);
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <receive_task+0x80>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f83a 	bl	800368c <uxQueueSpacesAvailable>
 8000618:	4603      	mov	r3, r0
 800061a:	b2da      	uxtb	r2, r3
 800061c:	4b1b      	ldr	r3, [pc, #108]	; (800068c <receive_task+0x84>)
 800061e:	701a      	strb	r2, [r3, #0]
		if(space == 0)
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <receive_task+0x84>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d106      	bne.n	8000636 <receive_task+0x2e>
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062e:	4818      	ldr	r0, [pc, #96]	; (8000690 <receive_task+0x88>)
 8000630:	f000 fe1e 	bl	8001270 <HAL_GPIO_WritePin>
 8000634:	e005      	b.n	8000642 <receive_task+0x3a>
		}
		else
		{
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000636:	2200      	movs	r2, #0
 8000638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800063c:	4814      	ldr	r0, [pc, #80]	; (8000690 <receive_task+0x88>)
 800063e:	f000 fe17 	bl	8001270 <HAL_GPIO_WritePin>
		}
		status = xQueueReceive(myQueue, &str, 1000);
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <receive_task+0x80>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800064a:	4912      	ldr	r1, [pc, #72]	; (8000694 <receive_task+0x8c>)
 800064c:	4618      	mov	r0, r3
 800064e:	f002 fe31 	bl	80032b4 <xQueueReceive>
 8000652:	6078      	str	r0, [r7, #4]
		if(status == pdPASS)
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b01      	cmp	r3, #1
 8000658:	d1d9      	bne.n	800060e <receive_task+0x6>
		{
			sprintf(user_msg, "Space of queue: %d\r\n", space);
 800065a:	4b0c      	ldr	r3, [pc, #48]	; (800068c <receive_task+0x84>)
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	461a      	mov	r2, r3
 8000660:	490d      	ldr	r1, [pc, #52]	; (8000698 <receive_task+0x90>)
 8000662:	480e      	ldr	r0, [pc, #56]	; (800069c <receive_task+0x94>)
 8000664:	f004 fd3a 	bl	80050dc <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t *) str, 50, 1000);
 8000668:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800066c:	2232      	movs	r2, #50	; 0x32
 800066e:	4909      	ldr	r1, [pc, #36]	; (8000694 <receive_task+0x8c>)
 8000670:	480b      	ldr	r0, [pc, #44]	; (80006a0 <receive_task+0x98>)
 8000672:	f001 fcef 	bl	8002054 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, (uint8_t *) user_msg, 50, 1000);
 8000676:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800067a:	2232      	movs	r2, #50	; 0x32
 800067c:	4907      	ldr	r1, [pc, #28]	; (800069c <receive_task+0x94>)
 800067e:	4808      	ldr	r0, [pc, #32]	; (80006a0 <receive_task+0x98>)
 8000680:	f001 fce8 	bl	8002054 <HAL_UART_Transmit>
		space = uxQueueSpacesAvailable(myQueue);
 8000684:	e7c3      	b.n	800060e <receive_task+0x6>
 8000686:	bf00      	nop
 8000688:	200003d0 	.word	0x200003d0
 800068c:	200004d8 	.word	0x200004d8
 8000690:	40011000 	.word	0x40011000
 8000694:	20000440 	.word	0x20000440
 8000698:	08005a28 	.word	0x08005a28
 800069c:	20000474 	.word	0x20000474
 80006a0:	2000032c 	.word	0x2000032c

080006a4 <receive_uart1>:
	}
}


void receive_uart1(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
	while(1)
	{
		if(xSemaphoreTake(mySem_uart1, 1000) == pdPASS)
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <receive_uart1+0x5c>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006b0:	4618      	mov	r0, r3
 80006b2:	f002 fedf 	bl	8003474 <xQueueSemaphoreTake>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d1f5      	bne.n	80006a8 <receive_uart1+0x4>
		{
			if(data1 == '\n')
 80006bc:	4b11      	ldr	r3, [pc, #68]	; (8000704 <receive_uart1+0x60>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b0a      	cmp	r3, #10
 80006c2:	d110      	bne.n	80006e6 <receive_uart1+0x42>
			{
				xQueueSend(myQueue, &item1, portMAX_DELAY);
 80006c4:	4b10      	ldr	r3, [pc, #64]	; (8000708 <receive_uart1+0x64>)
 80006c6:	6818      	ldr	r0, [r3, #0]
 80006c8:	2300      	movs	r3, #0
 80006ca:	f04f 32ff 	mov.w	r2, #4294967295
 80006ce:	490f      	ldr	r1, [pc, #60]	; (800070c <receive_uart1+0x68>)
 80006d0:	f002 fc64 	bl	8002f9c <xQueueGenericSend>
				index1 = 0;
 80006d4:	4b0e      	ldr	r3, [pc, #56]	; (8000710 <receive_uart1+0x6c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	701a      	strb	r2, [r3, #0]
				memset(item1, 0, sizeof(item1));
 80006da:	2232      	movs	r2, #50	; 0x32
 80006dc:	2100      	movs	r1, #0
 80006de:	480b      	ldr	r0, [pc, #44]	; (800070c <receive_uart1+0x68>)
 80006e0:	f004 fcf4 	bl	80050cc <memset>
 80006e4:	e7e0      	b.n	80006a8 <receive_uart1+0x4>
			}
			else
			{
				item1[index1++] = data1;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	; (8000710 <receive_uart1+0x6c>)
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	1c5a      	adds	r2, r3, #1
 80006ec:	b2d1      	uxtb	r1, r2
 80006ee:	4a08      	ldr	r2, [pc, #32]	; (8000710 <receive_uart1+0x6c>)
 80006f0:	7011      	strb	r1, [r2, #0]
 80006f2:	461a      	mov	r2, r3
 80006f4:	4b03      	ldr	r3, [pc, #12]	; (8000704 <receive_uart1+0x60>)
 80006f6:	7819      	ldrb	r1, [r3, #0]
 80006f8:	4b04      	ldr	r3, [pc, #16]	; (800070c <receive_uart1+0x68>)
 80006fa:	5499      	strb	r1, [r3, r2]
		if(xSemaphoreTake(mySem_uart1, 1000) == pdPASS)
 80006fc:	e7d4      	b.n	80006a8 <receive_uart1+0x4>
 80006fe:	bf00      	nop
 8000700:	200003c8 	.word	0x200003c8
 8000704:	200003d4 	.word	0x200003d4
 8000708:	200003d0 	.word	0x200003d0
 800070c:	200003d8 	.word	0x200003d8
 8000710:	200003d6 	.word	0x200003d6

08000714 <receive_uart3>:
	}
}


void receive_uart3(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	af00      	add	r7, sp, #0
	while(1)
	{
		if(xSemaphoreTake(mySem_uart3, 1000) == pdPASS)
 8000718:	4b15      	ldr	r3, [pc, #84]	; (8000770 <receive_uart3+0x5c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000720:	4618      	mov	r0, r3
 8000722:	f002 fea7 	bl	8003474 <xQueueSemaphoreTake>
 8000726:	4603      	mov	r3, r0
 8000728:	2b01      	cmp	r3, #1
 800072a:	d1f5      	bne.n	8000718 <receive_uart3+0x4>
		{
			if(data3 == '\n')
 800072c:	4b11      	ldr	r3, [pc, #68]	; (8000774 <receive_uart3+0x60>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b0a      	cmp	r3, #10
 8000732:	d110      	bne.n	8000756 <receive_uart3+0x42>
			{
				xQueueSend(myQueue, &item3, portMAX_DELAY);
 8000734:	4b10      	ldr	r3, [pc, #64]	; (8000778 <receive_uart3+0x64>)
 8000736:	6818      	ldr	r0, [r3, #0]
 8000738:	2300      	movs	r3, #0
 800073a:	f04f 32ff 	mov.w	r2, #4294967295
 800073e:	490f      	ldr	r1, [pc, #60]	; (800077c <receive_uart3+0x68>)
 8000740:	f002 fc2c 	bl	8002f9c <xQueueGenericSend>
				index3 = 0;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <receive_uart3+0x6c>)
 8000746:	2200      	movs	r2, #0
 8000748:	701a      	strb	r2, [r3, #0]
				memset(item3, 0, sizeof(item3));
 800074a:	2232      	movs	r2, #50	; 0x32
 800074c:	2100      	movs	r1, #0
 800074e:	480b      	ldr	r0, [pc, #44]	; (800077c <receive_uart3+0x68>)
 8000750:	f004 fcbc 	bl	80050cc <memset>
 8000754:	e7e0      	b.n	8000718 <receive_uart3+0x4>
			}
			else
			{
				item3[index3++] = data3;
 8000756:	4b0a      	ldr	r3, [pc, #40]	; (8000780 <receive_uart3+0x6c>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	1c5a      	adds	r2, r3, #1
 800075c:	b2d1      	uxtb	r1, r2
 800075e:	4a08      	ldr	r2, [pc, #32]	; (8000780 <receive_uart3+0x6c>)
 8000760:	7011      	strb	r1, [r2, #0]
 8000762:	461a      	mov	r2, r3
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <receive_uart3+0x60>)
 8000766:	7819      	ldrb	r1, [r3, #0]
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <receive_uart3+0x68>)
 800076a:	5499      	strb	r1, [r3, r2]
		if(xSemaphoreTake(mySem_uart3, 1000) == pdPASS)
 800076c:	e7d4      	b.n	8000718 <receive_uart3+0x4>
 800076e:	bf00      	nop
 8000770:	200003cc 	.word	0x200003cc
 8000774:	200003d5 	.word	0x200003d5
 8000778:	200003d0 	.word	0x200003d0
 800077c:	2000040c 	.word	0x2000040c
 8000780:	200003d7 	.word	0x200003d7

08000784 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000794:	d101      	bne.n	800079a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000796:	f000 fa39 	bl	8000c0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007a2:	b480      	push	{r7}
 80007a4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007a6:	b672      	cpsid	i
}
 80007a8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007aa:	e7fe      	b.n	80007aa <Error_Handler+0x8>

080007ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007b2:	4b18      	ldr	r3, [pc, #96]	; (8000814 <HAL_MspInit+0x68>)
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4a17      	ldr	r2, [pc, #92]	; (8000814 <HAL_MspInit+0x68>)
 80007b8:	f043 0301 	orr.w	r3, r3, #1
 80007bc:	6193      	str	r3, [r2, #24]
 80007be:	4b15      	ldr	r3, [pc, #84]	; (8000814 <HAL_MspInit+0x68>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	f003 0301 	and.w	r3, r3, #1
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007ca:	4b12      	ldr	r3, [pc, #72]	; (8000814 <HAL_MspInit+0x68>)
 80007cc:	69db      	ldr	r3, [r3, #28]
 80007ce:	4a11      	ldr	r2, [pc, #68]	; (8000814 <HAL_MspInit+0x68>)
 80007d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d4:	61d3      	str	r3, [r2, #28]
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <HAL_MspInit+0x68>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007de:	607b      	str	r3, [r7, #4]
 80007e0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007e2:	2200      	movs	r2, #0
 80007e4:	210f      	movs	r1, #15
 80007e6:	f06f 0001 	mvn.w	r0, #1
 80007ea:	f000 fae0 	bl	8000dae <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007ee:	4b0a      	ldr	r3, [pc, #40]	; (8000818 <HAL_MspInit+0x6c>)
 80007f0:	685b      	ldr	r3, [r3, #4]
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
 80007f6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	4a04      	ldr	r2, [pc, #16]	; (8000818 <HAL_MspInit+0x6c>)
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800080a:	bf00      	nop
 800080c:	3710      	adds	r7, #16
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}
 8000812:	bf00      	nop
 8000814:	40021000 	.word	0x40021000
 8000818:	40010000 	.word	0x40010000

0800081c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	b08c      	sub	sp, #48	; 0x30
 8000820:	af00      	add	r7, sp, #0
 8000822:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000824:	f107 0320 	add.w	r3, r7, #32
 8000828:	2200      	movs	r2, #0
 800082a:	601a      	str	r2, [r3, #0]
 800082c:	605a      	str	r2, [r3, #4]
 800082e:	609a      	str	r2, [r3, #8]
 8000830:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a5b      	ldr	r2, [pc, #364]	; (80009a4 <HAL_UART_MspInit+0x188>)
 8000838:	4293      	cmp	r3, r2
 800083a:	d13a      	bne.n	80008b2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800083c:	4b5a      	ldr	r3, [pc, #360]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a59      	ldr	r2, [pc, #356]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 8000842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b57      	ldr	r3, [pc, #348]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000850:	61fb      	str	r3, [r7, #28]
 8000852:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000854:	4b54      	ldr	r3, [pc, #336]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a53      	ldr	r2, [pc, #332]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b51      	ldr	r3, [pc, #324]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f003 0304 	and.w	r3, r3, #4
 8000868:	61bb      	str	r3, [r7, #24]
 800086a:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800086c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000870:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000872:	2302      	movs	r3, #2
 8000874:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000876:	2303      	movs	r3, #3
 8000878:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800087a:	f107 0320 	add.w	r3, r7, #32
 800087e:	4619      	mov	r1, r3
 8000880:	484a      	ldr	r0, [pc, #296]	; (80009ac <HAL_UART_MspInit+0x190>)
 8000882:	f000 fb71 	bl	8000f68 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000886:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800088a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000894:	f107 0320 	add.w	r3, r7, #32
 8000898:	4619      	mov	r1, r3
 800089a:	4844      	ldr	r0, [pc, #272]	; (80009ac <HAL_UART_MspInit+0x190>)
 800089c:	f000 fb64 	bl	8000f68 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2105      	movs	r1, #5
 80008a4:	2025      	movs	r0, #37	; 0x25
 80008a6:	f000 fa82 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008aa:	2025      	movs	r0, #37	; 0x25
 80008ac:	f000 fa9b 	bl	8000de6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80008b0:	e074      	b.n	800099c <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	4a3e      	ldr	r2, [pc, #248]	; (80009b0 <HAL_UART_MspInit+0x194>)
 80008b8:	4293      	cmp	r3, r2
 80008ba:	d130      	bne.n	800091e <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80008bc:	4b3a      	ldr	r3, [pc, #232]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 80008be:	69db      	ldr	r3, [r3, #28]
 80008c0:	4a39      	ldr	r2, [pc, #228]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 80008c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008c6:	61d3      	str	r3, [r2, #28]
 80008c8:	4b37      	ldr	r3, [pc, #220]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 80008ca:	69db      	ldr	r3, [r3, #28]
 80008cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008d0:	617b      	str	r3, [r7, #20]
 80008d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d4:	4b34      	ldr	r3, [pc, #208]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 80008d6:	699b      	ldr	r3, [r3, #24]
 80008d8:	4a33      	ldr	r2, [pc, #204]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 80008da:	f043 0304 	orr.w	r3, r3, #4
 80008de:	6193      	str	r3, [r2, #24]
 80008e0:	4b31      	ldr	r3, [pc, #196]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 80008e2:	699b      	ldr	r3, [r3, #24]
 80008e4:	f003 0304 	and.w	r3, r3, #4
 80008e8:	613b      	str	r3, [r7, #16]
 80008ea:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ec:	2304      	movs	r3, #4
 80008ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f8:	f107 0320 	add.w	r3, r7, #32
 80008fc:	4619      	mov	r1, r3
 80008fe:	482b      	ldr	r0, [pc, #172]	; (80009ac <HAL_UART_MspInit+0x190>)
 8000900:	f000 fb32 	bl	8000f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000904:	2308      	movs	r3, #8
 8000906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000910:	f107 0320 	add.w	r3, r7, #32
 8000914:	4619      	mov	r1, r3
 8000916:	4825      	ldr	r0, [pc, #148]	; (80009ac <HAL_UART_MspInit+0x190>)
 8000918:	f000 fb26 	bl	8000f68 <HAL_GPIO_Init>
}
 800091c:	e03e      	b.n	800099c <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	4a24      	ldr	r2, [pc, #144]	; (80009b4 <HAL_UART_MspInit+0x198>)
 8000924:	4293      	cmp	r3, r2
 8000926:	d139      	bne.n	800099c <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000928:	4b1f      	ldr	r3, [pc, #124]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	4a1e      	ldr	r2, [pc, #120]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 800092e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000932:	61d3      	str	r3, [r2, #28]
 8000934:	4b1c      	ldr	r3, [pc, #112]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 8000936:	69db      	ldr	r3, [r3, #28]
 8000938:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800093c:	60fb      	str	r3, [r7, #12]
 800093e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000940:	4b19      	ldr	r3, [pc, #100]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	4a18      	ldr	r2, [pc, #96]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 8000946:	f043 0308 	orr.w	r3, r3, #8
 800094a:	6193      	str	r3, [r2, #24]
 800094c:	4b16      	ldr	r3, [pc, #88]	; (80009a8 <HAL_UART_MspInit+0x18c>)
 800094e:	699b      	ldr	r3, [r3, #24]
 8000950:	f003 0308 	and.w	r3, r3, #8
 8000954:	60bb      	str	r3, [r7, #8]
 8000956:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000958:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800095c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095e:	2302      	movs	r3, #2
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000966:	f107 0320 	add.w	r3, r7, #32
 800096a:	4619      	mov	r1, r3
 800096c:	4812      	ldr	r0, [pc, #72]	; (80009b8 <HAL_UART_MspInit+0x19c>)
 800096e:	f000 fafb 	bl	8000f68 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000972:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097c:	2300      	movs	r3, #0
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000980:	f107 0320 	add.w	r3, r7, #32
 8000984:	4619      	mov	r1, r3
 8000986:	480c      	ldr	r0, [pc, #48]	; (80009b8 <HAL_UART_MspInit+0x19c>)
 8000988:	f000 faee 	bl	8000f68 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800098c:	2200      	movs	r2, #0
 800098e:	2105      	movs	r1, #5
 8000990:	2027      	movs	r0, #39	; 0x27
 8000992:	f000 fa0c 	bl	8000dae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000996:	2027      	movs	r0, #39	; 0x27
 8000998:	f000 fa25 	bl	8000de6 <HAL_NVIC_EnableIRQ>
}
 800099c:	bf00      	nop
 800099e:	3730      	adds	r7, #48	; 0x30
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	40013800 	.word	0x40013800
 80009a8:	40021000 	.word	0x40021000
 80009ac:	40010800 	.word	0x40010800
 80009b0:	40004400 	.word	0x40004400
 80009b4:	40004800 	.word	0x40004800
 80009b8:	40010c00 	.word	0x40010c00

080009bc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08e      	sub	sp, #56	; 0x38
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80009d2:	4b34      	ldr	r3, [pc, #208]	; (8000aa4 <HAL_InitTick+0xe8>)
 80009d4:	69db      	ldr	r3, [r3, #28]
 80009d6:	4a33      	ldr	r2, [pc, #204]	; (8000aa4 <HAL_InitTick+0xe8>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	61d3      	str	r3, [r2, #28]
 80009de:	4b31      	ldr	r3, [pc, #196]	; (8000aa4 <HAL_InitTick+0xe8>)
 80009e0:	69db      	ldr	r3, [r3, #28]
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ea:	f107 0210 	add.w	r2, r7, #16
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4611      	mov	r1, r2
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f845 	bl	8001a84 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009fa:	6a3b      	ldr	r3, [r7, #32]
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d103      	bne.n	8000a0c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a04:	f001 f816 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
 8000a08:	6378      	str	r0, [r7, #52]	; 0x34
 8000a0a:	e004      	b.n	8000a16 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a0c:	f001 f812 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
 8000a10:	4603      	mov	r3, r0
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000a18:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <HAL_InitTick+0xec>)
 8000a1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a1e:	0c9b      	lsrs	r3, r3, #18
 8000a20:	3b01      	subs	r3, #1
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000a24:	4b21      	ldr	r3, [pc, #132]	; (8000aac <HAL_InitTick+0xf0>)
 8000a26:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a2a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000a2c:	4b1f      	ldr	r3, [pc, #124]	; (8000aac <HAL_InitTick+0xf0>)
 8000a2e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a32:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000a34:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <HAL_InitTick+0xf0>)
 8000a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a38:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000a3a:	4b1c      	ldr	r3, [pc, #112]	; (8000aac <HAL_InitTick+0xf0>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a40:	4b1a      	ldr	r3, [pc, #104]	; (8000aac <HAL_InitTick+0xf0>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <HAL_InitTick+0xf0>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000a4c:	4817      	ldr	r0, [pc, #92]	; (8000aac <HAL_InitTick+0xf0>)
 8000a4e:	f001 f867 	bl	8001b20 <HAL_TIM_Base_Init>
 8000a52:	4603      	mov	r3, r0
 8000a54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a58:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d11b      	bne.n	8000a98 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000a60:	4812      	ldr	r0, [pc, #72]	; (8000aac <HAL_InitTick+0xf0>)
 8000a62:	f001 f8b5 	bl	8001bd0 <HAL_TIM_Base_Start_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a6c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d111      	bne.n	8000a98 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000a74:	201c      	movs	r0, #28
 8000a76:	f000 f9b6 	bl	8000de6 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b0f      	cmp	r3, #15
 8000a7e:	d808      	bhi.n	8000a92 <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000a80:	2200      	movs	r2, #0
 8000a82:	6879      	ldr	r1, [r7, #4]
 8000a84:	201c      	movs	r0, #28
 8000a86:	f000 f992 	bl	8000dae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a8a:	4a09      	ldr	r2, [pc, #36]	; (8000ab0 <HAL_InitTick+0xf4>)
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	6013      	str	r3, [r2, #0]
 8000a90:	e002      	b.n	8000a98 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	3738      	adds	r7, #56	; 0x38
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40021000 	.word	0x40021000
 8000aa8:	431bde83 	.word	0x431bde83
 8000aac:	200004dc 	.word	0x200004dc
 8000ab0:	20000004 	.word	0x20000004

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aca:	e7fe      	b.n	8000aca <BusFault_Handler+0x4>

08000acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad0:	e7fe      	b.n	8000ad0 <UsageFault_Handler+0x4>

08000ad2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bc80      	pop	{r7}
 8000adc:	4770      	bx	lr
	...

08000ae0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <TIM2_IRQHandler+0x10>)
 8000ae6:	f001 f8c5 	bl	8001c74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200004dc 	.word	0x200004dc

08000af4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af8:	4802      	ldr	r0, [pc, #8]	; (8000b04 <USART1_IRQHandler+0x10>)
 8000afa:	f001 fb53 	bl	80021a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afe:	bf00      	nop
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	200002e4 	.word	0x200002e4

08000b08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b0c:	4802      	ldr	r0, [pc, #8]	; (8000b18 <USART3_IRQHandler+0x10>)
 8000b0e:	f001 fb49 	bl	80021a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	20000374 	.word	0x20000374

08000b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b086      	sub	sp, #24
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b24:	4a14      	ldr	r2, [pc, #80]	; (8000b78 <_sbrk+0x5c>)
 8000b26:	4b15      	ldr	r3, [pc, #84]	; (8000b7c <_sbrk+0x60>)
 8000b28:	1ad3      	subs	r3, r2, r3
 8000b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b30:	4b13      	ldr	r3, [pc, #76]	; (8000b80 <_sbrk+0x64>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d102      	bne.n	8000b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b38:	4b11      	ldr	r3, [pc, #68]	; (8000b80 <_sbrk+0x64>)
 8000b3a:	4a12      	ldr	r2, [pc, #72]	; (8000b84 <_sbrk+0x68>)
 8000b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3e:	4b10      	ldr	r3, [pc, #64]	; (8000b80 <_sbrk+0x64>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d207      	bcs.n	8000b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b4c:	f004 fa86 	bl	800505c <__errno>
 8000b50:	4603      	mov	r3, r0
 8000b52:	220c      	movs	r2, #12
 8000b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b56:	f04f 33ff 	mov.w	r3, #4294967295
 8000b5a:	e009      	b.n	8000b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <_sbrk+0x64>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b62:	4b07      	ldr	r3, [pc, #28]	; (8000b80 <_sbrk+0x64>)
 8000b64:	681a      	ldr	r2, [r3, #0]
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	4413      	add	r3, r2
 8000b6a:	4a05      	ldr	r2, [pc, #20]	; (8000b80 <_sbrk+0x64>)
 8000b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3718      	adds	r7, #24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	20005000 	.word	0x20005000
 8000b7c:	00000400 	.word	0x00000400
 8000b80:	20000524 	.word	0x20000524
 8000b84:	20001288 	.word	0x20001288

08000b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b8c:	bf00      	nop
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b94:	f7ff fff8 	bl	8000b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b98:	480b      	ldr	r0, [pc, #44]	; (8000bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b9a:	490c      	ldr	r1, [pc, #48]	; (8000bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	; (8000bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ba0:	e002      	b.n	8000ba8 <LoopCopyDataInit>

08000ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ba6:	3304      	adds	r3, #4

08000ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bac:	d3f9      	bcc.n	8000ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bae:	4a09      	ldr	r2, [pc, #36]	; (8000bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000bb0:	4c09      	ldr	r4, [pc, #36]	; (8000bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bb4:	e001      	b.n	8000bba <LoopFillZerobss>

08000bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb8:	3204      	adds	r2, #4

08000bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bbc:	d3fb      	bcc.n	8000bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bbe:	f004 fa53 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bc2:	f7ff fae5 	bl	8000190 <main>
  bx lr
 8000bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bcc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bd0:	08005ab0 	.word	0x08005ab0
  ldr r2, =_sbss
 8000bd4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bd8:	20001288 	.word	0x20001288

08000bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bdc:	e7fe      	b.n	8000bdc <ADC1_2_IRQHandler>
	...

08000be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <HAL_Init+0x28>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a07      	ldr	r2, [pc, #28]	; (8000c08 <HAL_Init+0x28>)
 8000bea:	f043 0310 	orr.w	r3, r3, #16
 8000bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf0:	2003      	movs	r0, #3
 8000bf2:	f000 f8d1 	bl	8000d98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf6:	200f      	movs	r0, #15
 8000bf8:	f7ff fee0 	bl	80009bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bfc:	f7ff fdd6 	bl	80007ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	40022000 	.word	0x40022000

08000c0c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <HAL_IncTick+0x1c>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	461a      	mov	r2, r3
 8000c16:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <HAL_IncTick+0x20>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	4a03      	ldr	r2, [pc, #12]	; (8000c2c <HAL_IncTick+0x20>)
 8000c1e:	6013      	str	r3, [r2, #0]
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bc80      	pop	{r7}
 8000c26:	4770      	bx	lr
 8000c28:	20000008 	.word	0x20000008
 8000c2c:	20000528 	.word	0x20000528

08000c30 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  return uwTick;
 8000c34:	4b02      	ldr	r3, [pc, #8]	; (8000c40 <HAL_GetTick+0x10>)
 8000c36:	681b      	ldr	r3, [r3, #0]
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bc80      	pop	{r7}
 8000c3e:	4770      	bx	lr
 8000c40:	20000528 	.word	0x20000528

08000c44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b085      	sub	sp, #20
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c54:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c5a:	68ba      	ldr	r2, [r7, #8]
 8000c5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c60:	4013      	ands	r3, r2
 8000c62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c76:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <__NVIC_SetPriorityGrouping+0x44>)
 8000c78:	68bb      	ldr	r3, [r7, #8]
 8000c7a:	60d3      	str	r3, [r2, #12]
}
 8000c7c:	bf00      	nop
 8000c7e:	3714      	adds	r7, #20
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bc80      	pop	{r7}
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c90:	4b04      	ldr	r3, [pc, #16]	; (8000ca4 <__NVIC_GetPriorityGrouping+0x18>)
 8000c92:	68db      	ldr	r3, [r3, #12]
 8000c94:	0a1b      	lsrs	r3, r3, #8
 8000c96:	f003 0307 	and.w	r3, r3, #7
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bc80      	pop	{r7}
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db0b      	blt.n	8000cd2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cba:	79fb      	ldrb	r3, [r7, #7]
 8000cbc:	f003 021f 	and.w	r2, r3, #31
 8000cc0:	4906      	ldr	r1, [pc, #24]	; (8000cdc <__NVIC_EnableIRQ+0x34>)
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	2001      	movs	r0, #1
 8000cca:	fa00 f202 	lsl.w	r2, r0, r2
 8000cce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cd2:	bf00      	nop
 8000cd4:	370c      	adds	r7, #12
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bc80      	pop	{r7}
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100

08000ce0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	6039      	str	r1, [r7, #0]
 8000cea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	db0a      	blt.n	8000d0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	490c      	ldr	r1, [pc, #48]	; (8000d2c <__NVIC_SetPriority+0x4c>)
 8000cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfe:	0112      	lsls	r2, r2, #4
 8000d00:	b2d2      	uxtb	r2, r2
 8000d02:	440b      	add	r3, r1
 8000d04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d08:	e00a      	b.n	8000d20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	4908      	ldr	r1, [pc, #32]	; (8000d30 <__NVIC_SetPriority+0x50>)
 8000d10:	79fb      	ldrb	r3, [r7, #7]
 8000d12:	f003 030f 	and.w	r3, r3, #15
 8000d16:	3b04      	subs	r3, #4
 8000d18:	0112      	lsls	r2, r2, #4
 8000d1a:	b2d2      	uxtb	r2, r2
 8000d1c:	440b      	add	r3, r1
 8000d1e:	761a      	strb	r2, [r3, #24]
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	bc80      	pop	{r7}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e100 	.word	0xe000e100
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	60f8      	str	r0, [r7, #12]
 8000d3c:	60b9      	str	r1, [r7, #8]
 8000d3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d48:	69fb      	ldr	r3, [r7, #28]
 8000d4a:	f1c3 0307 	rsb	r3, r3, #7
 8000d4e:	2b04      	cmp	r3, #4
 8000d50:	bf28      	it	cs
 8000d52:	2304      	movcs	r3, #4
 8000d54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3304      	adds	r3, #4
 8000d5a:	2b06      	cmp	r3, #6
 8000d5c:	d902      	bls.n	8000d64 <NVIC_EncodePriority+0x30>
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	3b03      	subs	r3, #3
 8000d62:	e000      	b.n	8000d66 <NVIC_EncodePriority+0x32>
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d68:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6c:	69bb      	ldr	r3, [r7, #24]
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43da      	mvns	r2, r3
 8000d74:	68bb      	ldr	r3, [r7, #8]
 8000d76:	401a      	ands	r2, r3
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d7c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	fa01 f303 	lsl.w	r3, r1, r3
 8000d86:	43d9      	mvns	r1, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d8c:	4313      	orrs	r3, r2
         );
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	3724      	adds	r7, #36	; 0x24
 8000d92:	46bd      	mov	sp, r7
 8000d94:	bc80      	pop	{r7}
 8000d96:	4770      	bx	lr

08000d98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f7ff ff4f 	bl	8000c44 <__NVIC_SetPriorityGrouping>
}
 8000da6:	bf00      	nop
 8000da8:	3708      	adds	r7, #8
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}

08000dae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dae:	b580      	push	{r7, lr}
 8000db0:	b086      	sub	sp, #24
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	4603      	mov	r3, r0
 8000db6:	60b9      	str	r1, [r7, #8]
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dc0:	f7ff ff64 	bl	8000c8c <__NVIC_GetPriorityGrouping>
 8000dc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	68b9      	ldr	r1, [r7, #8]
 8000dca:	6978      	ldr	r0, [r7, #20]
 8000dcc:	f7ff ffb2 	bl	8000d34 <NVIC_EncodePriority>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dd6:	4611      	mov	r1, r2
 8000dd8:	4618      	mov	r0, r3
 8000dda:	f7ff ff81 	bl	8000ce0 <__NVIC_SetPriority>
}
 8000dde:	bf00      	nop
 8000de0:	3718      	adds	r7, #24
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff ff57 	bl	8000ca8 <__NVIC_EnableIRQ>
}
 8000dfa:	bf00      	nop
 8000dfc:	3708      	adds	r7, #8
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e02:	b480      	push	{r7}
 8000e04:	b085      	sub	sp, #20
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e14:	b2db      	uxtb	r3, r3
 8000e16:	2b02      	cmp	r3, #2
 8000e18:	d008      	beq.n	8000e2c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2204      	movs	r2, #4
 8000e1e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2200      	movs	r2, #0
 8000e24:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	e020      	b.n	8000e6e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	681a      	ldr	r2, [r3, #0]
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	f022 020e 	bic.w	r2, r2, #14
 8000e3a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f022 0201 	bic.w	r2, r2, #1
 8000e4a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e54:	2101      	movs	r1, #1
 8000e56:	fa01 f202 	lsl.w	r2, r1, r2
 8000e5a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	2201      	movs	r2, #1
 8000e60:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	2200      	movs	r2, #0
 8000e68:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bc80      	pop	{r7}
 8000e76:	4770      	bx	lr

08000e78 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b084      	sub	sp, #16
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e80:	2300      	movs	r3, #0
 8000e82:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d005      	beq.n	8000e9c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	2204      	movs	r2, #4
 8000e94:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000e96:	2301      	movs	r3, #1
 8000e98:	73fb      	strb	r3, [r7, #15]
 8000e9a:	e051      	b.n	8000f40 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f022 020e 	bic.w	r2, r2, #14
 8000eaa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f022 0201 	bic.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a22      	ldr	r2, [pc, #136]	; (8000f4c <HAL_DMA_Abort_IT+0xd4>)
 8000ec2:	4293      	cmp	r3, r2
 8000ec4:	d029      	beq.n	8000f1a <HAL_DMA_Abort_IT+0xa2>
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a21      	ldr	r2, [pc, #132]	; (8000f50 <HAL_DMA_Abort_IT+0xd8>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d022      	beq.n	8000f16 <HAL_DMA_Abort_IT+0x9e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <HAL_DMA_Abort_IT+0xdc>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d01a      	beq.n	8000f10 <HAL_DMA_Abort_IT+0x98>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a1e      	ldr	r2, [pc, #120]	; (8000f58 <HAL_DMA_Abort_IT+0xe0>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d012      	beq.n	8000f0a <HAL_DMA_Abort_IT+0x92>
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <HAL_DMA_Abort_IT+0xe4>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d00a      	beq.n	8000f04 <HAL_DMA_Abort_IT+0x8c>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <HAL_DMA_Abort_IT+0xe8>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d102      	bne.n	8000efe <HAL_DMA_Abort_IT+0x86>
 8000ef8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000efc:	e00e      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000efe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000f02:	e00b      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f04:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f08:	e008      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	e005      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f14:	e002      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f16:	2310      	movs	r3, #16
 8000f18:	e000      	b.n	8000f1c <HAL_DMA_Abort_IT+0xa4>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	4a11      	ldr	r2, [pc, #68]	; (8000f64 <HAL_DMA_Abort_IT+0xec>)
 8000f1e:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d003      	beq.n	8000f40 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	4798      	blx	r3
    } 
  }
  return status;
 8000f40:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40020008 	.word	0x40020008
 8000f50:	4002001c 	.word	0x4002001c
 8000f54:	40020030 	.word	0x40020030
 8000f58:	40020044 	.word	0x40020044
 8000f5c:	40020058 	.word	0x40020058
 8000f60:	4002006c 	.word	0x4002006c
 8000f64:	40020000 	.word	0x40020000

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b08b      	sub	sp, #44	; 0x2c
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000f76:	2300      	movs	r3, #0
 8000f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f7a:	e169      	b.n	8001250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	69fa      	ldr	r2, [r7, #28]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	69fb      	ldr	r3, [r7, #28]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8158 	bne.w	800124a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	4a9a      	ldr	r2, [pc, #616]	; (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d05e      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fa4:	4a98      	ldr	r2, [pc, #608]	; (8001208 <HAL_GPIO_Init+0x2a0>)
 8000fa6:	4293      	cmp	r3, r2
 8000fa8:	d875      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000faa:	4a98      	ldr	r2, [pc, #608]	; (800120c <HAL_GPIO_Init+0x2a4>)
 8000fac:	4293      	cmp	r3, r2
 8000fae:	d058      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fb0:	4a96      	ldr	r2, [pc, #600]	; (800120c <HAL_GPIO_Init+0x2a4>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d86f      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fb6:	4a96      	ldr	r2, [pc, #600]	; (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fb8:	4293      	cmp	r3, r2
 8000fba:	d052      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fbc:	4a94      	ldr	r2, [pc, #592]	; (8001210 <HAL_GPIO_Init+0x2a8>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d869      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fc2:	4a94      	ldr	r2, [pc, #592]	; (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d04c      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fc8:	4a92      	ldr	r2, [pc, #584]	; (8001214 <HAL_GPIO_Init+0x2ac>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d863      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fce:	4a92      	ldr	r2, [pc, #584]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d046      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
 8000fd4:	4a90      	ldr	r2, [pc, #576]	; (8001218 <HAL_GPIO_Init+0x2b0>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d85d      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fda:	2b12      	cmp	r3, #18
 8000fdc:	d82a      	bhi.n	8001034 <HAL_GPIO_Init+0xcc>
 8000fde:	2b12      	cmp	r3, #18
 8000fe0:	d859      	bhi.n	8001096 <HAL_GPIO_Init+0x12e>
 8000fe2:	a201      	add	r2, pc, #4	; (adr r2, 8000fe8 <HAL_GPIO_Init+0x80>)
 8000fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe8:	08001063 	.word	0x08001063
 8000fec:	0800103d 	.word	0x0800103d
 8000ff0:	0800104f 	.word	0x0800104f
 8000ff4:	08001091 	.word	0x08001091
 8000ff8:	08001097 	.word	0x08001097
 8000ffc:	08001097 	.word	0x08001097
 8001000:	08001097 	.word	0x08001097
 8001004:	08001097 	.word	0x08001097
 8001008:	08001097 	.word	0x08001097
 800100c:	08001097 	.word	0x08001097
 8001010:	08001097 	.word	0x08001097
 8001014:	08001097 	.word	0x08001097
 8001018:	08001097 	.word	0x08001097
 800101c:	08001097 	.word	0x08001097
 8001020:	08001097 	.word	0x08001097
 8001024:	08001097 	.word	0x08001097
 8001028:	08001097 	.word	0x08001097
 800102c:	08001045 	.word	0x08001045
 8001030:	08001059 	.word	0x08001059
 8001034:	4a79      	ldr	r2, [pc, #484]	; (800121c <HAL_GPIO_Init+0x2b4>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d013      	beq.n	8001062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800103a:	e02c      	b.n	8001096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	68db      	ldr	r3, [r3, #12]
 8001040:	623b      	str	r3, [r7, #32]
          break;
 8001042:	e029      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	3304      	adds	r3, #4
 800104a:	623b      	str	r3, [r7, #32]
          break;
 800104c:	e024      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	3308      	adds	r3, #8
 8001054:	623b      	str	r3, [r7, #32]
          break;
 8001056:	e01f      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	68db      	ldr	r3, [r3, #12]
 800105c:	330c      	adds	r3, #12
 800105e:	623b      	str	r3, [r7, #32]
          break;
 8001060:	e01a      	b.n	8001098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d102      	bne.n	8001070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800106a:	2304      	movs	r3, #4
 800106c:	623b      	str	r3, [r7, #32]
          break;
 800106e:	e013      	b.n	8001098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b01      	cmp	r3, #1
 8001076:	d105      	bne.n	8001084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001078:	2308      	movs	r3, #8
 800107a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69fa      	ldr	r2, [r7, #28]
 8001080:	611a      	str	r2, [r3, #16]
          break;
 8001082:	e009      	b.n	8001098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001084:	2308      	movs	r3, #8
 8001086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	69fa      	ldr	r2, [r7, #28]
 800108c:	615a      	str	r2, [r3, #20]
          break;
 800108e:	e003      	b.n	8001098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
          break;
 8001094:	e000      	b.n	8001098 <HAL_GPIO_Init+0x130>
          break;
 8001096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	2bff      	cmp	r3, #255	; 0xff
 800109c:	d801      	bhi.n	80010a2 <HAL_GPIO_Init+0x13a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	e001      	b.n	80010a6 <HAL_GPIO_Init+0x13e>
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	3304      	adds	r3, #4
 80010a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010a8:	69bb      	ldr	r3, [r7, #24]
 80010aa:	2bff      	cmp	r3, #255	; 0xff
 80010ac:	d802      	bhi.n	80010b4 <HAL_GPIO_Init+0x14c>
 80010ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	e002      	b.n	80010ba <HAL_GPIO_Init+0x152>
 80010b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010b6:	3b08      	subs	r3, #8
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80010bc:	697b      	ldr	r3, [r7, #20]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	210f      	movs	r1, #15
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	fa01 f303 	lsl.w	r3, r1, r3
 80010c8:	43db      	mvns	r3, r3
 80010ca:	401a      	ands	r2, r3
 80010cc:	6a39      	ldr	r1, [r7, #32]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	fa01 f303 	lsl.w	r3, r1, r3
 80010d4:	431a      	orrs	r2, r3
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	f000 80b1 	beq.w	800124a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80010e8:	4b4d      	ldr	r3, [pc, #308]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	4a4c      	ldr	r2, [pc, #304]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6193      	str	r3, [r2, #24]
 80010f4:	4b4a      	ldr	r3, [pc, #296]	; (8001220 <HAL_GPIO_Init+0x2b8>)
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
 80010fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001100:	4a48      	ldr	r2, [pc, #288]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001104:	089b      	lsrs	r3, r3, #2
 8001106:	3302      	adds	r3, #2
 8001108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800110e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	220f      	movs	r2, #15
 8001118:	fa02 f303 	lsl.w	r3, r2, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	68fa      	ldr	r2, [r7, #12]
 8001120:	4013      	ands	r3, r2
 8001122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a40      	ldr	r2, [pc, #256]	; (8001228 <HAL_GPIO_Init+0x2c0>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d013      	beq.n	8001154 <HAL_GPIO_Init+0x1ec>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a3f      	ldr	r2, [pc, #252]	; (800122c <HAL_GPIO_Init+0x2c4>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d00d      	beq.n	8001150 <HAL_GPIO_Init+0x1e8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a3e      	ldr	r2, [pc, #248]	; (8001230 <HAL_GPIO_Init+0x2c8>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d007      	beq.n	800114c <HAL_GPIO_Init+0x1e4>
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4a3d      	ldr	r2, [pc, #244]	; (8001234 <HAL_GPIO_Init+0x2cc>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d101      	bne.n	8001148 <HAL_GPIO_Init+0x1e0>
 8001144:	2303      	movs	r3, #3
 8001146:	e006      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001148:	2304      	movs	r3, #4
 800114a:	e004      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 800114c:	2302      	movs	r3, #2
 800114e:	e002      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001150:	2301      	movs	r3, #1
 8001152:	e000      	b.n	8001156 <HAL_GPIO_Init+0x1ee>
 8001154:	2300      	movs	r3, #0
 8001156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001158:	f002 0203 	and.w	r2, r2, #3
 800115c:	0092      	lsls	r2, r2, #2
 800115e:	4093      	lsls	r3, r2
 8001160:	68fa      	ldr	r2, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001166:	492f      	ldr	r1, [pc, #188]	; (8001224 <HAL_GPIO_Init+0x2bc>)
 8001168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800116a:	089b      	lsrs	r3, r3, #2
 800116c:	3302      	adds	r3, #2
 800116e:	68fa      	ldr	r2, [r7, #12]
 8001170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800117c:	2b00      	cmp	r3, #0
 800117e:	d006      	beq.n	800118e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001180:	4b2d      	ldr	r3, [pc, #180]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	492c      	ldr	r1, [pc, #176]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001186:	69bb      	ldr	r3, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	608b      	str	r3, [r1, #8]
 800118c:	e006      	b.n	800119c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800118e:	4b2a      	ldr	r3, [pc, #168]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001190:	689a      	ldr	r2, [r3, #8]
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	43db      	mvns	r3, r3
 8001196:	4928      	ldr	r1, [pc, #160]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 8001198:	4013      	ands	r3, r2
 800119a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d006      	beq.n	80011b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011a8:	4b23      	ldr	r3, [pc, #140]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011aa:	68da      	ldr	r2, [r3, #12]
 80011ac:	4922      	ldr	r1, [pc, #136]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011ae:	69bb      	ldr	r3, [r7, #24]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60cb      	str	r3, [r1, #12]
 80011b4:	e006      	b.n	80011c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80011b6:	4b20      	ldr	r3, [pc, #128]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011b8:	68da      	ldr	r2, [r3, #12]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	43db      	mvns	r3, r3
 80011be:	491e      	ldr	r1, [pc, #120]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011c0:	4013      	ands	r3, r2
 80011c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	685b      	ldr	r3, [r3, #4]
 80011c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d006      	beq.n	80011de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80011d0:	4b19      	ldr	r3, [pc, #100]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d2:	685a      	ldr	r2, [r3, #4]
 80011d4:	4918      	ldr	r1, [pc, #96]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
 80011dc:	e006      	b.n	80011ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80011de:	4b16      	ldr	r3, [pc, #88]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e0:	685a      	ldr	r2, [r3, #4]
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	43db      	mvns	r3, r3
 80011e6:	4914      	ldr	r1, [pc, #80]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011e8:	4013      	ands	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d021      	beq.n	800123c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	490e      	ldr	r1, [pc, #56]	; (8001238 <HAL_GPIO_Init+0x2d0>)
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	4313      	orrs	r3, r2
 8001202:	600b      	str	r3, [r1, #0]
 8001204:	e021      	b.n	800124a <HAL_GPIO_Init+0x2e2>
 8001206:	bf00      	nop
 8001208:	10320000 	.word	0x10320000
 800120c:	10310000 	.word	0x10310000
 8001210:	10220000 	.word	0x10220000
 8001214:	10210000 	.word	0x10210000
 8001218:	10120000 	.word	0x10120000
 800121c:	10110000 	.word	0x10110000
 8001220:	40021000 	.word	0x40021000
 8001224:	40010000 	.word	0x40010000
 8001228:	40010800 	.word	0x40010800
 800122c:	40010c00 	.word	0x40010c00
 8001230:	40011000 	.word	0x40011000
 8001234:	40011400 	.word	0x40011400
 8001238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_GPIO_Init+0x304>)
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	69bb      	ldr	r3, [r7, #24]
 8001242:	43db      	mvns	r3, r3
 8001244:	4909      	ldr	r1, [pc, #36]	; (800126c <HAL_GPIO_Init+0x304>)
 8001246:	4013      	ands	r3, r2
 8001248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800124a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800124c:	3301      	adds	r3, #1
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	681a      	ldr	r2, [r3, #0]
 8001254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001256:	fa22 f303 	lsr.w	r3, r2, r3
 800125a:	2b00      	cmp	r3, #0
 800125c:	f47f ae8e 	bne.w	8000f7c <HAL_GPIO_Init+0x14>
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	372c      	adds	r7, #44	; 0x2c
 8001266:	46bd      	mov	sp, r7
 8001268:	bc80      	pop	{r7}
 800126a:	4770      	bx	lr
 800126c:	40010400 	.word	0x40010400

08001270 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
 8001278:	460b      	mov	r3, r1
 800127a:	807b      	strh	r3, [r7, #2]
 800127c:	4613      	mov	r3, r2
 800127e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001280:	787b      	ldrb	r3, [r7, #1]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d003      	beq.n	800128e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001286:	887a      	ldrh	r2, [r7, #2]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800128c:	e003      	b.n	8001296 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800128e:	887b      	ldrh	r3, [r7, #2]
 8001290:	041a      	lsls	r2, r3, #16
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	611a      	str	r2, [r3, #16]
}
 8001296:	bf00      	nop
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	bc80      	pop	{r7}
 800129e:	4770      	bx	lr

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e272      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f003 0301 	and.w	r3, r3, #1
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	f000 8087 	beq.w	80013ce <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012c0:	4b92      	ldr	r3, [pc, #584]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 030c 	and.w	r3, r3, #12
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d00c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012cc:	4b8f      	ldr	r3, [pc, #572]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f003 030c 	and.w	r3, r3, #12
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d112      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
 80012d8:	4b8c      	ldr	r3, [pc, #560]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012e4:	d10b      	bne.n	80012fe <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e6:	4b89      	ldr	r3, [pc, #548]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d06c      	beq.n	80013cc <HAL_RCC_OscConfig+0x12c>
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d168      	bne.n	80013cc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e24c      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001306:	d106      	bne.n	8001316 <HAL_RCC_OscConfig+0x76>
 8001308:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a7f      	ldr	r2, [pc, #508]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800130e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	e02e      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d10c      	bne.n	8001338 <HAL_RCC_OscConfig+0x98>
 800131e:	4b7b      	ldr	r3, [pc, #492]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	4a7a      	ldr	r2, [pc, #488]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001324:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001328:	6013      	str	r3, [r2, #0]
 800132a:	4b78      	ldr	r3, [pc, #480]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	4a77      	ldr	r2, [pc, #476]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001330:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001334:	6013      	str	r3, [r2, #0]
 8001336:	e01d      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001340:	d10c      	bne.n	800135c <HAL_RCC_OscConfig+0xbc>
 8001342:	4b72      	ldr	r3, [pc, #456]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	4a71      	ldr	r2, [pc, #452]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800134c:	6013      	str	r3, [r2, #0]
 800134e:	4b6f      	ldr	r3, [pc, #444]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a6e      	ldr	r2, [pc, #440]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001358:	6013      	str	r3, [r2, #0]
 800135a:	e00b      	b.n	8001374 <HAL_RCC_OscConfig+0xd4>
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a6a      	ldr	r2, [pc, #424]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	4b68      	ldr	r3, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	4a67      	ldr	r2, [pc, #412]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 800136e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001372:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d013      	beq.n	80013a4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800137c:	f7ff fc58 	bl	8000c30 <HAL_GetTick>
 8001380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	e008      	b.n	8001396 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001384:	f7ff fc54 	bl	8000c30 <HAL_GetTick>
 8001388:	4602      	mov	r2, r0
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	1ad3      	subs	r3, r2, r3
 800138e:	2b64      	cmp	r3, #100	; 0x64
 8001390:	d901      	bls.n	8001396 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001392:	2303      	movs	r3, #3
 8001394:	e200      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001396:	4b5d      	ldr	r3, [pc, #372]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0f0      	beq.n	8001384 <HAL_RCC_OscConfig+0xe4>
 80013a2:	e014      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a4:	f7ff fc44 	bl	8000c30 <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	e008      	b.n	80013be <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013ac:	f7ff fc40 	bl	8000c30 <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	2b64      	cmp	r3, #100	; 0x64
 80013b8:	d901      	bls.n	80013be <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e1ec      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013be:	4b53      	ldr	r3, [pc, #332]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d1f0      	bne.n	80013ac <HAL_RCC_OscConfig+0x10c>
 80013ca:	e000      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f003 0302 	and.w	r3, r3, #2
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d063      	beq.n	80014a2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013da:	4b4c      	ldr	r3, [pc, #304]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f003 030c 	and.w	r3, r3, #12
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d00b      	beq.n	80013fe <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013e6:	4b49      	ldr	r3, [pc, #292]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f003 030c 	and.w	r3, r3, #12
 80013ee:	2b08      	cmp	r3, #8
 80013f0:	d11c      	bne.n	800142c <HAL_RCC_OscConfig+0x18c>
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d116      	bne.n	800142c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f003 0302 	and.w	r3, r3, #2
 8001406:	2b00      	cmp	r3, #0
 8001408:	d005      	beq.n	8001416 <HAL_RCC_OscConfig+0x176>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	691b      	ldr	r3, [r3, #16]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d001      	beq.n	8001416 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	e1c0      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	695b      	ldr	r3, [r3, #20]
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	4939      	ldr	r1, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001426:	4313      	orrs	r3, r2
 8001428:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800142a:	e03a      	b.n	80014a2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d020      	beq.n	8001476 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001434:	4b36      	ldr	r3, [pc, #216]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001436:	2201      	movs	r2, #1
 8001438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800143a:	f7ff fbf9 	bl	8000c30 <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001442:	f7ff fbf5 	bl	8000c30 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e1a1      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001454:	4b2d      	ldr	r3, [pc, #180]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d0f0      	beq.n	8001442 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001460:	4b2a      	ldr	r3, [pc, #168]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	695b      	ldr	r3, [r3, #20]
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	4927      	ldr	r1, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001470:	4313      	orrs	r3, r2
 8001472:	600b      	str	r3, [r1, #0]
 8001474:	e015      	b.n	80014a2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <HAL_RCC_OscConfig+0x270>)
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147c:	f7ff fbd8 	bl	8000c30 <HAL_GetTick>
 8001480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001482:	e008      	b.n	8001496 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001484:	f7ff fbd4 	bl	8000c30 <HAL_GetTick>
 8001488:	4602      	mov	r2, r0
 800148a:	693b      	ldr	r3, [r7, #16]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	2b02      	cmp	r3, #2
 8001490:	d901      	bls.n	8001496 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e180      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001496:	4b1d      	ldr	r3, [pc, #116]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0302 	and.w	r3, r3, #2
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f0      	bne.n	8001484 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f003 0308 	and.w	r3, r3, #8
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d03a      	beq.n	8001524 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d019      	beq.n	80014ea <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014b6:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_RCC_OscConfig+0x274>)
 80014b8:	2201      	movs	r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014bc:	f7ff fbb8 	bl	8000c30 <HAL_GetTick>
 80014c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014c2:	e008      	b.n	80014d6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014c4:	f7ff fbb4 	bl	8000c30 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b02      	cmp	r3, #2
 80014d0:	d901      	bls.n	80014d6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	e160      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d6:	4b0d      	ldr	r3, [pc, #52]	; (800150c <HAL_RCC_OscConfig+0x26c>)
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d0f0      	beq.n	80014c4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80014e2:	2001      	movs	r0, #1
 80014e4:	f000 fafe 	bl	8001ae4 <RCC_Delay>
 80014e8:	e01c      	b.n	8001524 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014ea:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x274>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014f0:	f7ff fb9e 	bl	8000c30 <HAL_GetTick>
 80014f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f6:	e00f      	b.n	8001518 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f8:	f7ff fb9a 	bl	8000c30 <HAL_GetTick>
 80014fc:	4602      	mov	r2, r0
 80014fe:	693b      	ldr	r3, [r7, #16]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	2b02      	cmp	r3, #2
 8001504:	d908      	bls.n	8001518 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001506:	2303      	movs	r3, #3
 8001508:	e146      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
 800150a:	bf00      	nop
 800150c:	40021000 	.word	0x40021000
 8001510:	42420000 	.word	0x42420000
 8001514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	4b92      	ldr	r3, [pc, #584]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1e9      	bne.n	80014f8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0304 	and.w	r3, r3, #4
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 80a6 	beq.w	800167e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001532:	2300      	movs	r3, #0
 8001534:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001536:	4b8b      	ldr	r3, [pc, #556]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800153e:	2b00      	cmp	r3, #0
 8001540:	d10d      	bne.n	800155e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001542:	4b88      	ldr	r3, [pc, #544]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	4a87      	ldr	r2, [pc, #540]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800154c:	61d3      	str	r3, [r2, #28]
 800154e:	4b85      	ldr	r3, [pc, #532]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001550:	69db      	ldr	r3, [r3, #28]
 8001552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001556:	60bb      	str	r3, [r7, #8]
 8001558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800155a:	2301      	movs	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800155e:	4b82      	ldr	r3, [pc, #520]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001566:	2b00      	cmp	r3, #0
 8001568:	d118      	bne.n	800159c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800156a:	4b7f      	ldr	r3, [pc, #508]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a7e      	ldr	r2, [pc, #504]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001576:	f7ff fb5b 	bl	8000c30 <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800157e:	f7ff fb57 	bl	8000c30 <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b64      	cmp	r3, #100	; 0x64
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e103      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001590:	4b75      	ldr	r3, [pc, #468]	; (8001768 <HAL_RCC_OscConfig+0x4c8>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	2b01      	cmp	r3, #1
 80015a2:	d106      	bne.n	80015b2 <HAL_RCC_OscConfig+0x312>
 80015a4:	4b6f      	ldr	r3, [pc, #444]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4a6e      	ldr	r2, [pc, #440]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	6213      	str	r3, [r2, #32]
 80015b0:	e02d      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	68db      	ldr	r3, [r3, #12]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d10c      	bne.n	80015d4 <HAL_RCC_OscConfig+0x334>
 80015ba:	4b6a      	ldr	r3, [pc, #424]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	4a69      	ldr	r2, [pc, #420]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	6213      	str	r3, [r2, #32]
 80015c6:	4b67      	ldr	r3, [pc, #412]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	4a66      	ldr	r2, [pc, #408]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015cc:	f023 0304 	bic.w	r3, r3, #4
 80015d0:	6213      	str	r3, [r2, #32]
 80015d2:	e01c      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	2b05      	cmp	r3, #5
 80015da:	d10c      	bne.n	80015f6 <HAL_RCC_OscConfig+0x356>
 80015dc:	4b61      	ldr	r3, [pc, #388]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4a60      	ldr	r2, [pc, #384]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015e2:	f043 0304 	orr.w	r3, r3, #4
 80015e6:	6213      	str	r3, [r2, #32]
 80015e8:	4b5e      	ldr	r3, [pc, #376]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015ea:	6a1b      	ldr	r3, [r3, #32]
 80015ec:	4a5d      	ldr	r2, [pc, #372]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015ee:	f043 0301 	orr.w	r3, r3, #1
 80015f2:	6213      	str	r3, [r2, #32]
 80015f4:	e00b      	b.n	800160e <HAL_RCC_OscConfig+0x36e>
 80015f6:	4b5b      	ldr	r3, [pc, #364]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015f8:	6a1b      	ldr	r3, [r3, #32]
 80015fa:	4a5a      	ldr	r2, [pc, #360]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80015fc:	f023 0301 	bic.w	r3, r3, #1
 8001600:	6213      	str	r3, [r2, #32]
 8001602:	4b58      	ldr	r3, [pc, #352]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	4a57      	ldr	r2, [pc, #348]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001608:	f023 0304 	bic.w	r3, r3, #4
 800160c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d015      	beq.n	8001642 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001616:	f7ff fb0b 	bl	8000c30 <HAL_GetTick>
 800161a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800161c:	e00a      	b.n	8001634 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161e:	f7ff fb07 	bl	8000c30 <HAL_GetTick>
 8001622:	4602      	mov	r2, r0
 8001624:	693b      	ldr	r3, [r7, #16]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	f241 3288 	movw	r2, #5000	; 0x1388
 800162c:	4293      	cmp	r3, r2
 800162e:	d901      	bls.n	8001634 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001630:	2303      	movs	r3, #3
 8001632:	e0b1      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001634:	4b4b      	ldr	r3, [pc, #300]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	6a1b      	ldr	r3, [r3, #32]
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ee      	beq.n	800161e <HAL_RCC_OscConfig+0x37e>
 8001640:	e014      	b.n	800166c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001642:	f7ff faf5 	bl	8000c30 <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800164a:	f7ff faf1 	bl	8000c30 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	; 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e09b      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001660:	4b40      	ldr	r3, [pc, #256]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001662:	6a1b      	ldr	r3, [r3, #32]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800166c:	7dfb      	ldrb	r3, [r7, #23]
 800166e:	2b01      	cmp	r3, #1
 8001670:	d105      	bne.n	800167e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001672:	4b3c      	ldr	r3, [pc, #240]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001674:	69db      	ldr	r3, [r3, #28]
 8001676:	4a3b      	ldr	r2, [pc, #236]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 8001678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800167c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	69db      	ldr	r3, [r3, #28]
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 8087 	beq.w	8001796 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001688:	4b36      	ldr	r3, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b08      	cmp	r3, #8
 8001692:	d061      	beq.n	8001758 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d146      	bne.n	800172a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800169c:	4b33      	ldr	r3, [pc, #204]	; (800176c <HAL_RCC_OscConfig+0x4cc>)
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fac5 	bl	8000c30 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016aa:	f7ff fac1 	bl	8000c30 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e06d      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016bc:	4b29      	ldr	r3, [pc, #164]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d0:	d108      	bne.n	80016e4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80016d2:	4b24      	ldr	r3, [pc, #144]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	4921      	ldr	r1, [pc, #132]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016e0:	4313      	orrs	r3, r2
 80016e2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e4:	4b1f      	ldr	r3, [pc, #124]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6a19      	ldr	r1, [r3, #32]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f4:	430b      	orrs	r3, r1
 80016f6:	491b      	ldr	r1, [pc, #108]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 80016f8:	4313      	orrs	r3, r2
 80016fa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016fc:	4b1b      	ldr	r3, [pc, #108]	; (800176c <HAL_RCC_OscConfig+0x4cc>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001702:	f7ff fa95 	bl	8000c30 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800170a:	f7ff fa91 	bl	8000c30 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e03d      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001724:	2b00      	cmp	r3, #0
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x46a>
 8001728:	e035      	b.n	8001796 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800172a:	4b10      	ldr	r3, [pc, #64]	; (800176c <HAL_RCC_OscConfig+0x4cc>)
 800172c:	2200      	movs	r2, #0
 800172e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001730:	f7ff fa7e 	bl	8000c30 <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001738:	f7ff fa7a 	bl	8000c30 <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b02      	cmp	r3, #2
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e026      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800174a:	4b06      	ldr	r3, [pc, #24]	; (8001764 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0x498>
 8001756:	e01e      	b.n	8001796 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69db      	ldr	r3, [r3, #28]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d107      	bne.n	8001770 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e019      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
 8001764:	40021000 	.word	0x40021000
 8001768:	40007000 	.word	0x40007000
 800176c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001770:	4b0b      	ldr	r3, [pc, #44]	; (80017a0 <HAL_RCC_OscConfig+0x500>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6a1b      	ldr	r3, [r3, #32]
 8001780:	429a      	cmp	r2, r3
 8001782:	d106      	bne.n	8001792 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800178e:	429a      	cmp	r2, r3
 8001790:	d001      	beq.n	8001796 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e000      	b.n	8001798 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001796:	2300      	movs	r3, #0
}
 8001798:	4618      	mov	r0, r3
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000

080017a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b084      	sub	sp, #16
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
 80017ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d101      	bne.n	80017b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0d0      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d910      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f023 0207 	bic.w	r2, r3, #7
 80017ce:	4965      	ldr	r1, [pc, #404]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	4313      	orrs	r3, r2
 80017d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001806:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800180a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800181e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001822:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001832:	4313      	orrs	r3, r2
 8001834:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d040      	beq.n	80018c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d115      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d107      	bne.n	8001872 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001862:	4b41      	ldr	r3, [pc, #260]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800186a:	2b00      	cmp	r3, #0
 800186c:	d109      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e073      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001872:	4b3d      	ldr	r3, [pc, #244]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d101      	bne.n	8001882 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800187e:	2301      	movs	r3, #1
 8001880:	e06b      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001882:	4b39      	ldr	r3, [pc, #228]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f023 0203 	bic.w	r2, r3, #3
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	4936      	ldr	r1, [pc, #216]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001890:	4313      	orrs	r3, r2
 8001892:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001894:	f7ff f9cc 	bl	8000c30 <HAL_GetTick>
 8001898:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800189a:	e00a      	b.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800189c:	f7ff f9c8 	bl	8000c30 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e053      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018b2:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	f003 020c 	and.w	r2, r3, #12
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	429a      	cmp	r2, r3
 80018c2:	d1eb      	bne.n	800189c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018c4:	4b27      	ldr	r3, [pc, #156]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 0307 	and.w	r3, r3, #7
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d210      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b24      	ldr	r3, [pc, #144]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f023 0207 	bic.w	r2, r3, #7
 80018da:	4922      	ldr	r1, [pc, #136]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	4313      	orrs	r3, r2
 80018e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x1c0>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800190e:	4313      	orrs	r3, r2
 8001910:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 8001920:	685b      	ldr	r3, [r3, #4]
 8001922:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800192e:	4313      	orrs	r3, r2
 8001930:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1c4>)
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1c8>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1cc>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1d0>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f832 	bl	80009bc <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40022000 	.word	0x40022000
 8001968:	40021000 	.word	0x40021000
 800196c:	08005a48 	.word	0x08005a48
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	b480      	push	{r7}
 800197a:	b087      	sub	sp, #28
 800197c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800197e:	2300      	movs	r3, #0
 8001980:	60fb      	str	r3, [r7, #12]
 8001982:	2300      	movs	r3, #0
 8001984:	60bb      	str	r3, [r7, #8]
 8001986:	2300      	movs	r3, #0
 8001988:	617b      	str	r3, [r7, #20]
 800198a:	2300      	movs	r3, #0
 800198c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x94>)
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 030c 	and.w	r3, r3, #12
 800199e:	2b04      	cmp	r3, #4
 80019a0:	d002      	beq.n	80019a8 <HAL_RCC_GetSysClockFreq+0x30>
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d003      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x36>
 80019a6:	e027      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019a8:	4b19      	ldr	r3, [pc, #100]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x98>)
 80019aa:	613b      	str	r3, [r7, #16]
      break;
 80019ac:	e027      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	0c9b      	lsrs	r3, r3, #18
 80019b2:	f003 030f 	and.w	r3, r3, #15
 80019b6:	4a17      	ldr	r2, [pc, #92]	; (8001a14 <HAL_RCC_GetSysClockFreq+0x9c>)
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d010      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c6:	4b11      	ldr	r3, [pc, #68]	; (8001a0c <HAL_RCC_GetSysClockFreq+0x94>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	0c5b      	lsrs	r3, r3, #17
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	4a11      	ldr	r2, [pc, #68]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xa0>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a0d      	ldr	r2, [pc, #52]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x98>)
 80019da:	fb03 f202 	mul.w	r2, r3, r2
 80019de:	68bb      	ldr	r3, [r7, #8]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	e004      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xa4>)
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	613b      	str	r3, [r7, #16]
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b05      	ldr	r3, [pc, #20]	; (8001a10 <HAL_RCC_GetSysClockFreq+0x98>)
 80019fa:	613b      	str	r3, [r7, #16]
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	693b      	ldr	r3, [r7, #16]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	371c      	adds	r7, #28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	007a1200 	.word	0x007a1200
 8001a14:	08005a60 	.word	0x08005a60
 8001a18:	08005a70 	.word	0x08005a70
 8001a1c:	003d0900 	.word	0x003d0900

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000000 	.word	0x20000000

08001a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a38:	f7ff fff2 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4903      	ldr	r1, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4a:	5ccb      	ldrb	r3, [r1, r3]
 8001a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	08005a58 	.word	0x08005a58

08001a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a64:	4602      	mov	r2, r0
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0adb      	lsrs	r3, r3, #11
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4903      	ldr	r1, [pc, #12]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a72:	5ccb      	ldrb	r3, [r1, r3]
 8001a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	08005a58 	.word	0x08005a58

08001a84 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	220f      	movs	r2, #15
 8001a92:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_RCC_GetClockConfig+0x58>)
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f003 0203 	and.w	r2, r3, #3
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <HAL_RCC_GetClockConfig+0x58>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001aac:	4b0b      	ldr	r3, [pc, #44]	; (8001adc <HAL_RCC_GetClockConfig+0x58>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_RCC_GetClockConfig+0x58>)
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	08db      	lsrs	r3, r3, #3
 8001abe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001ac6:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <HAL_RCC_GetClockConfig+0x5c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f003 0207 	and.w	r2, r3, #7
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8001ad2:	bf00      	nop
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40021000 	.word	0x40021000
 8001ae0:	40022000 	.word	0x40022000

08001ae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001aec:	4b0a      	ldr	r3, [pc, #40]	; (8001b18 <RCC_Delay+0x34>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <RCC_Delay+0x38>)
 8001af2:	fba2 2303 	umull	r2, r3, r2, r3
 8001af6:	0a5b      	lsrs	r3, r3, #9
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001b00:	bf00      	nop
  }
  while (Delay --);
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	1e5a      	subs	r2, r3, #1
 8001b06:	60fa      	str	r2, [r7, #12]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d1f9      	bne.n	8001b00 <RCC_Delay+0x1c>
}
 8001b0c:	bf00      	nop
 8001b0e:	bf00      	nop
 8001b10:	3714      	adds	r7, #20
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bc80      	pop	{r7}
 8001b16:	4770      	bx	lr
 8001b18:	20000000 	.word	0x20000000
 8001b1c:	10624dd3 	.word	0x10624dd3

08001b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e041      	b.n	8001bb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d106      	bne.n	8001b4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f839 	bl	8001bbe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2202      	movs	r2, #2
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	3304      	adds	r3, #4
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4610      	mov	r0, r2
 8001b60:	f000 f9b4 	bl	8001ecc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2201      	movs	r2, #1
 8001b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3708      	adds	r7, #8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bbe:	b480      	push	{r7}
 8001bc0:	b083      	sub	sp, #12
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr

08001bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d001      	beq.n	8001be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e03a      	b.n	8001c5e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	2202      	movs	r2, #2
 8001bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f042 0201 	orr.w	r2, r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_TIM_Base_Start_IT+0x98>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d00e      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x58>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c12:	d009      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x58>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a14      	ldr	r2, [pc, #80]	; (8001c6c <HAL_TIM_Base_Start_IT+0x9c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d004      	beq.n	8001c28 <HAL_TIM_Base_Start_IT+0x58>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a13      	ldr	r2, [pc, #76]	; (8001c70 <HAL_TIM_Base_Start_IT+0xa0>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d111      	bne.n	8001c4c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 0307 	and.w	r3, r3, #7
 8001c32:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	2b06      	cmp	r3, #6
 8001c38:	d010      	beq.n	8001c5c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c4a:	e007      	b.n	8001c5c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f042 0201 	orr.w	r2, r2, #1
 8001c5a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c5c:	2300      	movs	r3, #0
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	3714      	adds	r7, #20
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr
 8001c68:	40012c00 	.word	0x40012c00
 8001c6c:	40000400 	.word	0x40000400
 8001c70:	40000800 	.word	0x40000800

08001c74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d122      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d11b      	bne.n	8001cd0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f06f 0202 	mvn.w	r2, #2
 8001ca0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	699b      	ldr	r3, [r3, #24]
 8001cae:	f003 0303 	and.w	r3, r3, #3
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d003      	beq.n	8001cbe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f000 f8ed 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001cbc:	e005      	b.n	8001cca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f000 f8e0 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cc4:	6878      	ldr	r0, [r7, #4]
 8001cc6:	f000 f8ef 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	691b      	ldr	r3, [r3, #16]
 8001cd6:	f003 0304 	and.w	r3, r3, #4
 8001cda:	2b04      	cmp	r3, #4
 8001cdc:	d122      	bne.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	f003 0304 	and.w	r3, r3, #4
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d11b      	bne.n	8001d24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f06f 0204 	mvn.w	r2, #4
 8001cf4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f8c3 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001d10:	e005      	b.n	8001d1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f000 f8b6 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d18:	6878      	ldr	r0, [r7, #4]
 8001d1a:	f000 f8c5 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0308 	and.w	r3, r3, #8
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0208 	mvn.w	r2, #8
 8001d48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f899 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f88c 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f89b 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0310 	and.w	r3, r3, #16
 8001d82:	2b10      	cmp	r3, #16
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0310 	and.w	r3, r3, #16
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0210 	mvn.w	r2, #16
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2208      	movs	r2, #8
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f86f 	bl	8001e96 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f862 	bl	8001e84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f871 	bl	8001ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b01      	cmp	r3, #1
 8001dd8:	d10e      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0201 	mvn.w	r2, #1
 8001df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f7fe fcc6 	bl	8000784 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e02:	2b80      	cmp	r3, #128	; 0x80
 8001e04:	d10e      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e10:	2b80      	cmp	r3, #128	; 0x80
 8001e12:	d107      	bne.n	8001e24 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f000 f8bf 	bl	8001fa2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2e:	2b40      	cmp	r3, #64	; 0x40
 8001e30:	d10e      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	68db      	ldr	r3, [r3, #12]
 8001e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e3c:	2b40      	cmp	r3, #64	; 0x40
 8001e3e:	d107      	bne.n	8001e50 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e4a:	6878      	ldr	r0, [r7, #4]
 8001e4c:	f000 f835 	bl	8001eba <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	691b      	ldr	r3, [r3, #16]
 8001e56:	f003 0320 	and.w	r3, r3, #32
 8001e5a:	2b20      	cmp	r3, #32
 8001e5c:	d10e      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d107      	bne.n	8001e7c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0220 	mvn.w	r2, #32
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f88a 	bl	8001f90 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3708      	adds	r7, #8
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}

08001e84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001e8c:	bf00      	nop
 8001e8e:	370c      	adds	r7, #12
 8001e90:	46bd      	mov	sp, r7
 8001e92:	bc80      	pop	{r7}
 8001e94:	4770      	bx	lr

08001e96 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001e9e:	bf00      	nop
 8001ea0:	370c      	adds	r7, #12
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bc80      	pop	{r7}
 8001ea6:	4770      	bx	lr

08001ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b083      	sub	sp, #12
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bc80      	pop	{r7}
 8001eb8:	4770      	bx	lr

08001eba <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b085      	sub	sp, #20
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	4a29      	ldr	r2, [pc, #164]	; (8001f84 <TIM_Base_SetConfig+0xb8>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d00b      	beq.n	8001efc <TIM_Base_SetConfig+0x30>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eea:	d007      	beq.n	8001efc <TIM_Base_SetConfig+0x30>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	4a26      	ldr	r2, [pc, #152]	; (8001f88 <TIM_Base_SetConfig+0xbc>)
 8001ef0:	4293      	cmp	r3, r2
 8001ef2:	d003      	beq.n	8001efc <TIM_Base_SetConfig+0x30>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a25      	ldr	r2, [pc, #148]	; (8001f8c <TIM_Base_SetConfig+0xc0>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d108      	bne.n	8001f0e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	68fa      	ldr	r2, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a1c      	ldr	r2, [pc, #112]	; (8001f84 <TIM_Base_SetConfig+0xb8>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d00b      	beq.n	8001f2e <TIM_Base_SetConfig+0x62>
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f1c:	d007      	beq.n	8001f2e <TIM_Base_SetConfig+0x62>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <TIM_Base_SetConfig+0xbc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d003      	beq.n	8001f2e <TIM_Base_SetConfig+0x62>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4a18      	ldr	r2, [pc, #96]	; (8001f8c <TIM_Base_SetConfig+0xc0>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d108      	bne.n	8001f40 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f34:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	68fa      	ldr	r2, [r7, #12]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	695b      	ldr	r3, [r3, #20]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	689a      	ldr	r2, [r3, #8]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	4a07      	ldr	r2, [pc, #28]	; (8001f84 <TIM_Base_SetConfig+0xb8>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d103      	bne.n	8001f74 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	691a      	ldr	r2, [r3, #16]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	615a      	str	r2, [r3, #20]
}
 8001f7a:	bf00      	nop
 8001f7c:	3714      	adds	r7, #20
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bc80      	pop	{r7}
 8001f82:	4770      	bx	lr
 8001f84:	40012c00 	.word	0x40012c00
 8001f88:	40000400 	.word	0x40000400
 8001f8c:	40000800 	.word	0x40000800

08001f90 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr

08001fa2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001fa2:	b480      	push	{r7}
 8001fa4:	b083      	sub	sp, #12
 8001fa6:	af00      	add	r7, sp, #0
 8001fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e042      	b.n	800204c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d106      	bne.n	8001fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f7fe fc1e 	bl	800081c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2224      	movs	r2, #36	; 0x24
 8001fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ff8:	6878      	ldr	r0, [r7, #4]
 8001ffa:	f000 fdc5 	bl	8002b88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800200c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	695a      	ldr	r2, [r3, #20]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800201c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	68da      	ldr	r2, [r3, #12]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800202c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2220      	movs	r2, #32
 8002040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800204a:	2300      	movs	r3, #0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b08a      	sub	sp, #40	; 0x28
 8002058:	af02      	add	r7, sp, #8
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	603b      	str	r3, [r7, #0]
 8002060:	4613      	mov	r3, r2
 8002062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b20      	cmp	r3, #32
 8002072:	d16d      	bne.n	8002150 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d002      	beq.n	8002080 <HAL_UART_Transmit+0x2c>
 800207a:	88fb      	ldrh	r3, [r7, #6]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e066      	b.n	8002152 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	2200      	movs	r2, #0
 8002088:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2221      	movs	r2, #33	; 0x21
 800208e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002092:	f7fe fdcd 	bl	8000c30 <HAL_GetTick>
 8002096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	88fa      	ldrh	r2, [r7, #6]
 800209c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	88fa      	ldrh	r2, [r7, #6]
 80020a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020ac:	d108      	bne.n	80020c0 <HAL_UART_Transmit+0x6c>
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d104      	bne.n	80020c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80020ba:	68bb      	ldr	r3, [r7, #8]
 80020bc:	61bb      	str	r3, [r7, #24]
 80020be:	e003      	b.n	80020c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80020c4:	2300      	movs	r3, #0
 80020c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80020c8:	e02a      	b.n	8002120 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	2200      	movs	r2, #0
 80020d2:	2180      	movs	r1, #128	; 0x80
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fb14 	bl	8002702 <UART_WaitOnFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	e036      	b.n	8002152 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10b      	bne.n	8002102 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	881b      	ldrh	r3, [r3, #0]
 80020ee:	461a      	mov	r2, r3
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80020f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	3302      	adds	r3, #2
 80020fe:	61bb      	str	r3, [r7, #24]
 8002100:	e007      	b.n	8002112 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	3301      	adds	r3, #1
 8002110:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002116:	b29b      	uxth	r3, r3
 8002118:	3b01      	subs	r3, #1
 800211a:	b29a      	uxth	r2, r3
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002124:	b29b      	uxth	r3, r3
 8002126:	2b00      	cmp	r3, #0
 8002128:	d1cf      	bne.n	80020ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	9300      	str	r3, [sp, #0]
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f000 fae4 	bl	8002702 <UART_WaitOnFlagUntilTimeout>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e006      	b.n	8002152 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2220      	movs	r2, #32
 8002148:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800214c:	2300      	movs	r3, #0
 800214e:	e000      	b.n	8002152 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002150:	2302      	movs	r3, #2
  }
}
 8002152:	4618      	mov	r0, r3
 8002154:	3720      	adds	r7, #32
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b084      	sub	sp, #16
 800215e:	af00      	add	r7, sp, #0
 8002160:	60f8      	str	r0, [r7, #12]
 8002162:	60b9      	str	r1, [r7, #8]
 8002164:	4613      	mov	r3, r2
 8002166:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800216e:	b2db      	uxtb	r3, r3
 8002170:	2b20      	cmp	r3, #32
 8002172:	d112      	bne.n	800219a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d002      	beq.n	8002180 <HAL_UART_Receive_IT+0x26>
 800217a:	88fb      	ldrh	r3, [r7, #6]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e00b      	b.n	800219c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800218a:	88fb      	ldrh	r3, [r7, #6]
 800218c:	461a      	mov	r2, r3
 800218e:	68b9      	ldr	r1, [r7, #8]
 8002190:	68f8      	ldr	r0, [r7, #12]
 8002192:	f000 fb24 	bl	80027de <UART_Start_Receive_IT>
 8002196:	4603      	mov	r3, r0
 8002198:	e000      	b.n	800219c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800219a:	2302      	movs	r3, #2
  }
}
 800219c:	4618      	mov	r0, r3
 800219e:	3710      	adds	r7, #16
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}

080021a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b0ba      	sub	sp, #232	; 0xe8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	695b      	ldr	r3, [r3, #20]
 80021c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80021ca:	2300      	movs	r3, #0
 80021cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80021d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021da:	f003 030f 	and.w	r3, r3, #15
 80021de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80021e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d10f      	bne.n	800220a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80021ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d009      	beq.n	800220a <HAL_UART_IRQHandler+0x66>
 80021f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021fa:	f003 0320 	and.w	r3, r3, #32
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f000 fc01 	bl	8002a0a <UART_Receive_IT>
      return;
 8002208:	e25b      	b.n	80026c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800220a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800220e:	2b00      	cmp	r3, #0
 8002210:	f000 80de 	beq.w	80023d0 <HAL_UART_IRQHandler+0x22c>
 8002214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d106      	bne.n	800222e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002224:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 80d1 	beq.w	80023d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800222e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00b      	beq.n	8002252 <HAL_UART_IRQHandler+0xae>
 800223a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800223e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002242:	2b00      	cmp	r3, #0
 8002244:	d005      	beq.n	8002252 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224a:	f043 0201 	orr.w	r2, r3, #1
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	d00b      	beq.n	8002276 <HAL_UART_IRQHandler+0xd2>
 800225e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002262:	f003 0301 	and.w	r3, r3, #1
 8002266:	2b00      	cmp	r3, #0
 8002268:	d005      	beq.n	8002276 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f043 0202 	orr.w	r2, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800227a:	f003 0302 	and.w	r3, r3, #2
 800227e:	2b00      	cmp	r3, #0
 8002280:	d00b      	beq.n	800229a <HAL_UART_IRQHandler+0xf6>
 8002282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	2b00      	cmp	r3, #0
 800228c:	d005      	beq.n	800229a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002292:	f043 0204 	orr.w	r2, r3, #4
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800229a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d011      	beq.n	80022ca <HAL_UART_IRQHandler+0x126>
 80022a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022aa:	f003 0320 	and.w	r3, r3, #32
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d105      	bne.n	80022be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80022b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80022b6:	f003 0301 	and.w	r3, r3, #1
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d005      	beq.n	80022ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c2:	f043 0208 	orr.w	r2, r3, #8
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	f000 81f2 	beq.w	80026b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80022d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80022d8:	f003 0320 	and.w	r3, r3, #32
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d008      	beq.n	80022f2 <HAL_UART_IRQHandler+0x14e>
 80022e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80022e4:	f003 0320 	and.w	r3, r3, #32
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d002      	beq.n	80022f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fb8c 	bl	8002a0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	bf14      	ite	ne
 8002300:	2301      	movne	r3, #1
 8002302:	2300      	moveq	r3, #0
 8002304:	b2db      	uxtb	r3, r3
 8002306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f003 0308 	and.w	r3, r3, #8
 8002312:	2b00      	cmp	r3, #0
 8002314:	d103      	bne.n	800231e <HAL_UART_IRQHandler+0x17a>
 8002316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800231a:	2b00      	cmp	r3, #0
 800231c:	d04f      	beq.n	80023be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fa96 	bl	8002850 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800232e:	2b00      	cmp	r3, #0
 8002330:	d041      	beq.n	80023b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3314      	adds	r3, #20
 8002338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002340:	e853 3f00 	ldrex	r3, [r3]
 8002344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800234c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	3314      	adds	r3, #20
 800235a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800235e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800236a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800236e:	e841 2300 	strex	r3, r2, [r1]
 8002372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1d9      	bne.n	8002332 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002382:	2b00      	cmp	r3, #0
 8002384:	d013      	beq.n	80023ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800238a:	4a7e      	ldr	r2, [pc, #504]	; (8002584 <HAL_UART_IRQHandler+0x3e0>)
 800238c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002392:	4618      	mov	r0, r3
 8002394:	f7fe fd70 	bl	8000e78 <HAL_DMA_Abort_IT>
 8002398:	4603      	mov	r3, r0
 800239a:	2b00      	cmp	r3, #0
 800239c:	d016      	beq.n	80023cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80023a8:	4610      	mov	r0, r2
 80023aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023ac:	e00e      	b.n	80023cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 f993 	bl	80026da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023b4:	e00a      	b.n	80023cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80023b6:	6878      	ldr	r0, [r7, #4]
 80023b8:	f000 f98f 	bl	80026da <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023bc:	e006      	b.n	80023cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f000 f98b 	bl	80026da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2200      	movs	r2, #0
 80023c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80023ca:	e175      	b.n	80026b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80023cc:	bf00      	nop
    return;
 80023ce:	e173      	b.n	80026b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	f040 814f 	bne.w	8002678 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80023da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80023de:	f003 0310 	and.w	r3, r3, #16
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 8148 	beq.w	8002678 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80023e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8141 	beq.w	8002678 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80023f6:	2300      	movs	r3, #0
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	60bb      	str	r3, [r7, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	60bb      	str	r3, [r7, #8]
 800240a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	695b      	ldr	r3, [r3, #20]
 8002412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	f000 80b6 	beq.w	8002588 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	685b      	ldr	r3, [r3, #4]
 8002424:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002428:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800242c:	2b00      	cmp	r3, #0
 800242e:	f000 8145 	beq.w	80026bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800243a:	429a      	cmp	r2, r3
 800243c:	f080 813e 	bcs.w	80026bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002446:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800244c:	699b      	ldr	r3, [r3, #24]
 800244e:	2b20      	cmp	r3, #32
 8002450:	f000 8088 	beq.w	8002564 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	330c      	adds	r3, #12
 800245a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800245e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002462:	e853 3f00 	ldrex	r3, [r3]
 8002466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800246a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800246e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	330c      	adds	r3, #12
 800247c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002480:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002488:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800248c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002490:	e841 2300 	strex	r3, r2, [r1]
 8002494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800249c:	2b00      	cmp	r3, #0
 800249e:	d1d9      	bne.n	8002454 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	3314      	adds	r3, #20
 80024a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80024aa:	e853 3f00 	ldrex	r3, [r3]
 80024ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80024b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80024b2:	f023 0301 	bic.w	r3, r3, #1
 80024b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	3314      	adds	r3, #20
 80024c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80024c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80024c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80024d0:	e841 2300 	strex	r3, r2, [r1]
 80024d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80024d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1e1      	bne.n	80024a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	3314      	adds	r3, #20
 80024e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024e6:	e853 3f00 	ldrex	r3, [r3]
 80024ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80024ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80024f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	3314      	adds	r3, #20
 80024fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002500:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002502:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002504:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002506:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002508:	e841 2300 	strex	r3, r2, [r1]
 800250c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800250e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002510:	2b00      	cmp	r3, #0
 8002512:	d1e3      	bne.n	80024dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2220      	movs	r2, #32
 8002518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	330c      	adds	r3, #12
 8002528:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800252a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800252c:	e853 3f00 	ldrex	r3, [r3]
 8002530:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002534:	f023 0310 	bic.w	r3, r3, #16
 8002538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	330c      	adds	r3, #12
 8002542:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002546:	65ba      	str	r2, [r7, #88]	; 0x58
 8002548:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800254a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800254c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800254e:	e841 2300 	strex	r3, r2, [r1]
 8002552:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002556:	2b00      	cmp	r3, #0
 8002558:	d1e3      	bne.n	8002522 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	4618      	mov	r0, r3
 8002560:	f7fe fc4f 	bl	8000e02 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2202      	movs	r2, #2
 8002568:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002572:	b29b      	uxth	r3, r3
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	b29b      	uxth	r3, r3
 8002578:	4619      	mov	r1, r3
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f8b6 	bl	80026ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002580:	e09c      	b.n	80026bc <HAL_UART_IRQHandler+0x518>
 8002582:	bf00      	nop
 8002584:	08002915 	.word	0x08002915
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002590:	b29b      	uxth	r3, r3
 8002592:	1ad3      	subs	r3, r2, r3
 8002594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	f000 808e 	beq.w	80026c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80025a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8089 	beq.w	80026c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	330c      	adds	r3, #12
 80025b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b8:	e853 3f00 	ldrex	r3, [r3]
 80025bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80025c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	330c      	adds	r3, #12
 80025ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80025d2:	647a      	str	r2, [r7, #68]	; 0x44
 80025d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80025d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80025da:	e841 2300 	strex	r3, r2, [r1]
 80025de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80025e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1e3      	bne.n	80025ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	3314      	adds	r3, #20
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	e853 3f00 	ldrex	r3, [r3]
 80025f4:	623b      	str	r3, [r7, #32]
   return(result);
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	f023 0301 	bic.w	r3, r3, #1
 80025fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	3314      	adds	r3, #20
 8002606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800260a:	633a      	str	r2, [r7, #48]	; 0x30
 800260c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800260e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002612:	e841 2300 	strex	r3, r2, [r1]
 8002616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261a:	2b00      	cmp	r3, #0
 800261c:	d1e3      	bne.n	80025e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	2220      	movs	r2, #32
 8002622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	330c      	adds	r3, #12
 8002632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	e853 3f00 	ldrex	r3, [r3]
 800263a:	60fb      	str	r3, [r7, #12]
   return(result);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f023 0310 	bic.w	r3, r3, #16
 8002642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	330c      	adds	r3, #12
 800264c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002650:	61fa      	str	r2, [r7, #28]
 8002652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002654:	69b9      	ldr	r1, [r7, #24]
 8002656:	69fa      	ldr	r2, [r7, #28]
 8002658:	e841 2300 	strex	r3, r2, [r1]
 800265c:	617b      	str	r3, [r7, #20]
   return(result);
 800265e:	697b      	ldr	r3, [r7, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1e3      	bne.n	800262c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2202      	movs	r2, #2
 8002668:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800266a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800266e:	4619      	mov	r1, r3
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f000 f83b 	bl	80026ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002676:	e023      	b.n	80026c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800267c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002680:	2b00      	cmp	r3, #0
 8002682:	d009      	beq.n	8002698 <HAL_UART_IRQHandler+0x4f4>
 8002684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f000 f953 	bl	800293c <UART_Transmit_IT>
    return;
 8002696:	e014      	b.n	80026c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00e      	beq.n	80026c2 <HAL_UART_IRQHandler+0x51e>
 80026a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80026a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d008      	beq.n	80026c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f000 f992 	bl	80029da <UART_EndTransmit_IT>
    return;
 80026b6:	e004      	b.n	80026c2 <HAL_UART_IRQHandler+0x51e>
    return;
 80026b8:	bf00      	nop
 80026ba:	e002      	b.n	80026c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80026bc:	bf00      	nop
 80026be:	e000      	b.n	80026c2 <HAL_UART_IRQHandler+0x51e>
      return;
 80026c0:	bf00      	nop
  }
}
 80026c2:	37e8      	adds	r7, #232	; 0xe8
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bc80      	pop	{r7}
 80026d8:	4770      	bx	lr

080026da <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80026da:	b480      	push	{r7}
 80026dc:	b083      	sub	sp, #12
 80026de:	af00      	add	r7, sp, #0
 80026e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80026e2:	bf00      	nop
 80026e4:	370c      	adds	r7, #12
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bc80      	pop	{r7}
 80026ea:	4770      	bx	lr

080026ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	460b      	mov	r3, r1
 80026f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80026f8:	bf00      	nop
 80026fa:	370c      	adds	r7, #12
 80026fc:	46bd      	mov	sp, r7
 80026fe:	bc80      	pop	{r7}
 8002700:	4770      	bx	lr

08002702 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002702:	b580      	push	{r7, lr}
 8002704:	b090      	sub	sp, #64	; 0x40
 8002706:	af00      	add	r7, sp, #0
 8002708:	60f8      	str	r0, [r7, #12]
 800270a:	60b9      	str	r1, [r7, #8]
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4613      	mov	r3, r2
 8002710:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002712:	e050      	b.n	80027b6 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d04c      	beq.n	80027b6 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800271c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271e:	2b00      	cmp	r3, #0
 8002720:	d007      	beq.n	8002732 <UART_WaitOnFlagUntilTimeout+0x30>
 8002722:	f7fe fa85 	bl	8000c30 <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800272e:	429a      	cmp	r2, r3
 8002730:	d241      	bcs.n	80027b6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	330c      	adds	r3, #12
 8002738:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800273a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800273c:	e853 3f00 	ldrex	r3, [r3]
 8002740:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002744:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	330c      	adds	r3, #12
 8002750:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002752:	637a      	str	r2, [r7, #52]	; 0x34
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002758:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800275a:	e841 2300 	strex	r3, r2, [r1]
 800275e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1e5      	bne.n	8002732 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	3314      	adds	r3, #20
 800276c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	e853 3f00 	ldrex	r3, [r3]
 8002774:	613b      	str	r3, [r7, #16]
   return(result);
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	63bb      	str	r3, [r7, #56]	; 0x38
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	3314      	adds	r3, #20
 8002784:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002786:	623a      	str	r2, [r7, #32]
 8002788:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800278a:	69f9      	ldr	r1, [r7, #28]
 800278c:	6a3a      	ldr	r2, [r7, #32]
 800278e:	e841 2300 	strex	r3, r2, [r1]
 8002792:	61bb      	str	r3, [r7, #24]
   return(result);
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1e5      	bne.n	8002766 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	2220      	movs	r2, #32
 800279e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2220      	movs	r2, #32
 80027a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2200      	movs	r2, #0
 80027ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e00f      	b.n	80027d6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	4013      	ands	r3, r2
 80027c0:	68ba      	ldr	r2, [r7, #8]
 80027c2:	429a      	cmp	r2, r3
 80027c4:	bf0c      	ite	eq
 80027c6:	2301      	moveq	r3, #1
 80027c8:	2300      	movne	r3, #0
 80027ca:	b2db      	uxtb	r3, r3
 80027cc:	461a      	mov	r2, r3
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d09f      	beq.n	8002714 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3740      	adds	r7, #64	; 0x40
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}

080027de <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80027de:	b480      	push	{r7}
 80027e0:	b085      	sub	sp, #20
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	60f8      	str	r0, [r7, #12]
 80027e6:	60b9      	str	r1, [r7, #8]
 80027e8:	4613      	mov	r3, r2
 80027ea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	68ba      	ldr	r2, [r7, #8]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	88fa      	ldrh	r2, [r7, #6]
 80027f6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	88fa      	ldrh	r2, [r7, #6]
 80027fc:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2222      	movs	r2, #34	; 0x22
 8002808:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d007      	beq.n	8002824 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68da      	ldr	r2, [r3, #12]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002822:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	695a      	ldr	r2, [r3, #20]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f042 0201 	orr.w	r2, r2, #1
 8002832:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0220 	orr.w	r2, r2, #32
 8002842:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002844:	2300      	movs	r3, #0
}
 8002846:	4618      	mov	r0, r3
 8002848:	3714      	adds	r7, #20
 800284a:	46bd      	mov	sp, r7
 800284c:	bc80      	pop	{r7}
 800284e:	4770      	bx	lr

08002850 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002850:	b480      	push	{r7}
 8002852:	b095      	sub	sp, #84	; 0x54
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	330c      	adds	r3, #12
 800285e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002862:	e853 3f00 	ldrex	r3, [r3]
 8002866:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800286a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800286e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	330c      	adds	r3, #12
 8002876:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002878:	643a      	str	r2, [r7, #64]	; 0x40
 800287a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800287c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800287e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002880:	e841 2300 	strex	r3, r2, [r1]
 8002884:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1e5      	bne.n	8002858 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3314      	adds	r3, #20
 8002892:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002894:	6a3b      	ldr	r3, [r7, #32]
 8002896:	e853 3f00 	ldrex	r3, [r3]
 800289a:	61fb      	str	r3, [r7, #28]
   return(result);
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	f023 0301 	bic.w	r3, r3, #1
 80028a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3314      	adds	r3, #20
 80028aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80028ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80028ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80028b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028b4:	e841 2300 	strex	r3, r2, [r1]
 80028b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80028ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d1e5      	bne.n	800288c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	2b01      	cmp	r3, #1
 80028c6:	d119      	bne.n	80028fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	330c      	adds	r3, #12
 80028ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	e853 3f00 	ldrex	r3, [r3]
 80028d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	f023 0310 	bic.w	r3, r3, #16
 80028de:	647b      	str	r3, [r7, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	330c      	adds	r3, #12
 80028e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80028e8:	61ba      	str	r2, [r7, #24]
 80028ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028ec:	6979      	ldr	r1, [r7, #20]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	e841 2300 	strex	r3, r2, [r1]
 80028f4:	613b      	str	r3, [r7, #16]
   return(result);
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d1e5      	bne.n	80028c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2220      	movs	r2, #32
 8002900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2200      	movs	r2, #0
 8002908:	631a      	str	r2, [r3, #48]	; 0x30
}
 800290a:	bf00      	nop
 800290c:	3754      	adds	r7, #84	; 0x54
 800290e:	46bd      	mov	sp, r7
 8002910:	bc80      	pop	{r7}
 8002912:	4770      	bx	lr

08002914 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2200      	movs	r2, #0
 8002926:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	2200      	movs	r2, #0
 800292c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800292e:	68f8      	ldr	r0, [r7, #12]
 8002930:	f7ff fed3 	bl	80026da <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002934:	bf00      	nop
 8002936:	3710      	adds	r7, #16
 8002938:	46bd      	mov	sp, r7
 800293a:	bd80      	pop	{r7, pc}

0800293c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800293c:	b480      	push	{r7}
 800293e:	b085      	sub	sp, #20
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800294a:	b2db      	uxtb	r3, r3
 800294c:	2b21      	cmp	r3, #33	; 0x21
 800294e:	d13e      	bne.n	80029ce <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002958:	d114      	bne.n	8002984 <UART_Transmit_IT+0x48>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	691b      	ldr	r3, [r3, #16]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d110      	bne.n	8002984 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a1b      	ldr	r3, [r3, #32]
 8002966:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	881b      	ldrh	r3, [r3, #0]
 800296c:	461a      	mov	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002976:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a1b      	ldr	r3, [r3, #32]
 800297c:	1c9a      	adds	r2, r3, #2
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	621a      	str	r2, [r3, #32]
 8002982:	e008      	b.n	8002996 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a1b      	ldr	r3, [r3, #32]
 8002988:	1c59      	adds	r1, r3, #1
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	6211      	str	r1, [r2, #32]
 800298e:	781a      	ldrb	r2, [r3, #0]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800299a:	b29b      	uxth	r3, r3
 800299c:	3b01      	subs	r3, #1
 800299e:	b29b      	uxth	r3, r3
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	4619      	mov	r1, r3
 80029a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80029b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80029ca:	2300      	movs	r3, #0
 80029cc:	e000      	b.n	80029d0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80029ce:	2302      	movs	r3, #2
  }
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3714      	adds	r7, #20
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	68da      	ldr	r2, [r3, #12]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80029f0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2220      	movs	r2, #32
 80029f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fe64 	bl	80026c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002a00:	2300      	movs	r3, #0
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}

08002a0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002a0a:	b580      	push	{r7, lr}
 8002a0c:	b08c      	sub	sp, #48	; 0x30
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002a18:	b2db      	uxtb	r3, r3
 8002a1a:	2b22      	cmp	r3, #34	; 0x22
 8002a1c:	f040 80ae 	bne.w	8002b7c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a28:	d117      	bne.n	8002a5a <UART_Receive_IT+0x50>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d113      	bne.n	8002a5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002a32:	2300      	movs	r3, #0
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a48:	b29a      	uxth	r2, r3
 8002a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	629a      	str	r2, [r3, #40]	; 0x28
 8002a58:	e026      	b.n	8002aa8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a6c:	d007      	beq.n	8002a7e <UART_Receive_IT+0x74>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10a      	bne.n	8002a8c <UART_Receive_IT+0x82>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d106      	bne.n	8002a8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	b2da      	uxtb	r2, r3
 8002a86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e008      	b.n	8002a9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a98:	b2da      	uxtb	r2, r3
 8002a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	687a      	ldr	r2, [r7, #4]
 8002ab4:	4619      	mov	r1, r3
 8002ab6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d15d      	bne.n	8002b78 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 0220 	bic.w	r2, r2, #32
 8002aca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ada:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	695a      	ldr	r2, [r3, #20]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0201 	bic.w	r2, r2, #1
 8002aea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2220      	movs	r2, #32
 8002af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d135      	bne.n	8002b6e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	330c      	adds	r3, #12
 8002b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	e853 3f00 	ldrex	r3, [r3]
 8002b16:	613b      	str	r3, [r7, #16]
   return(result);
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	f023 0310 	bic.w	r3, r3, #16
 8002b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	330c      	adds	r3, #12
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	623a      	str	r2, [r7, #32]
 8002b2a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2c:	69f9      	ldr	r1, [r7, #28]
 8002b2e:	6a3a      	ldr	r2, [r7, #32]
 8002b30:	e841 2300 	strex	r3, r2, [r1]
 8002b34:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d1e5      	bne.n	8002b08 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0310 	and.w	r3, r3, #16
 8002b46:	2b10      	cmp	r3, #16
 8002b48:	d10a      	bne.n	8002b60 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	60fb      	str	r3, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002b64:	4619      	mov	r1, r3
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff fdc0 	bl	80026ec <HAL_UARTEx_RxEventCallback>
 8002b6c:	e002      	b.n	8002b74 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7fd fd04 	bl	800057c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002b74:	2300      	movs	r3, #0
 8002b76:	e002      	b.n	8002b7e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	e000      	b.n	8002b7e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002b7c:	2302      	movs	r3, #2
  }
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3730      	adds	r7, #48	; 0x30
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	691b      	ldr	r3, [r3, #16]
 8002b96:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	68da      	ldr	r2, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	430a      	orrs	r2, r1
 8002ba4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689a      	ldr	r2, [r3, #8]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	691b      	ldr	r3, [r3, #16]
 8002bae:	431a      	orrs	r2, r3
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68db      	ldr	r3, [r3, #12]
 8002bbe:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002bc2:	f023 030c 	bic.w	r3, r3, #12
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	68b9      	ldr	r1, [r7, #8]
 8002bcc:	430b      	orrs	r3, r1
 8002bce:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	699a      	ldr	r2, [r3, #24]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2c      	ldr	r2, [pc, #176]	; (8002c9c <UART_SetConfig+0x114>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d103      	bne.n	8002bf8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002bf0:	f7fe ff34 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
 8002bf4:	60f8      	str	r0, [r7, #12]
 8002bf6:	e002      	b.n	8002bfe <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002bf8:	f7fe ff1c 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
 8002bfc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002bfe:	68fa      	ldr	r2, [r7, #12]
 8002c00:	4613      	mov	r3, r2
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	4413      	add	r3, r2
 8002c06:	009a      	lsls	r2, r3, #2
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c14:	4a22      	ldr	r2, [pc, #136]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c16:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1a:	095b      	lsrs	r3, r3, #5
 8002c1c:	0119      	lsls	r1, r3, #4
 8002c1e:	68fa      	ldr	r2, [r7, #12]
 8002c20:	4613      	mov	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4413      	add	r3, r2
 8002c26:	009a      	lsls	r2, r3, #2
 8002c28:	441a      	add	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c34:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c36:	fba3 0302 	umull	r0, r3, r3, r2
 8002c3a:	095b      	lsrs	r3, r3, #5
 8002c3c:	2064      	movs	r0, #100	; 0x64
 8002c3e:	fb00 f303 	mul.w	r3, r0, r3
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	3332      	adds	r3, #50	; 0x32
 8002c48:	4a15      	ldr	r2, [pc, #84]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002c54:	4419      	add	r1, r3
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	009b      	lsls	r3, r3, #2
 8002c5c:	4413      	add	r3, r2
 8002c5e:	009a      	lsls	r2, r3, #2
 8002c60:	441a      	add	r2, r3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c6e:	fba3 0302 	umull	r0, r3, r3, r2
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2064      	movs	r0, #100	; 0x64
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	011b      	lsls	r3, r3, #4
 8002c7e:	3332      	adds	r3, #50	; 0x32
 8002c80:	4a07      	ldr	r2, [pc, #28]	; (8002ca0 <UART_SetConfig+0x118>)
 8002c82:	fba2 2303 	umull	r2, r3, r2, r3
 8002c86:	095b      	lsrs	r3, r3, #5
 8002c88:	f003 020f 	and.w	r2, r3, #15
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	440a      	add	r2, r1
 8002c92:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002c94:	bf00      	nop
 8002c96:	3710      	adds	r7, #16
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	40013800 	.word	0x40013800
 8002ca0:	51eb851f 	.word	0x51eb851f

08002ca4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8002ca8:	f000 ffc4 	bl	8003c34 <vTaskStartScheduler>
  
  return osOK;
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	f103 0208 	add.w	r2, r3, #8
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	f04f 32ff 	mov.w	r2, #4294967295
 8002cca:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f103 0208 	add.w	r2, r3, #8
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f103 0208 	add.w	r2, r3, #8
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002ce6:	bf00      	nop
 8002ce8:	370c      	adds	r7, #12
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bc80      	pop	{r7}
 8002cee:	4770      	bx	lr

08002cf0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002cf0:	b480      	push	{r7}
 8002cf2:	b083      	sub	sp, #12
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bc80      	pop	{r7}
 8002d06:	4770      	bx	lr

08002d08 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
 8002d10:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	68fa      	ldr	r2, [r7, #12]
 8002d1c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	689a      	ldr	r2, [r3, #8]
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	683a      	ldr	r2, [r7, #0]
 8002d32:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	1c5a      	adds	r2, r3, #1
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	601a      	str	r2, [r3, #0]
}
 8002d44:	bf00      	nop
 8002d46:	3714      	adds	r7, #20
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bc80      	pop	{r7}
 8002d4c:	4770      	bx	lr

08002d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002d4e:	b480      	push	{r7}
 8002d50:	b085      	sub	sp, #20
 8002d52:	af00      	add	r7, sp, #0
 8002d54:	6078      	str	r0, [r7, #4]
 8002d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d64:	d103      	bne.n	8002d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	60fb      	str	r3, [r7, #12]
 8002d6c:	e00c      	b.n	8002d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	3308      	adds	r3, #8
 8002d72:	60fb      	str	r3, [r7, #12]
 8002d74:	e002      	b.n	8002d7c <vListInsert+0x2e>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	60fb      	str	r3, [r7, #12]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	429a      	cmp	r2, r3
 8002d86:	d2f6      	bcs.n	8002d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685b      	ldr	r3, [r3, #4]
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	68fa      	ldr	r2, [r7, #12]
 8002d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	601a      	str	r2, [r3, #0]
}
 8002db4:	bf00      	nop
 8002db6:	3714      	adds	r7, #20
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bc80      	pop	{r7}
 8002dbc:	4770      	bx	lr

08002dbe <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b085      	sub	sp, #20
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	6892      	ldr	r2, [r2, #8]
 8002dd4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	687a      	ldr	r2, [r7, #4]
 8002ddc:	6852      	ldr	r2, [r2, #4]
 8002dde:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d103      	bne.n	8002df2 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689a      	ldr	r2, [r3, #8]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2200      	movs	r2, #0
 8002df6:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	1e5a      	subs	r2, r3, #1
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3714      	adds	r7, #20
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bc80      	pop	{r7}
 8002e0e:	4770      	bx	lr

08002e10 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d10a      	bne.n	8002e3a <xQueueGenericReset+0x2a>
	__asm volatile
 8002e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e28:	f383 8811 	msr	BASEPRI, r3
 8002e2c:	f3bf 8f6f 	isb	sy
 8002e30:	f3bf 8f4f 	dsb	sy
 8002e34:	60bb      	str	r3, [r7, #8]
}
 8002e36:	bf00      	nop
 8002e38:	e7fe      	b.n	8002e38 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002e3a:	f001 fe37 	bl	8004aac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e46:	68f9      	ldr	r1, [r7, #12]
 8002e48:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e4a:	fb01 f303 	mul.w	r3, r1, r3
 8002e4e:	441a      	add	r2, r3
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681a      	ldr	r2, [r3, #0]
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	68f9      	ldr	r1, [r7, #12]
 8002e6e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002e70:	fb01 f303 	mul.w	r3, r1, r3
 8002e74:	441a      	add	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	22ff      	movs	r2, #255	; 0xff
 8002e7e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	22ff      	movs	r2, #255	; 0xff
 8002e86:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d114      	bne.n	8002eba <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	691b      	ldr	r3, [r3, #16]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d01a      	beq.n	8002ece <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	3310      	adds	r3, #16
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f001 f90f 	bl	80040c0 <xTaskRemoveFromEventList>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d012      	beq.n	8002ece <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002ea8:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <xQueueGenericReset+0xcc>)
 8002eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eae:	601a      	str	r2, [r3, #0]
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	f3bf 8f6f 	isb	sy
 8002eb8:	e009      	b.n	8002ece <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	3310      	adds	r3, #16
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	f7ff fef7 	bl	8002cb2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	3324      	adds	r3, #36	; 0x24
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7ff fef2 	bl	8002cb2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002ece:	f001 fe1d 	bl	8004b0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3710      	adds	r7, #16
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bd80      	pop	{r7, pc}
 8002edc:	e000ed04 	.word	0xe000ed04

08002ee0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b08a      	sub	sp, #40	; 0x28
 8002ee4:	af02      	add	r7, sp, #8
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d10a      	bne.n	8002f0a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef8:	f383 8811 	msr	BASEPRI, r3
 8002efc:	f3bf 8f6f 	isb	sy
 8002f00:	f3bf 8f4f 	dsb	sy
 8002f04:	613b      	str	r3, [r7, #16]
}
 8002f06:	bf00      	nop
 8002f08:	e7fe      	b.n	8002f08 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d102      	bne.n	8002f16 <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61fb      	str	r3, [r7, #28]
 8002f14:	e004      	b.n	8002f20 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	68ba      	ldr	r2, [r7, #8]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	3348      	adds	r3, #72	; 0x48
 8002f24:	4618      	mov	r0, r3
 8002f26:	f001 fec1 	bl	8004cac <pvPortMalloc>
 8002f2a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d00f      	beq.n	8002f52 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	3348      	adds	r3, #72	; 0x48
 8002f36:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002f40:	79fa      	ldrb	r2, [r7, #7]
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	9300      	str	r3, [sp, #0]
 8002f46:	4613      	mov	r3, r2
 8002f48:	697a      	ldr	r2, [r7, #20]
 8002f4a:	68b9      	ldr	r1, [r7, #8]
 8002f4c:	68f8      	ldr	r0, [r7, #12]
 8002f4e:	f000 f805 	bl	8002f5c <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002f52:	69bb      	ldr	r3, [r7, #24]
	}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b084      	sub	sp, #16
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	60f8      	str	r0, [r7, #12]
 8002f64:	60b9      	str	r1, [r7, #8]
 8002f66:	607a      	str	r2, [r7, #4]
 8002f68:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d103      	bne.n	8002f78 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	69ba      	ldr	r2, [r7, #24]
 8002f74:	601a      	str	r2, [r3, #0]
 8002f76:	e002      	b.n	8002f7e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	68fa      	ldr	r2, [r7, #12]
 8002f82:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	68ba      	ldr	r2, [r7, #8]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	69b8      	ldr	r0, [r7, #24]
 8002f8e:	f7ff ff3f 	bl	8002e10 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002f92:	bf00      	nop
 8002f94:	3710      	adds	r7, #16
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08e      	sub	sp, #56	; 0x38
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	60b9      	str	r1, [r7, #8]
 8002fa6:	607a      	str	r2, [r7, #4]
 8002fa8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002faa:	2300      	movs	r3, #0
 8002fac:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d10a      	bne.n	8002fce <xQueueGenericSend+0x32>
	__asm volatile
 8002fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbc:	f383 8811 	msr	BASEPRI, r3
 8002fc0:	f3bf 8f6f 	isb	sy
 8002fc4:	f3bf 8f4f 	dsb	sy
 8002fc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002fca:	bf00      	nop
 8002fcc:	e7fe      	b.n	8002fcc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d103      	bne.n	8002fdc <xQueueGenericSend+0x40>
 8002fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d101      	bne.n	8002fe0 <xQueueGenericSend+0x44>
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e000      	b.n	8002fe2 <xQueueGenericSend+0x46>
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <xQueueGenericSend+0x60>
	__asm volatile
 8002fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fea:	f383 8811 	msr	BASEPRI, r3
 8002fee:	f3bf 8f6f 	isb	sy
 8002ff2:	f3bf 8f4f 	dsb	sy
 8002ff6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002ff8:	bf00      	nop
 8002ffa:	e7fe      	b.n	8002ffa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	2b02      	cmp	r3, #2
 8003000:	d103      	bne.n	800300a <xQueueGenericSend+0x6e>
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <xQueueGenericSend+0x72>
 800300a:	2301      	movs	r3, #1
 800300c:	e000      	b.n	8003010 <xQueueGenericSend+0x74>
 800300e:	2300      	movs	r3, #0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d10a      	bne.n	800302a <xQueueGenericSend+0x8e>
	__asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	623b      	str	r3, [r7, #32]
}
 8003026:	bf00      	nop
 8003028:	e7fe      	b.n	8003028 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800302a:	f001 fa09 	bl	8004440 <xTaskGetSchedulerState>
 800302e:	4603      	mov	r3, r0
 8003030:	2b00      	cmp	r3, #0
 8003032:	d102      	bne.n	800303a <xQueueGenericSend+0x9e>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d101      	bne.n	800303e <xQueueGenericSend+0xa2>
 800303a:	2301      	movs	r3, #1
 800303c:	e000      	b.n	8003040 <xQueueGenericSend+0xa4>
 800303e:	2300      	movs	r3, #0
 8003040:	2b00      	cmp	r3, #0
 8003042:	d10a      	bne.n	800305a <xQueueGenericSend+0xbe>
	__asm volatile
 8003044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003048:	f383 8811 	msr	BASEPRI, r3
 800304c:	f3bf 8f6f 	isb	sy
 8003050:	f3bf 8f4f 	dsb	sy
 8003054:	61fb      	str	r3, [r7, #28]
}
 8003056:	bf00      	nop
 8003058:	e7fe      	b.n	8003058 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800305a:	f001 fd27 	bl	8004aac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800305e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003060:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003064:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003066:	429a      	cmp	r2, r3
 8003068:	d302      	bcc.n	8003070 <xQueueGenericSend+0xd4>
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b02      	cmp	r3, #2
 800306e:	d129      	bne.n	80030c4 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003070:	683a      	ldr	r2, [r7, #0]
 8003072:	68b9      	ldr	r1, [r7, #8]
 8003074:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003076:	f000 fb43 	bl	8003700 <prvCopyDataToQueue>
 800307a:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800307c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	2b00      	cmp	r3, #0
 8003082:	d010      	beq.n	80030a6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003086:	3324      	adds	r3, #36	; 0x24
 8003088:	4618      	mov	r0, r3
 800308a:	f001 f819 	bl	80040c0 <xTaskRemoveFromEventList>
 800308e:	4603      	mov	r3, r0
 8003090:	2b00      	cmp	r3, #0
 8003092:	d013      	beq.n	80030bc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003094:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <xQueueGenericSend+0x1f8>)
 8003096:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	f3bf 8f4f 	dsb	sy
 80030a0:	f3bf 8f6f 	isb	sy
 80030a4:	e00a      	b.n	80030bc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80030a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d007      	beq.n	80030bc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80030ac:	4b39      	ldr	r3, [pc, #228]	; (8003194 <xQueueGenericSend+0x1f8>)
 80030ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80030b2:	601a      	str	r2, [r3, #0]
 80030b4:	f3bf 8f4f 	dsb	sy
 80030b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80030bc:	f001 fd26 	bl	8004b0c <vPortExitCritical>
				return pdPASS;
 80030c0:	2301      	movs	r3, #1
 80030c2:	e063      	b.n	800318c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d103      	bne.n	80030d2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80030ca:	f001 fd1f 	bl	8004b0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	e05c      	b.n	800318c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80030d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d106      	bne.n	80030e6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	4618      	mov	r0, r3
 80030de:	f001 f851 	bl	8004184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80030e2:	2301      	movs	r3, #1
 80030e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80030e6:	f001 fd11 	bl	8004b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80030ea:	f000 fe03 	bl	8003cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80030ee:	f001 fcdd 	bl	8004aac <vPortEnterCritical>
 80030f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030f8:	b25b      	sxtb	r3, r3
 80030fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030fe:	d103      	bne.n	8003108 <xQueueGenericSend+0x16c>
 8003100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003102:	2200      	movs	r2, #0
 8003104:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800310e:	b25b      	sxtb	r3, r3
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d103      	bne.n	800311e <xQueueGenericSend+0x182>
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800311e:	f001 fcf5 	bl	8004b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003122:	1d3a      	adds	r2, r7, #4
 8003124:	f107 0314 	add.w	r3, r7, #20
 8003128:	4611      	mov	r1, r2
 800312a:	4618      	mov	r0, r3
 800312c:	f001 f840 	bl	80041b0 <xTaskCheckForTimeOut>
 8003130:	4603      	mov	r3, r0
 8003132:	2b00      	cmp	r3, #0
 8003134:	d124      	bne.n	8003180 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003136:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003138:	f000 fbda 	bl	80038f0 <prvIsQueueFull>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d018      	beq.n	8003174 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003144:	3310      	adds	r3, #16
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	4611      	mov	r1, r2
 800314a:	4618      	mov	r0, r3
 800314c:	f000 ff94 	bl	8004078 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003150:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003152:	f000 fb65 	bl	8003820 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003156:	f000 fddb 	bl	8003d10 <xTaskResumeAll>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	f47f af7c 	bne.w	800305a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003162:	4b0c      	ldr	r3, [pc, #48]	; (8003194 <xQueueGenericSend+0x1f8>)
 8003164:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003168:	601a      	str	r2, [r3, #0]
 800316a:	f3bf 8f4f 	dsb	sy
 800316e:	f3bf 8f6f 	isb	sy
 8003172:	e772      	b.n	800305a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003174:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003176:	f000 fb53 	bl	8003820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800317a:	f000 fdc9 	bl	8003d10 <xTaskResumeAll>
 800317e:	e76c      	b.n	800305a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003180:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003182:	f000 fb4d 	bl	8003820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003186:	f000 fdc3 	bl	8003d10 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800318a:	2300      	movs	r3, #0
		}
	}
}
 800318c:	4618      	mov	r0, r3
 800318e:	3738      	adds	r7, #56	; 0x38
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	e000ed04 	.word	0xe000ed04

08003198 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08e      	sub	sp, #56	; 0x38
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80031a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d10a      	bne.n	80031c2 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80031ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031b0:	f383 8811 	msr	BASEPRI, r3
 80031b4:	f3bf 8f6f 	isb	sy
 80031b8:	f3bf 8f4f 	dsb	sy
 80031bc:	623b      	str	r3, [r7, #32]
}
 80031be:	bf00      	nop
 80031c0:	e7fe      	b.n	80031c0 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80031c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d00a      	beq.n	80031e0 <xQueueGiveFromISR+0x48>
	__asm volatile
 80031ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ce:	f383 8811 	msr	BASEPRI, r3
 80031d2:	f3bf 8f6f 	isb	sy
 80031d6:	f3bf 8f4f 	dsb	sy
 80031da:	61fb      	str	r3, [r7, #28]
}
 80031dc:	bf00      	nop
 80031de:	e7fe      	b.n	80031de <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 80031e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d103      	bne.n	80031f0 <xQueueGiveFromISR+0x58>
 80031e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <xQueueGiveFromISR+0x5c>
 80031f0:	2301      	movs	r3, #1
 80031f2:	e000      	b.n	80031f6 <xQueueGiveFromISR+0x5e>
 80031f4:	2300      	movs	r3, #0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10a      	bne.n	8003210 <xQueueGiveFromISR+0x78>
	__asm volatile
 80031fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031fe:	f383 8811 	msr	BASEPRI, r3
 8003202:	f3bf 8f6f 	isb	sy
 8003206:	f3bf 8f4f 	dsb	sy
 800320a:	61bb      	str	r3, [r7, #24]
}
 800320c:	bf00      	nop
 800320e:	e7fe      	b.n	800320e <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003210:	f001 fd0e 	bl	8004c30 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003214:	f3ef 8211 	mrs	r2, BASEPRI
 8003218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800321c:	f383 8811 	msr	BASEPRI, r3
 8003220:	f3bf 8f6f 	isb	sy
 8003224:	f3bf 8f4f 	dsb	sy
 8003228:	617a      	str	r2, [r7, #20]
 800322a:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800322c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800322e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003234:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800323a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800323c:	429a      	cmp	r2, r3
 800323e:	d22b      	bcs.n	8003298 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003242:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800324a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324c:	1c5a      	adds	r2, r3, #1
 800324e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003250:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003252:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003256:	f1b3 3fff 	cmp.w	r3, #4294967295
 800325a:	d112      	bne.n	8003282 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800325c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800325e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003260:	2b00      	cmp	r3, #0
 8003262:	d016      	beq.n	8003292 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003266:	3324      	adds	r3, #36	; 0x24
 8003268:	4618      	mov	r0, r3
 800326a:	f000 ff29 	bl	80040c0 <xTaskRemoveFromEventList>
 800326e:	4603      	mov	r3, r0
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00e      	beq.n	8003292 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00b      	beq.n	8003292 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2201      	movs	r2, #1
 800327e:	601a      	str	r2, [r3, #0]
 8003280:	e007      	b.n	8003292 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003282:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003286:	3301      	adds	r3, #1
 8003288:	b2db      	uxtb	r3, r3
 800328a:	b25a      	sxtb	r2, r3
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003292:	2301      	movs	r3, #1
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
 8003296:	e001      	b.n	800329c <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003298:	2300      	movs	r3, #0
 800329a:	637b      	str	r3, [r7, #52]	; 0x34
 800329c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329e:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80032a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80032a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3738      	adds	r7, #56	; 0x38
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
	...

080032b4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80032b4:	b580      	push	{r7, lr}
 80032b6:	b08c      	sub	sp, #48	; 0x30
 80032b8:	af00      	add	r7, sp, #0
 80032ba:	60f8      	str	r0, [r7, #12]
 80032bc:	60b9      	str	r1, [r7, #8]
 80032be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80032c0:	2300      	movs	r3, #0
 80032c2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80032c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d10a      	bne.n	80032e4 <xQueueReceive+0x30>
	__asm volatile
 80032ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d2:	f383 8811 	msr	BASEPRI, r3
 80032d6:	f3bf 8f6f 	isb	sy
 80032da:	f3bf 8f4f 	dsb	sy
 80032de:	623b      	str	r3, [r7, #32]
}
 80032e0:	bf00      	nop
 80032e2:	e7fe      	b.n	80032e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d103      	bne.n	80032f2 <xQueueReceive+0x3e>
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <xQueueReceive+0x42>
 80032f2:	2301      	movs	r3, #1
 80032f4:	e000      	b.n	80032f8 <xQueueReceive+0x44>
 80032f6:	2300      	movs	r3, #0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <xQueueReceive+0x5e>
	__asm volatile
 80032fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003300:	f383 8811 	msr	BASEPRI, r3
 8003304:	f3bf 8f6f 	isb	sy
 8003308:	f3bf 8f4f 	dsb	sy
 800330c:	61fb      	str	r3, [r7, #28]
}
 800330e:	bf00      	nop
 8003310:	e7fe      	b.n	8003310 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003312:	f001 f895 	bl	8004440 <xTaskGetSchedulerState>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d102      	bne.n	8003322 <xQueueReceive+0x6e>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d101      	bne.n	8003326 <xQueueReceive+0x72>
 8003322:	2301      	movs	r3, #1
 8003324:	e000      	b.n	8003328 <xQueueReceive+0x74>
 8003326:	2300      	movs	r3, #0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d10a      	bne.n	8003342 <xQueueReceive+0x8e>
	__asm volatile
 800332c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003330:	f383 8811 	msr	BASEPRI, r3
 8003334:	f3bf 8f6f 	isb	sy
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	61bb      	str	r3, [r7, #24]
}
 800333e:	bf00      	nop
 8003340:	e7fe      	b.n	8003340 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003342:	f001 fbb3 	bl	8004aac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800334a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800334c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334e:	2b00      	cmp	r3, #0
 8003350:	d01f      	beq.n	8003392 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003352:	68b9      	ldr	r1, [r7, #8]
 8003354:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003356:	f000 fa3d 	bl	80037d4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800335c:	1e5a      	subs	r2, r3, #1
 800335e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003360:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00f      	beq.n	800338a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800336a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336c:	3310      	adds	r3, #16
 800336e:	4618      	mov	r0, r3
 8003370:	f000 fea6 	bl	80040c0 <xTaskRemoveFromEventList>
 8003374:	4603      	mov	r3, r0
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800337a:	4b3d      	ldr	r3, [pc, #244]	; (8003470 <xQueueReceive+0x1bc>)
 800337c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003380:	601a      	str	r2, [r3, #0]
 8003382:	f3bf 8f4f 	dsb	sy
 8003386:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800338a:	f001 fbbf 	bl	8004b0c <vPortExitCritical>
				return pdPASS;
 800338e:	2301      	movs	r3, #1
 8003390:	e069      	b.n	8003466 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2b00      	cmp	r3, #0
 8003396:	d103      	bne.n	80033a0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003398:	f001 fbb8 	bl	8004b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800339c:	2300      	movs	r3, #0
 800339e:	e062      	b.n	8003466 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80033a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d106      	bne.n	80033b4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80033a6:	f107 0310 	add.w	r3, r7, #16
 80033aa:	4618      	mov	r0, r3
 80033ac:	f000 feea 	bl	8004184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80033b0:	2301      	movs	r3, #1
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80033b4:	f001 fbaa 	bl	8004b0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80033b8:	f000 fc9c 	bl	8003cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80033bc:	f001 fb76 	bl	8004aac <vPortEnterCritical>
 80033c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80033c6:	b25b      	sxtb	r3, r3
 80033c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033cc:	d103      	bne.n	80033d6 <xQueueReceive+0x122>
 80033ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80033dc:	b25b      	sxtb	r3, r3
 80033de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033e2:	d103      	bne.n	80033ec <xQueueReceive+0x138>
 80033e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e6:	2200      	movs	r2, #0
 80033e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033ec:	f001 fb8e 	bl	8004b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80033f0:	1d3a      	adds	r2, r7, #4
 80033f2:	f107 0310 	add.w	r3, r7, #16
 80033f6:	4611      	mov	r1, r2
 80033f8:	4618      	mov	r0, r3
 80033fa:	f000 fed9 	bl	80041b0 <xTaskCheckForTimeOut>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	d123      	bne.n	800344c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003404:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003406:	f000 fa5d 	bl	80038c4 <prvIsQueueEmpty>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	d017      	beq.n	8003440 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003412:	3324      	adds	r3, #36	; 0x24
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	4611      	mov	r1, r2
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fe2d 	bl	8004078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800341e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003420:	f000 f9fe 	bl	8003820 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003424:	f000 fc74 	bl	8003d10 <xTaskResumeAll>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d189      	bne.n	8003342 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800342e:	4b10      	ldr	r3, [pc, #64]	; (8003470 <xQueueReceive+0x1bc>)
 8003430:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003434:	601a      	str	r2, [r3, #0]
 8003436:	f3bf 8f4f 	dsb	sy
 800343a:	f3bf 8f6f 	isb	sy
 800343e:	e780      	b.n	8003342 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003440:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003442:	f000 f9ed 	bl	8003820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003446:	f000 fc63 	bl	8003d10 <xTaskResumeAll>
 800344a:	e77a      	b.n	8003342 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800344c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800344e:	f000 f9e7 	bl	8003820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003452:	f000 fc5d 	bl	8003d10 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003456:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003458:	f000 fa34 	bl	80038c4 <prvIsQueueEmpty>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	f43f af6f 	beq.w	8003342 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003464:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003466:	4618      	mov	r0, r3
 8003468:	3730      	adds	r7, #48	; 0x30
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	e000ed04 	.word	0xe000ed04

08003474 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	; 0x38
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800347e:	2300      	movs	r3, #0
 8003480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800348a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800348c:	2b00      	cmp	r3, #0
 800348e:	d10a      	bne.n	80034a6 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8003490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003494:	f383 8811 	msr	BASEPRI, r3
 8003498:	f3bf 8f6f 	isb	sy
 800349c:	f3bf 8f4f 	dsb	sy
 80034a0:	623b      	str	r3, [r7, #32]
}
 80034a2:	bf00      	nop
 80034a4:	e7fe      	b.n	80034a4 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80034a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d00a      	beq.n	80034c4 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80034ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034b2:	f383 8811 	msr	BASEPRI, r3
 80034b6:	f3bf 8f6f 	isb	sy
 80034ba:	f3bf 8f4f 	dsb	sy
 80034be:	61fb      	str	r3, [r7, #28]
}
 80034c0:	bf00      	nop
 80034c2:	e7fe      	b.n	80034c2 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80034c4:	f000 ffbc 	bl	8004440 <xTaskGetSchedulerState>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d102      	bne.n	80034d4 <xQueueSemaphoreTake+0x60>
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d101      	bne.n	80034d8 <xQueueSemaphoreTake+0x64>
 80034d4:	2301      	movs	r3, #1
 80034d6:	e000      	b.n	80034da <xQueueSemaphoreTake+0x66>
 80034d8:	2300      	movs	r3, #0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d10a      	bne.n	80034f4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80034de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034e2:	f383 8811 	msr	BASEPRI, r3
 80034e6:	f3bf 8f6f 	isb	sy
 80034ea:	f3bf 8f4f 	dsb	sy
 80034ee:	61bb      	str	r3, [r7, #24]
}
 80034f0:	bf00      	nop
 80034f2:	e7fe      	b.n	80034f2 <xQueueSemaphoreTake+0x7e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80034f4:	f001 fada 	bl	8004aac <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80034f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034fc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80034fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003500:	2b00      	cmp	r3, #0
 8003502:	d024      	beq.n	800354e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003506:	1e5a      	subs	r2, r3, #1
 8003508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800350c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d104      	bne.n	800351e <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8003514:	f001 f95e 	bl	80047d4 <pvTaskIncrementMutexHeldCount>
 8003518:	4602      	mov	r2, r0
 800351a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800351c:	605a      	str	r2, [r3, #4]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800351e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003520:	691b      	ldr	r3, [r3, #16]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00f      	beq.n	8003546 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003528:	3310      	adds	r3, #16
 800352a:	4618      	mov	r0, r3
 800352c:	f000 fdc8 	bl	80040c0 <xTaskRemoveFromEventList>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003536:	4b54      	ldr	r3, [pc, #336]	; (8003688 <xQueueSemaphoreTake+0x214>)
 8003538:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800353c:	601a      	str	r2, [r3, #0]
 800353e:	f3bf 8f4f 	dsb	sy
 8003542:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003546:	f001 fae1 	bl	8004b0c <vPortExitCritical>
				return pdPASS;
 800354a:	2301      	movs	r3, #1
 800354c:	e097      	b.n	800367e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d111      	bne.n	8003578 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800355a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355e:	f383 8811 	msr	BASEPRI, r3
 8003562:	f3bf 8f6f 	isb	sy
 8003566:	f3bf 8f4f 	dsb	sy
 800356a:	617b      	str	r3, [r7, #20]
}
 800356c:	bf00      	nop
 800356e:	e7fe      	b.n	800356e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003570:	f001 facc 	bl	8004b0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003574:	2300      	movs	r3, #0
 8003576:	e082      	b.n	800367e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003578:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800357a:	2b00      	cmp	r3, #0
 800357c:	d106      	bne.n	800358c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800357e:	f107 030c 	add.w	r3, r7, #12
 8003582:	4618      	mov	r0, r3
 8003584:	f000 fdfe 	bl	8004184 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003588:	2301      	movs	r3, #1
 800358a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800358c:	f001 fabe 	bl	8004b0c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003590:	f000 fbb0 	bl	8003cf4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003594:	f001 fa8a 	bl	8004aac <vPortEnterCritical>
 8003598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800359a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800359e:	b25b      	sxtb	r3, r3
 80035a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a4:	d103      	bne.n	80035ae <xQueueSemaphoreTake+0x13a>
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80035b4:	b25b      	sxtb	r3, r3
 80035b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ba:	d103      	bne.n	80035c4 <xQueueSemaphoreTake+0x150>
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035c4:	f001 faa2 	bl	8004b0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80035c8:	463a      	mov	r2, r7
 80035ca:	f107 030c 	add.w	r3, r7, #12
 80035ce:	4611      	mov	r1, r2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 fded 	bl	80041b0 <xTaskCheckForTimeOut>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d132      	bne.n	8003642 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80035dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80035de:	f000 f971 	bl	80038c4 <prvIsQueueEmpty>
 80035e2:	4603      	mov	r3, r0
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d026      	beq.n	8003636 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80035e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d109      	bne.n	8003604 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80035f0:	f001 fa5c 	bl	8004aac <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 80035f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f000 ff3f 	bl	800447c <xTaskPriorityInherit>
 80035fe:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003600:	f001 fa84 	bl	8004b0c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003606:	3324      	adds	r3, #36	; 0x24
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	4611      	mov	r1, r2
 800360c:	4618      	mov	r0, r3
 800360e:	f000 fd33 	bl	8004078 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003612:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003614:	f000 f904 	bl	8003820 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003618:	f000 fb7a 	bl	8003d10 <xTaskResumeAll>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	f47f af68 	bne.w	80034f4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8003624:	4b18      	ldr	r3, [pc, #96]	; (8003688 <xQueueSemaphoreTake+0x214>)
 8003626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	f3bf 8f4f 	dsb	sy
 8003630:	f3bf 8f6f 	isb	sy
 8003634:	e75e      	b.n	80034f4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003638:	f000 f8f2 	bl	8003820 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800363c:	f000 fb68 	bl	8003d10 <xTaskResumeAll>
 8003640:	e758      	b.n	80034f4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003642:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003644:	f000 f8ec 	bl	8003820 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003648:	f000 fb62 	bl	8003d10 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800364c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800364e:	f000 f939 	bl	80038c4 <prvIsQueueEmpty>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	f43f af4d 	beq.w	80034f4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00d      	beq.n	800367c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003660:	f001 fa24 	bl	8004aac <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003666:	f000 f834 	bl	80036d2 <prvGetDisinheritPriorityAfterTimeout>
 800366a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( ( void * ) pxQueue->pxMutexHolder, uxHighestWaitingPriority );
 800366c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003672:	4618      	mov	r0, r3
 8003674:	f001 f80e 	bl	8004694 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003678:	f001 fa48 	bl	8004b0c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800367c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800367e:	4618      	mov	r0, r3
 8003680:	3738      	adds	r7, #56	; 0x38
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	e000ed04 	.word	0xe000ed04

0800368c <uxQueueSpacesAvailable>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b086      	sub	sp, #24
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t *pxQueue;

	pxQueue = ( Queue_t * ) xQueue;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	617b      	str	r3, [r7, #20]
	configASSERT( pxQueue );
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10a      	bne.n	80036b4 <uxQueueSpacesAvailable+0x28>
	__asm volatile
 800369e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036a2:	f383 8811 	msr	BASEPRI, r3
 80036a6:	f3bf 8f6f 	isb	sy
 80036aa:	f3bf 8f4f 	dsb	sy
 80036ae:	60fb      	str	r3, [r7, #12]
}
 80036b0:	bf00      	nop
 80036b2:	e7fe      	b.n	80036b2 <uxQueueSpacesAvailable+0x26>

	taskENTER_CRITICAL();
 80036b4:	f001 f9fa 	bl	8004aac <vPortEnterCritical>
	{
		uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80036c4:	f001 fa22 	bl	8004b0c <vPortExitCritical>

	return uxReturn;
 80036c8:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80036ca:	4618      	mov	r0, r3
 80036cc:	3718      	adds	r7, #24
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80036d2:	b480      	push	{r7}
 80036d4:	b085      	sub	sp, #20
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0 )
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d006      	beq.n	80036f0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = configMAX_PRIORITIES - listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f1c3 0307 	rsb	r3, r3, #7
 80036ec:	60fb      	str	r3, [r7, #12]
 80036ee:	e001      	b.n	80036f4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80036f4:	68fb      	ldr	r3, [r7, #12]
	}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bc80      	pop	{r7}
 80036fe:	4770      	bx	lr

08003700 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800370c:	2300      	movs	r3, #0
 800370e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003714:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d10d      	bne.n	800373a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d14d      	bne.n	80037c2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	4618      	mov	r0, r3
 800372c:	f000 ff2c 	bl	8004588 <xTaskPriorityDisinherit>
 8003730:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	2200      	movs	r2, #0
 8003736:	605a      	str	r2, [r3, #4]
 8003738:	e043      	b.n	80037c2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d119      	bne.n	8003774 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6898      	ldr	r0, [r3, #8]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003748:	461a      	mov	r2, r3
 800374a:	68b9      	ldr	r1, [r7, #8]
 800374c:	f001 fcb0 	bl	80050b0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003758:	441a      	add	r2, r3
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	689a      	ldr	r2, [r3, #8]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	429a      	cmp	r2, r3
 8003768:	d32b      	bcc.n	80037c2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	e026      	b.n	80037c2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	68d8      	ldr	r0, [r3, #12]
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377c:	461a      	mov	r2, r3
 800377e:	68b9      	ldr	r1, [r7, #8]
 8003780:	f001 fc96 	bl	80050b0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	425b      	negs	r3, r3
 800378e:	441a      	add	r2, r3
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	68da      	ldr	r2, [r3, #12]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d207      	bcs.n	80037b0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	425b      	negs	r3, r3
 80037aa:	441a      	add	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d105      	bne.n	80037c2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d002      	beq.n	80037c2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	3b01      	subs	r3, #1
 80037c0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1c5a      	adds	r2, r3, #1
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80037ca:	697b      	ldr	r3, [r7, #20]
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	3718      	adds	r7, #24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	bd80      	pop	{r7, pc}

080037d4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d018      	beq.n	8003818 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68da      	ldr	r2, [r3, #12]
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ee:	441a      	add	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d303      	bcc.n	8003808 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681a      	ldr	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68d9      	ldr	r1, [r3, #12]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003810:	461a      	mov	r2, r3
 8003812:	6838      	ldr	r0, [r7, #0]
 8003814:	f001 fc4c 	bl	80050b0 <memcpy>
	}
}
 8003818:	bf00      	nop
 800381a:	3708      	adds	r7, #8
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}

08003820 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003828:	f001 f940 	bl	8004aac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003832:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003834:	e011      	b.n	800385a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800383a:	2b00      	cmp	r3, #0
 800383c:	d012      	beq.n	8003864 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	3324      	adds	r3, #36	; 0x24
 8003842:	4618      	mov	r0, r3
 8003844:	f000 fc3c 	bl	80040c0 <xTaskRemoveFromEventList>
 8003848:	4603      	mov	r3, r0
 800384a:	2b00      	cmp	r3, #0
 800384c:	d001      	beq.n	8003852 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800384e:	f000 fd11 	bl	8004274 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003852:	7bfb      	ldrb	r3, [r7, #15]
 8003854:	3b01      	subs	r3, #1
 8003856:	b2db      	uxtb	r3, r3
 8003858:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800385a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800385e:	2b00      	cmp	r3, #0
 8003860:	dce9      	bgt.n	8003836 <prvUnlockQueue+0x16>
 8003862:	e000      	b.n	8003866 <prvUnlockQueue+0x46>
					break;
 8003864:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	22ff      	movs	r2, #255	; 0xff
 800386a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800386e:	f001 f94d 	bl	8004b0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003872:	f001 f91b 	bl	8004aac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800387c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800387e:	e011      	b.n	80038a4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d012      	beq.n	80038ae <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	3310      	adds	r3, #16
 800388c:	4618      	mov	r0, r3
 800388e:	f000 fc17 	bl	80040c0 <xTaskRemoveFromEventList>
 8003892:	4603      	mov	r3, r0
 8003894:	2b00      	cmp	r3, #0
 8003896:	d001      	beq.n	800389c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003898:	f000 fcec 	bl	8004274 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800389c:	7bbb      	ldrb	r3, [r7, #14]
 800389e:	3b01      	subs	r3, #1
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80038a4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	dce9      	bgt.n	8003880 <prvUnlockQueue+0x60>
 80038ac:	e000      	b.n	80038b0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80038ae:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	22ff      	movs	r2, #255	; 0xff
 80038b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80038b8:	f001 f928 	bl	8004b0c <vPortExitCritical>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038cc:	f001 f8ee 	bl	8004aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d102      	bne.n	80038de <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80038d8:	2301      	movs	r3, #1
 80038da:	60fb      	str	r3, [r7, #12]
 80038dc:	e001      	b.n	80038e2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80038de:	2300      	movs	r3, #0
 80038e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80038e2:	f001 f913 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 80038e6:	68fb      	ldr	r3, [r7, #12]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80038f8:	f001 f8d8 	bl	8004aac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003904:	429a      	cmp	r2, r3
 8003906:	d102      	bne.n	800390e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003908:	2301      	movs	r3, #1
 800390a:	60fb      	str	r3, [r7, #12]
 800390c:	e001      	b.n	8003912 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800390e:	2300      	movs	r3, #0
 8003910:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003912:	f001 f8fb 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 8003916:	68fb      	ldr	r3, [r7, #12]
}
 8003918:	4618      	mov	r0, r3
 800391a:	3710      	adds	r7, #16
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003920:	b580      	push	{r7, lr}
 8003922:	b08e      	sub	sp, #56	; 0x38
 8003924:	af04      	add	r7, sp, #16
 8003926:	60f8      	str	r0, [r7, #12]
 8003928:	60b9      	str	r1, [r7, #8]
 800392a:	607a      	str	r2, [r7, #4]
 800392c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800392e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003938:	f383 8811 	msr	BASEPRI, r3
 800393c:	f3bf 8f6f 	isb	sy
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	623b      	str	r3, [r7, #32]
}
 8003946:	bf00      	nop
 8003948:	e7fe      	b.n	8003948 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800394a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800394c:	2b00      	cmp	r3, #0
 800394e:	d10a      	bne.n	8003966 <xTaskCreateStatic+0x46>
	__asm volatile
 8003950:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003954:	f383 8811 	msr	BASEPRI, r3
 8003958:	f3bf 8f6f 	isb	sy
 800395c:	f3bf 8f4f 	dsb	sy
 8003960:	61fb      	str	r3, [r7, #28]
}
 8003962:	bf00      	nop
 8003964:	e7fe      	b.n	8003964 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003966:	2354      	movs	r3, #84	; 0x54
 8003968:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	2b54      	cmp	r3, #84	; 0x54
 800396e:	d00a      	beq.n	8003986 <xTaskCreateStatic+0x66>
	__asm volatile
 8003970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003974:	f383 8811 	msr	BASEPRI, r3
 8003978:	f3bf 8f6f 	isb	sy
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	61bb      	str	r3, [r7, #24]
}
 8003982:	bf00      	nop
 8003984:	e7fe      	b.n	8003984 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003986:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003988:	2b00      	cmp	r3, #0
 800398a:	d01e      	beq.n	80039ca <xTaskCreateStatic+0xaa>
 800398c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800398e:	2b00      	cmp	r3, #0
 8003990:	d01b      	beq.n	80039ca <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003998:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800399a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800399c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399e:	2202      	movs	r2, #2
 80039a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80039a4:	2300      	movs	r3, #0
 80039a6:	9303      	str	r3, [sp, #12]
 80039a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039aa:	9302      	str	r3, [sp, #8]
 80039ac:	f107 0314 	add.w	r3, r7, #20
 80039b0:	9301      	str	r3, [sp, #4]
 80039b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	68b9      	ldr	r1, [r7, #8]
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 f850 	bl	8003a62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80039c2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80039c4:	f000 f8cc 	bl	8003b60 <prvAddNewTaskToReadyList>
 80039c8:	e001      	b.n	80039ce <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 80039ca:	2300      	movs	r3, #0
 80039cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80039ce:	697b      	ldr	r3, [r7, #20]
	}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3728      	adds	r7, #40	; 0x28
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b08c      	sub	sp, #48	; 0x30
 80039dc:	af04      	add	r7, sp, #16
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	603b      	str	r3, [r7, #0]
 80039e4:	4613      	mov	r3, r2
 80039e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039e8:	88fb      	ldrh	r3, [r7, #6]
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4618      	mov	r0, r3
 80039ee:	f001 f95d 	bl	8004cac <pvPortMalloc>
 80039f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00e      	beq.n	8003a18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80039fa:	2054      	movs	r0, #84	; 0x54
 80039fc:	f001 f956 	bl	8004cac <pvPortMalloc>
 8003a00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d003      	beq.n	8003a10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	631a      	str	r2, [r3, #48]	; 0x30
 8003a0e:	e005      	b.n	8003a1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003a10:	6978      	ldr	r0, [r7, #20]
 8003a12:	f001 fa0f 	bl	8004e34 <vPortFree>
 8003a16:	e001      	b.n	8003a1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d017      	beq.n	8003a52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003a2a:	88fa      	ldrh	r2, [r7, #6]
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	9303      	str	r3, [sp, #12]
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	9302      	str	r3, [sp, #8]
 8003a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a36:	9301      	str	r3, [sp, #4]
 8003a38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a3a:	9300      	str	r3, [sp, #0]
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	68b9      	ldr	r1, [r7, #8]
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f000 f80e 	bl	8003a62 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003a46:	69f8      	ldr	r0, [r7, #28]
 8003a48:	f000 f88a 	bl	8003b60 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	61bb      	str	r3, [r7, #24]
 8003a50:	e002      	b.n	8003a58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a52:	f04f 33ff 	mov.w	r3, #4294967295
 8003a56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003a58:	69bb      	ldr	r3, [r7, #24]
	}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3720      	adds	r7, #32
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}

08003a62 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003a62:	b580      	push	{r7, lr}
 8003a64:	b088      	sub	sp, #32
 8003a66:	af00      	add	r7, sp, #0
 8003a68:	60f8      	str	r0, [r7, #12]
 8003a6a:	60b9      	str	r1, [r7, #8]
 8003a6c:	607a      	str	r2, [r7, #4]
 8003a6e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003a70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4413      	add	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003a82:	69bb      	ldr	r3, [r7, #24]
 8003a84:	f023 0307 	bic.w	r3, r3, #7
 8003a88:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	f003 0307 	and.w	r3, r3, #7
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <prvInitialiseNewTask+0x48>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	617b      	str	r3, [r7, #20]
}
 8003aa6:	bf00      	nop
 8003aa8:	e7fe      	b.n	8003aa8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e012      	b.n	8003ad6 <prvInitialiseNewTask+0x74>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003ab0:	68ba      	ldr	r2, [r7, #8]
 8003ab2:	69fb      	ldr	r3, [r7, #28]
 8003ab4:	4413      	add	r3, r2
 8003ab6:	7819      	ldrb	r1, [r3, #0]
 8003ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	4413      	add	r3, r2
 8003abe:	3334      	adds	r3, #52	; 0x34
 8003ac0:	460a      	mov	r2, r1
 8003ac2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003ac4:	68ba      	ldr	r2, [r7, #8]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	4413      	add	r3, r2
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d006      	beq.n	8003ade <prvInitialiseNewTask+0x7c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	61fb      	str	r3, [r7, #28]
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d9e9      	bls.n	8003ab0 <prvInitialiseNewTask+0x4e>
 8003adc:	e000      	b.n	8003ae0 <prvInitialiseNewTask+0x7e>
		{
			break;
 8003ade:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d901      	bls.n	8003af2 <prvInitialiseNewTask+0x90>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003aee:	2306      	movs	r3, #6
 8003af0:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003af6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afc:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b00:	2200      	movs	r2, #0
 8003b02:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b06:	3304      	adds	r3, #4
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f7ff f8f1 	bl	8002cf0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b10:	3318      	adds	r3, #24
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7ff f8ec 	bl	8002cf0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b1c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b20:	f1c3 0207 	rsb	r2, r3, #7
 8003b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b26:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b30:	2200      	movs	r2, #0
 8003b32:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b36:	2200      	movs	r2, #0
 8003b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003b3c:	683a      	ldr	r2, [r7, #0]
 8003b3e:	68f9      	ldr	r1, [r7, #12]
 8003b40:	69b8      	ldr	r0, [r7, #24]
 8003b42:	f000 fec1 	bl	80048c8 <pxPortInitialiseStack>
 8003b46:	4602      	mov	r2, r0
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d002      	beq.n	8003b58 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b56:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003b58:	bf00      	nop
 8003b5a:	3720      	adds	r7, #32
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003b68:	f000 ffa0 	bl	8004aac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003b6c:	4b2a      	ldr	r3, [pc, #168]	; (8003c18 <prvAddNewTaskToReadyList+0xb8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	3301      	adds	r3, #1
 8003b72:	4a29      	ldr	r2, [pc, #164]	; (8003c18 <prvAddNewTaskToReadyList+0xb8>)
 8003b74:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003b76:	4b29      	ldr	r3, [pc, #164]	; (8003c1c <prvAddNewTaskToReadyList+0xbc>)
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d109      	bne.n	8003b92 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003b7e:	4a27      	ldr	r2, [pc, #156]	; (8003c1c <prvAddNewTaskToReadyList+0xbc>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003b84:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <prvAddNewTaskToReadyList+0xb8>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d110      	bne.n	8003bae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003b8c:	f000 fb96 	bl	80042bc <prvInitialiseTaskLists>
 8003b90:	e00d      	b.n	8003bae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003b92:	4b23      	ldr	r3, [pc, #140]	; (8003c20 <prvAddNewTaskToReadyList+0xc0>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b9a:	4b20      	ldr	r3, [pc, #128]	; (8003c1c <prvAddNewTaskToReadyList+0xbc>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba4:	429a      	cmp	r2, r3
 8003ba6:	d802      	bhi.n	8003bae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003ba8:	4a1c      	ldr	r2, [pc, #112]	; (8003c1c <prvAddNewTaskToReadyList+0xbc>)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003bae:	4b1d      	ldr	r3, [pc, #116]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <prvAddNewTaskToReadyList+0xc4>)
 8003bb6:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	409a      	lsls	r2, r3
 8003bc0:	4b19      	ldr	r3, [pc, #100]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	4a18      	ldr	r2, [pc, #96]	; (8003c28 <prvAddNewTaskToReadyList+0xc8>)
 8003bc8:	6013      	str	r3, [r2, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <prvAddNewTaskToReadyList+0xcc>)
 8003bd8:	441a      	add	r2, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	3304      	adds	r3, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	4610      	mov	r0, r2
 8003be2:	f7ff f891 	bl	8002d08 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003be6:	f000 ff91 	bl	8004b0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003bea:	4b0d      	ldr	r3, [pc, #52]	; (8003c20 <prvAddNewTaskToReadyList+0xc0>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00e      	beq.n	8003c10 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003bf2:	4b0a      	ldr	r3, [pc, #40]	; (8003c1c <prvAddNewTaskToReadyList+0xbc>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d207      	bcs.n	8003c10 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003c00:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <prvAddNewTaskToReadyList+0xd0>)
 8003c02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c06:	601a      	str	r2, [r3, #0]
 8003c08:	f3bf 8f4f 	dsb	sy
 8003c0c:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003c10:	bf00      	nop
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}
 8003c18:	2000062c 	.word	0x2000062c
 8003c1c:	2000052c 	.word	0x2000052c
 8003c20:	20000638 	.word	0x20000638
 8003c24:	20000648 	.word	0x20000648
 8003c28:	20000634 	.word	0x20000634
 8003c2c:	20000530 	.word	0x20000530
 8003c30:	e000ed04 	.word	0xe000ed04

08003c34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b08a      	sub	sp, #40	; 0x28
 8003c38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003c42:	463a      	mov	r2, r7
 8003c44:	1d39      	adds	r1, r7, #4
 8003c46:	f107 0308 	add.w	r3, r7, #8
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fc fa88 	bl	8000160 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003c50:	6839      	ldr	r1, [r7, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	9202      	str	r2, [sp, #8]
 8003c58:	9301      	str	r3, [sp, #4]
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	9300      	str	r3, [sp, #0]
 8003c5e:	2300      	movs	r3, #0
 8003c60:	460a      	mov	r2, r1
 8003c62:	491e      	ldr	r1, [pc, #120]	; (8003cdc <vTaskStartScheduler+0xa8>)
 8003c64:	481e      	ldr	r0, [pc, #120]	; (8003ce0 <vTaskStartScheduler+0xac>)
 8003c66:	f7ff fe5b 	bl	8003920 <xTaskCreateStatic>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	4a1d      	ldr	r2, [pc, #116]	; (8003ce4 <vTaskStartScheduler+0xb0>)
 8003c6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003c70:	4b1c      	ldr	r3, [pc, #112]	; (8003ce4 <vTaskStartScheduler+0xb0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d002      	beq.n	8003c7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003c78:	2301      	movs	r3, #1
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e001      	b.n	8003c82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003c7e:	2300      	movs	r3, #0
 8003c80:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	2b01      	cmp	r3, #1
 8003c86:	d116      	bne.n	8003cb6 <vTaskStartScheduler+0x82>
	__asm volatile
 8003c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c8c:	f383 8811 	msr	BASEPRI, r3
 8003c90:	f3bf 8f6f 	isb	sy
 8003c94:	f3bf 8f4f 	dsb	sy
 8003c98:	613b      	str	r3, [r7, #16]
}
 8003c9a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003c9c:	4b12      	ldr	r3, [pc, #72]	; (8003ce8 <vTaskStartScheduler+0xb4>)
 8003c9e:	f04f 32ff 	mov.w	r2, #4294967295
 8003ca2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ca4:	4b11      	ldr	r3, [pc, #68]	; (8003cec <vTaskStartScheduler+0xb8>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003caa:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <vTaskStartScheduler+0xbc>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003cb0:	f000 fe8a 	bl	80049c8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003cb4:	e00e      	b.n	8003cd4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cbc:	d10a      	bne.n	8003cd4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8003cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc2:	f383 8811 	msr	BASEPRI, r3
 8003cc6:	f3bf 8f6f 	isb	sy
 8003cca:	f3bf 8f4f 	dsb	sy
 8003cce:	60fb      	str	r3, [r7, #12]
}
 8003cd0:	bf00      	nop
 8003cd2:	e7fe      	b.n	8003cd2 <vTaskStartScheduler+0x9e>
}
 8003cd4:	bf00      	nop
 8003cd6:	3718      	adds	r7, #24
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	08005a40 	.word	0x08005a40
 8003ce0:	0800428d 	.word	0x0800428d
 8003ce4:	20000650 	.word	0x20000650
 8003ce8:	2000064c 	.word	0x2000064c
 8003cec:	20000638 	.word	0x20000638
 8003cf0:	20000630 	.word	0x20000630

08003cf4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <vTaskSuspendAll+0x18>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	3301      	adds	r3, #1
 8003cfe:	4a03      	ldr	r2, [pc, #12]	; (8003d0c <vTaskSuspendAll+0x18>)
 8003d00:	6013      	str	r3, [r2, #0]
}
 8003d02:	bf00      	nop
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bc80      	pop	{r7}
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000654 	.word	0x20000654

08003d10 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003d16:	2300      	movs	r3, #0
 8003d18:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003d1e:	4b41      	ldr	r3, [pc, #260]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10a      	bne.n	8003d3c <xTaskResumeAll+0x2c>
	__asm volatile
 8003d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d2a:	f383 8811 	msr	BASEPRI, r3
 8003d2e:	f3bf 8f6f 	isb	sy
 8003d32:	f3bf 8f4f 	dsb	sy
 8003d36:	603b      	str	r3, [r7, #0]
}
 8003d38:	bf00      	nop
 8003d3a:	e7fe      	b.n	8003d3a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003d3c:	f000 feb6 	bl	8004aac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003d40:	4b38      	ldr	r3, [pc, #224]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	4a37      	ldr	r2, [pc, #220]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d48:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d4a:	4b36      	ldr	r3, [pc, #216]	; (8003e24 <xTaskResumeAll+0x114>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	2b00      	cmp	r3, #0
 8003d50:	d161      	bne.n	8003e16 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003d52:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <xTaskResumeAll+0x118>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d05d      	beq.n	8003e16 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003d5a:	e02e      	b.n	8003dba <xTaskResumeAll+0xaa>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003d5c:	4b33      	ldr	r3, [pc, #204]	; (8003e2c <xTaskResumeAll+0x11c>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	3318      	adds	r3, #24
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f828 	bl	8002dbe <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	3304      	adds	r3, #4
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7ff f823 	bl	8002dbe <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	409a      	lsls	r2, r3
 8003d80:	4b2b      	ldr	r3, [pc, #172]	; (8003e30 <xTaskResumeAll+0x120>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	4a2a      	ldr	r2, [pc, #168]	; (8003e30 <xTaskResumeAll+0x120>)
 8003d88:	6013      	str	r3, [r2, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	4a27      	ldr	r2, [pc, #156]	; (8003e34 <xTaskResumeAll+0x124>)
 8003d98:	441a      	add	r2, r3
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	3304      	adds	r3, #4
 8003d9e:	4619      	mov	r1, r3
 8003da0:	4610      	mov	r0, r2
 8003da2:	f7fe ffb1 	bl	8002d08 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <xTaskResumeAll+0x128>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d302      	bcc.n	8003dba <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8003db4:	4b21      	ldr	r3, [pc, #132]	; (8003e3c <xTaskResumeAll+0x12c>)
 8003db6:	2201      	movs	r2, #1
 8003db8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003dba:	4b1c      	ldr	r3, [pc, #112]	; (8003e2c <xTaskResumeAll+0x11c>)
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d1cc      	bne.n	8003d5c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003dc8:	f000 fb16 	bl	80043f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8003dcc:	4b1c      	ldr	r3, [pc, #112]	; (8003e40 <xTaskResumeAll+0x130>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d010      	beq.n	8003dfa <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003dd8:	f000 f836 	bl	8003e48 <xTaskIncrementTick>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d002      	beq.n	8003de8 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003de2:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <xTaskResumeAll+0x12c>)
 8003de4:	2201      	movs	r2, #1
 8003de6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	3b01      	subs	r3, #1
 8003dec:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1f1      	bne.n	8003dd8 <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003df4:	4b12      	ldr	r3, [pc, #72]	; (8003e40 <xTaskResumeAll+0x130>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003dfa:	4b10      	ldr	r3, [pc, #64]	; (8003e3c <xTaskResumeAll+0x12c>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003e02:	2301      	movs	r3, #1
 8003e04:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003e06:	4b0f      	ldr	r3, [pc, #60]	; (8003e44 <xTaskResumeAll+0x134>)
 8003e08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	f3bf 8f4f 	dsb	sy
 8003e12:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003e16:	f000 fe79 	bl	8004b0c <vPortExitCritical>

	return xAlreadyYielded;
 8003e1a:	68bb      	ldr	r3, [r7, #8]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000654 	.word	0x20000654
 8003e28:	2000062c 	.word	0x2000062c
 8003e2c:	200005ec 	.word	0x200005ec
 8003e30:	20000634 	.word	0x20000634
 8003e34:	20000530 	.word	0x20000530
 8003e38:	2000052c 	.word	0x2000052c
 8003e3c:	20000640 	.word	0x20000640
 8003e40:	2000063c 	.word	0x2000063c
 8003e44:	e000ed04 	.word	0xe000ed04

08003e48 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b086      	sub	sp, #24
 8003e4c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e52:	4b51      	ldr	r3, [pc, #324]	; (8003f98 <xTaskIncrementTick+0x150>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f040 808d 	bne.w	8003f76 <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003e5c:	4b4f      	ldr	r3, [pc, #316]	; (8003f9c <xTaskIncrementTick+0x154>)
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003e64:	4a4d      	ldr	r2, [pc, #308]	; (8003f9c <xTaskIncrementTick+0x154>)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d120      	bne.n	8003eb2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003e70:	4b4b      	ldr	r3, [pc, #300]	; (8003fa0 <xTaskIncrementTick+0x158>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <xTaskIncrementTick+0x48>
	__asm volatile
 8003e7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e7e:	f383 8811 	msr	BASEPRI, r3
 8003e82:	f3bf 8f6f 	isb	sy
 8003e86:	f3bf 8f4f 	dsb	sy
 8003e8a:	603b      	str	r3, [r7, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	e7fe      	b.n	8003e8e <xTaskIncrementTick+0x46>
 8003e90:	4b43      	ldr	r3, [pc, #268]	; (8003fa0 <xTaskIncrementTick+0x158>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	60fb      	str	r3, [r7, #12]
 8003e96:	4b43      	ldr	r3, [pc, #268]	; (8003fa4 <xTaskIncrementTick+0x15c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a41      	ldr	r2, [pc, #260]	; (8003fa0 <xTaskIncrementTick+0x158>)
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	4a41      	ldr	r2, [pc, #260]	; (8003fa4 <xTaskIncrementTick+0x15c>)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	4b40      	ldr	r3, [pc, #256]	; (8003fa8 <xTaskIncrementTick+0x160>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3301      	adds	r3, #1
 8003eaa:	4a3f      	ldr	r2, [pc, #252]	; (8003fa8 <xTaskIncrementTick+0x160>)
 8003eac:	6013      	str	r3, [r2, #0]
 8003eae:	f000 faa3 	bl	80043f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003eb2:	4b3e      	ldr	r3, [pc, #248]	; (8003fac <xTaskIncrementTick+0x164>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	693a      	ldr	r2, [r7, #16]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d34d      	bcc.n	8003f58 <xTaskIncrementTick+0x110>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ebc:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <xTaskIncrementTick+0x158>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d101      	bne.n	8003eca <xTaskIncrementTick+0x82>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e000      	b.n	8003ecc <xTaskIncrementTick+0x84>
 8003eca:	2300      	movs	r3, #0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d004      	beq.n	8003eda <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ed0:	4b36      	ldr	r3, [pc, #216]	; (8003fac <xTaskIncrementTick+0x164>)
 8003ed2:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed6:	601a      	str	r2, [r3, #0]
					break;
 8003ed8:	e03e      	b.n	8003f58 <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003eda:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <xTaskIncrementTick+0x158>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68db      	ldr	r3, [r3, #12]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d203      	bcs.n	8003efa <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003ef2:	4a2e      	ldr	r2, [pc, #184]	; (8003fac <xTaskIncrementTick+0x164>)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6013      	str	r3, [r2, #0]
						break;
 8003ef8:	e02e      	b.n	8003f58 <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	3304      	adds	r3, #4
 8003efe:	4618      	mov	r0, r3
 8003f00:	f7fe ff5d 	bl	8002dbe <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d004      	beq.n	8003f16 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	3318      	adds	r3, #24
 8003f10:	4618      	mov	r0, r3
 8003f12:	f7fe ff54 	bl	8002dbe <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003f16:	68bb      	ldr	r3, [r7, #8]
 8003f18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	409a      	lsls	r2, r3
 8003f1e:	4b24      	ldr	r3, [pc, #144]	; (8003fb0 <xTaskIncrementTick+0x168>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4313      	orrs	r3, r2
 8003f24:	4a22      	ldr	r2, [pc, #136]	; (8003fb0 <xTaskIncrementTick+0x168>)
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	4413      	add	r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	4a1f      	ldr	r2, [pc, #124]	; (8003fb4 <xTaskIncrementTick+0x16c>)
 8003f36:	441a      	add	r2, r3
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f7fe fee2 	bl	8002d08 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f48:	4b1b      	ldr	r3, [pc, #108]	; (8003fb8 <xTaskIncrementTick+0x170>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	429a      	cmp	r2, r3
 8003f50:	d3b4      	bcc.n	8003ebc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003f52:	2301      	movs	r3, #1
 8003f54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f56:	e7b1      	b.n	8003ebc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <xTaskIncrementTick+0x170>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f5e:	4915      	ldr	r1, [pc, #84]	; (8003fb4 <xTaskIncrementTick+0x16c>)
 8003f60:	4613      	mov	r3, r2
 8003f62:	009b      	lsls	r3, r3, #2
 8003f64:	4413      	add	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	440b      	add	r3, r1
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d907      	bls.n	8003f80 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
 8003f74:	e004      	b.n	8003f80 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8003f76:	4b11      	ldr	r3, [pc, #68]	; (8003fbc <xTaskIncrementTick+0x174>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	3301      	adds	r3, #1
 8003f7c:	4a0f      	ldr	r2, [pc, #60]	; (8003fbc <xTaskIncrementTick+0x174>)
 8003f7e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8003f80:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <xTaskIncrementTick+0x178>)
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003f8c:	697b      	ldr	r3, [r7, #20]
}
 8003f8e:	4618      	mov	r0, r3
 8003f90:	3718      	adds	r7, #24
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	20000654 	.word	0x20000654
 8003f9c:	20000630 	.word	0x20000630
 8003fa0:	200005e4 	.word	0x200005e4
 8003fa4:	200005e8 	.word	0x200005e8
 8003fa8:	20000644 	.word	0x20000644
 8003fac:	2000064c 	.word	0x2000064c
 8003fb0:	20000634 	.word	0x20000634
 8003fb4:	20000530 	.word	0x20000530
 8003fb8:	2000052c 	.word	0x2000052c
 8003fbc:	2000063c 	.word	0x2000063c
 8003fc0:	20000640 	.word	0x20000640

08003fc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b087      	sub	sp, #28
 8003fc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003fca:	4b26      	ldr	r3, [pc, #152]	; (8004064 <vTaskSwitchContext+0xa0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003fd2:	4b25      	ldr	r3, [pc, #148]	; (8004068 <vTaskSwitchContext+0xa4>)
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003fd8:	e03f      	b.n	800405a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8003fda:	4b23      	ldr	r3, [pc, #140]	; (8004068 <vTaskSwitchContext+0xa4>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003fe0:	4b22      	ldr	r3, [pc, #136]	; (800406c <vTaskSwitchContext+0xa8>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	fab3 f383 	clz	r3, r3
 8003fec:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8003fee:	7afb      	ldrb	r3, [r7, #11]
 8003ff0:	f1c3 031f 	rsb	r3, r3, #31
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	491e      	ldr	r1, [pc, #120]	; (8004070 <vTaskSwitchContext+0xac>)
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	4413      	add	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	440b      	add	r3, r1
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d10a      	bne.n	8004020 <vTaskSwitchContext+0x5c>
	__asm volatile
 800400a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800400e:	f383 8811 	msr	BASEPRI, r3
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	f3bf 8f4f 	dsb	sy
 800401a:	607b      	str	r3, [r7, #4]
}
 800401c:	bf00      	nop
 800401e:	e7fe      	b.n	800401e <vTaskSwitchContext+0x5a>
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4613      	mov	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	4413      	add	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4a11      	ldr	r2, [pc, #68]	; (8004070 <vTaskSwitchContext+0xac>)
 800402c:	4413      	add	r3, r2
 800402e:	613b      	str	r3, [r7, #16]
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	685a      	ldr	r2, [r3, #4]
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	605a      	str	r2, [r3, #4]
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	3308      	adds	r3, #8
 8004042:	429a      	cmp	r2, r3
 8004044:	d104      	bne.n	8004050 <vTaskSwitchContext+0x8c>
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	685a      	ldr	r2, [r3, #4]
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	605a      	str	r2, [r3, #4]
 8004050:	693b      	ldr	r3, [r7, #16]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	4a07      	ldr	r2, [pc, #28]	; (8004074 <vTaskSwitchContext+0xb0>)
 8004058:	6013      	str	r3, [r2, #0]
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr
 8004064:	20000654 	.word	0x20000654
 8004068:	20000640 	.word	0x20000640
 800406c:	20000634 	.word	0x20000634
 8004070:	20000530 	.word	0x20000530
 8004074:	2000052c 	.word	0x2000052c

08004078 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d10a      	bne.n	800409e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800408c:	f383 8811 	msr	BASEPRI, r3
 8004090:	f3bf 8f6f 	isb	sy
 8004094:	f3bf 8f4f 	dsb	sy
 8004098:	60fb      	str	r3, [r7, #12]
}
 800409a:	bf00      	nop
 800409c:	e7fe      	b.n	800409c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800409e:	4b07      	ldr	r3, [pc, #28]	; (80040bc <vTaskPlaceOnEventList+0x44>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3318      	adds	r3, #24
 80040a4:	4619      	mov	r1, r3
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7fe fe51 	bl	8002d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040ac:	2101      	movs	r1, #1
 80040ae:	6838      	ldr	r0, [r7, #0]
 80040b0:	f000 fba4 	bl	80047fc <prvAddCurrentTaskToDelayedList>
}
 80040b4:	bf00      	nop
 80040b6:	3710      	adds	r7, #16
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}
 80040bc:	2000052c 	.word	0x2000052c

080040c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d10a      	bne.n	80040ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80040d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040da:	f383 8811 	msr	BASEPRI, r3
 80040de:	f3bf 8f6f 	isb	sy
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	60fb      	str	r3, [r7, #12]
}
 80040e8:	bf00      	nop
 80040ea:	e7fe      	b.n	80040ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	3318      	adds	r3, #24
 80040f0:	4618      	mov	r0, r3
 80040f2:	f7fe fe64 	bl	8002dbe <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040f6:	4b1d      	ldr	r3, [pc, #116]	; (800416c <xTaskRemoveFromEventList+0xac>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d11c      	bne.n	8004138 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	3304      	adds	r3, #4
 8004102:	4618      	mov	r0, r3
 8004104:	f7fe fe5b 	bl	8002dbe <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	2201      	movs	r2, #1
 800410e:	409a      	lsls	r2, r3
 8004110:	4b17      	ldr	r3, [pc, #92]	; (8004170 <xTaskRemoveFromEventList+0xb0>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4313      	orrs	r3, r2
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <xTaskRemoveFromEventList+0xb0>)
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800411e:	4613      	mov	r3, r2
 8004120:	009b      	lsls	r3, r3, #2
 8004122:	4413      	add	r3, r2
 8004124:	009b      	lsls	r3, r3, #2
 8004126:	4a13      	ldr	r2, [pc, #76]	; (8004174 <xTaskRemoveFromEventList+0xb4>)
 8004128:	441a      	add	r2, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	3304      	adds	r3, #4
 800412e:	4619      	mov	r1, r3
 8004130:	4610      	mov	r0, r2
 8004132:	f7fe fde9 	bl	8002d08 <vListInsertEnd>
 8004136:	e005      	b.n	8004144 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	3318      	adds	r3, #24
 800413c:	4619      	mov	r1, r3
 800413e:	480e      	ldr	r0, [pc, #56]	; (8004178 <xTaskRemoveFromEventList+0xb8>)
 8004140:	f7fe fde2 	bl	8002d08 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004148:	4b0c      	ldr	r3, [pc, #48]	; (800417c <xTaskRemoveFromEventList+0xbc>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800414e:	429a      	cmp	r2, r3
 8004150:	d905      	bls.n	800415e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004152:	2301      	movs	r3, #1
 8004154:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <xTaskRemoveFromEventList+0xc0>)
 8004158:	2201      	movs	r2, #1
 800415a:	601a      	str	r2, [r3, #0]
 800415c:	e001      	b.n	8004162 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004162:	697b      	ldr	r3, [r7, #20]
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	20000654 	.word	0x20000654
 8004170:	20000634 	.word	0x20000634
 8004174:	20000530 	.word	0x20000530
 8004178:	200005ec 	.word	0x200005ec
 800417c:	2000052c 	.word	0x2000052c
 8004180:	20000640 	.word	0x20000640

08004184 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800418c:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <vTaskInternalSetTimeOutState+0x24>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004194:	4b05      	ldr	r3, [pc, #20]	; (80041ac <vTaskInternalSetTimeOutState+0x28>)
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	605a      	str	r2, [r3, #4]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	20000644 	.word	0x20000644
 80041ac:	20000630 	.word	0x20000630

080041b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10a      	bne.n	80041d6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80041c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c4:	f383 8811 	msr	BASEPRI, r3
 80041c8:	f3bf 8f6f 	isb	sy
 80041cc:	f3bf 8f4f 	dsb	sy
 80041d0:	613b      	str	r3, [r7, #16]
}
 80041d2:	bf00      	nop
 80041d4:	e7fe      	b.n	80041d4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10a      	bne.n	80041f2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80041f2:	f000 fc5b 	bl	8004aac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80041f6:	4b1d      	ldr	r3, [pc, #116]	; (800426c <xTaskCheckForTimeOut+0xbc>)
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	69ba      	ldr	r2, [r7, #24]
 8004202:	1ad3      	subs	r3, r2, r3
 8004204:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800420e:	d102      	bne.n	8004216 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	61fb      	str	r3, [r7, #28]
 8004214:	e023      	b.n	800425e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	4b15      	ldr	r3, [pc, #84]	; (8004270 <xTaskCheckForTimeOut+0xc0>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d007      	beq.n	8004232 <xTaskCheckForTimeOut+0x82>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	69ba      	ldr	r2, [r7, #24]
 8004228:	429a      	cmp	r2, r3
 800422a:	d302      	bcc.n	8004232 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800422c:	2301      	movs	r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	e015      	b.n	800425e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	429a      	cmp	r2, r3
 800423a:	d20b      	bcs.n	8004254 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f7ff ff9b 	bl	8004184 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800424e:	2300      	movs	r3, #0
 8004250:	61fb      	str	r3, [r7, #28]
 8004252:	e004      	b.n	800425e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2200      	movs	r2, #0
 8004258:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800425a:	2301      	movs	r3, #1
 800425c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800425e:	f000 fc55 	bl	8004b0c <vPortExitCritical>

	return xReturn;
 8004262:	69fb      	ldr	r3, [r7, #28]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3720      	adds	r7, #32
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}
 800426c:	20000630 	.word	0x20000630
 8004270:	20000644 	.word	0x20000644

08004274 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004274:	b480      	push	{r7}
 8004276:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004278:	4b03      	ldr	r3, [pc, #12]	; (8004288 <vTaskMissedYield+0x14>)
 800427a:	2201      	movs	r2, #1
 800427c:	601a      	str	r2, [r3, #0]
}
 800427e:	bf00      	nop
 8004280:	46bd      	mov	sp, r7
 8004282:	bc80      	pop	{r7}
 8004284:	4770      	bx	lr
 8004286:	bf00      	nop
 8004288:	20000640 	.word	0x20000640

0800428c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b082      	sub	sp, #8
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004294:	f000 f852 	bl	800433c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004298:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <prvIdleTask+0x28>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d9f9      	bls.n	8004294 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <prvIdleTask+0x2c>)
 80042a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	f3bf 8f4f 	dsb	sy
 80042ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80042b0:	e7f0      	b.n	8004294 <prvIdleTask+0x8>
 80042b2:	bf00      	nop
 80042b4:	20000530 	.word	0x20000530
 80042b8:	e000ed04 	.word	0xe000ed04

080042bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042c2:	2300      	movs	r3, #0
 80042c4:	607b      	str	r3, [r7, #4]
 80042c6:	e00c      	b.n	80042e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	4613      	mov	r3, r2
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	4413      	add	r3, r2
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	4a12      	ldr	r2, [pc, #72]	; (800431c <prvInitialiseTaskLists+0x60>)
 80042d4:	4413      	add	r3, r2
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fe fceb 	bl	8002cb2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3301      	adds	r3, #1
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d9ef      	bls.n	80042c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80042e8:	480d      	ldr	r0, [pc, #52]	; (8004320 <prvInitialiseTaskLists+0x64>)
 80042ea:	f7fe fce2 	bl	8002cb2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80042ee:	480d      	ldr	r0, [pc, #52]	; (8004324 <prvInitialiseTaskLists+0x68>)
 80042f0:	f7fe fcdf 	bl	8002cb2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80042f4:	480c      	ldr	r0, [pc, #48]	; (8004328 <prvInitialiseTaskLists+0x6c>)
 80042f6:	f7fe fcdc 	bl	8002cb2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80042fa:	480c      	ldr	r0, [pc, #48]	; (800432c <prvInitialiseTaskLists+0x70>)
 80042fc:	f7fe fcd9 	bl	8002cb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004300:	480b      	ldr	r0, [pc, #44]	; (8004330 <prvInitialiseTaskLists+0x74>)
 8004302:	f7fe fcd6 	bl	8002cb2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004306:	4b0b      	ldr	r3, [pc, #44]	; (8004334 <prvInitialiseTaskLists+0x78>)
 8004308:	4a05      	ldr	r2, [pc, #20]	; (8004320 <prvInitialiseTaskLists+0x64>)
 800430a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800430c:	4b0a      	ldr	r3, [pc, #40]	; (8004338 <prvInitialiseTaskLists+0x7c>)
 800430e:	4a05      	ldr	r2, [pc, #20]	; (8004324 <prvInitialiseTaskLists+0x68>)
 8004310:	601a      	str	r2, [r3, #0]
}
 8004312:	bf00      	nop
 8004314:	3708      	adds	r7, #8
 8004316:	46bd      	mov	sp, r7
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	20000530 	.word	0x20000530
 8004320:	200005bc 	.word	0x200005bc
 8004324:	200005d0 	.word	0x200005d0
 8004328:	200005ec 	.word	0x200005ec
 800432c:	20000600 	.word	0x20000600
 8004330:	20000618 	.word	0x20000618
 8004334:	200005e4 	.word	0x200005e4
 8004338:	200005e8 	.word	0x200005e8

0800433c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004342:	e019      	b.n	8004378 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004344:	f000 fbb2 	bl	8004aac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004348:	4b10      	ldr	r3, [pc, #64]	; (800438c <prvCheckTasksWaitingTermination+0x50>)
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	68db      	ldr	r3, [r3, #12]
 800434e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	3304      	adds	r3, #4
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe fd32 	bl	8002dbe <uxListRemove>
				--uxCurrentNumberOfTasks;
 800435a:	4b0d      	ldr	r3, [pc, #52]	; (8004390 <prvCheckTasksWaitingTermination+0x54>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	3b01      	subs	r3, #1
 8004360:	4a0b      	ldr	r2, [pc, #44]	; (8004390 <prvCheckTasksWaitingTermination+0x54>)
 8004362:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <prvCheckTasksWaitingTermination+0x58>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	3b01      	subs	r3, #1
 800436a:	4a0a      	ldr	r2, [pc, #40]	; (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800436c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800436e:	f000 fbcd 	bl	8004b0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f000 f810 	bl	8004398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004378:	4b06      	ldr	r3, [pc, #24]	; (8004394 <prvCheckTasksWaitingTermination+0x58>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d1e1      	bne.n	8004344 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004380:	bf00      	nop
 8004382:	bf00      	nop
 8004384:	3708      	adds	r7, #8
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
 800438a:	bf00      	nop
 800438c:	20000600 	.word	0x20000600
 8004390:	2000062c 	.word	0x2000062c
 8004394:	20000614 	.word	0x20000614

08004398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004398:	b580      	push	{r7, lr}
 800439a:	b084      	sub	sp, #16
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d108      	bne.n	80043bc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fd40 	bl	8004e34 <vPortFree>
				vPortFree( pxTCB );
 80043b4:	6878      	ldr	r0, [r7, #4]
 80043b6:	f000 fd3d 	bl	8004e34 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80043ba:	e018      	b.n	80043ee <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d103      	bne.n	80043ce <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fd34 	bl	8004e34 <vPortFree>
	}
 80043cc:	e00f      	b.n	80043ee <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d00a      	beq.n	80043ee <prvDeleteTCB+0x56>
	__asm volatile
 80043d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043dc:	f383 8811 	msr	BASEPRI, r3
 80043e0:	f3bf 8f6f 	isb	sy
 80043e4:	f3bf 8f4f 	dsb	sy
 80043e8:	60fb      	str	r3, [r7, #12]
}
 80043ea:	bf00      	nop
 80043ec:	e7fe      	b.n	80043ec <prvDeleteTCB+0x54>
	}
 80043ee:	bf00      	nop
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
	...

080043f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80043f8:	b480      	push	{r7}
 80043fa:	b083      	sub	sp, #12
 80043fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043fe:	4b0e      	ldr	r3, [pc, #56]	; (8004438 <prvResetNextTaskUnblockTime+0x40>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d101      	bne.n	800440c <prvResetNextTaskUnblockTime+0x14>
 8004408:	2301      	movs	r3, #1
 800440a:	e000      	b.n	800440e <prvResetNextTaskUnblockTime+0x16>
 800440c:	2300      	movs	r3, #0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d004      	beq.n	800441c <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004412:	4b0a      	ldr	r3, [pc, #40]	; (800443c <prvResetNextTaskUnblockTime+0x44>)
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800441a:	e008      	b.n	800442e <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800441c:	4b06      	ldr	r3, [pc, #24]	; (8004438 <prvResetNextTaskUnblockTime+0x40>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	4a04      	ldr	r2, [pc, #16]	; (800443c <prvResetNextTaskUnblockTime+0x44>)
 800442c:	6013      	str	r3, [r2, #0]
}
 800442e:	bf00      	nop
 8004430:	370c      	adds	r7, #12
 8004432:	46bd      	mov	sp, r7
 8004434:	bc80      	pop	{r7}
 8004436:	4770      	bx	lr
 8004438:	200005e4 	.word	0x200005e4
 800443c:	2000064c 	.word	0x2000064c

08004440 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004446:	4b0b      	ldr	r3, [pc, #44]	; (8004474 <xTaskGetSchedulerState+0x34>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d102      	bne.n	8004454 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800444e:	2301      	movs	r3, #1
 8004450:	607b      	str	r3, [r7, #4]
 8004452:	e008      	b.n	8004466 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004454:	4b08      	ldr	r3, [pc, #32]	; (8004478 <xTaskGetSchedulerState+0x38>)
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d102      	bne.n	8004462 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800445c:	2302      	movs	r3, #2
 800445e:	607b      	str	r3, [r7, #4]
 8004460:	e001      	b.n	8004466 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004462:	2300      	movs	r3, #0
 8004464:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004466:	687b      	ldr	r3, [r7, #4]
	}
 8004468:	4618      	mov	r0, r3
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr
 8004472:	bf00      	nop
 8004474:	20000638 	.word	0x20000638
 8004478:	20000654 	.word	0x20000654

0800447c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800447c:	b580      	push	{r7, lr}
 800447e:	b084      	sub	sp, #16
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = ( TCB_t * ) pxMutexHolder;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004488:	2300      	movs	r3, #0
 800448a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d06e      	beq.n	8004570 <xTaskPriorityInherit+0xf4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004496:	4b39      	ldr	r3, [pc, #228]	; (800457c <xTaskPriorityInherit+0x100>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800449c:	429a      	cmp	r2, r3
 800449e:	d25e      	bcs.n	800455e <xTaskPriorityInherit+0xe2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	db06      	blt.n	80044b6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a8:	4b34      	ldr	r3, [pc, #208]	; (800457c <xTaskPriorityInherit+0x100>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ae:	f1c3 0207 	rsb	r2, r3, #7
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	6959      	ldr	r1, [r3, #20]
 80044ba:	68bb      	ldr	r3, [r7, #8]
 80044bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044be:	4613      	mov	r3, r2
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	4413      	add	r3, r2
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4a2e      	ldr	r2, [pc, #184]	; (8004580 <xTaskPriorityInherit+0x104>)
 80044c8:	4413      	add	r3, r2
 80044ca:	4299      	cmp	r1, r3
 80044cc:	d101      	bne.n	80044d2 <xTaskPriorityInherit+0x56>
 80044ce:	2301      	movs	r3, #1
 80044d0:	e000      	b.n	80044d4 <xTaskPriorityInherit+0x58>
 80044d2:	2300      	movs	r3, #0
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d03a      	beq.n	800454e <xTaskPriorityInherit+0xd2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	3304      	adds	r3, #4
 80044dc:	4618      	mov	r0, r3
 80044de:	f7fe fc6e 	bl	8002dbe <uxListRemove>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d115      	bne.n	8004514 <xTaskPriorityInherit+0x98>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ec:	4924      	ldr	r1, [pc, #144]	; (8004580 <xTaskPriorityInherit+0x104>)
 80044ee:	4613      	mov	r3, r2
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4413      	add	r3, r2
 80044f4:	009b      	lsls	r3, r3, #2
 80044f6:	440b      	add	r3, r1
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d10a      	bne.n	8004514 <xTaskPriorityInherit+0x98>
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004502:	2201      	movs	r2, #1
 8004504:	fa02 f303 	lsl.w	r3, r2, r3
 8004508:	43da      	mvns	r2, r3
 800450a:	4b1e      	ldr	r3, [pc, #120]	; (8004584 <xTaskPriorityInherit+0x108>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4013      	ands	r3, r2
 8004510:	4a1c      	ldr	r2, [pc, #112]	; (8004584 <xTaskPriorityInherit+0x108>)
 8004512:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004514:	4b19      	ldr	r3, [pc, #100]	; (800457c <xTaskPriorityInherit+0x100>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004522:	2201      	movs	r2, #1
 8004524:	409a      	lsls	r2, r3
 8004526:	4b17      	ldr	r3, [pc, #92]	; (8004584 <xTaskPriorityInherit+0x108>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4313      	orrs	r3, r2
 800452c:	4a15      	ldr	r2, [pc, #84]	; (8004584 <xTaskPriorityInherit+0x108>)
 800452e:	6013      	str	r3, [r2, #0]
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004534:	4613      	mov	r3, r2
 8004536:	009b      	lsls	r3, r3, #2
 8004538:	4413      	add	r3, r2
 800453a:	009b      	lsls	r3, r3, #2
 800453c:	4a10      	ldr	r2, [pc, #64]	; (8004580 <xTaskPriorityInherit+0x104>)
 800453e:	441a      	add	r2, r3
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	3304      	adds	r3, #4
 8004544:	4619      	mov	r1, r3
 8004546:	4610      	mov	r0, r2
 8004548:	f7fe fbde 	bl	8002d08 <vListInsertEnd>
 800454c:	e004      	b.n	8004558 <xTaskPriorityInherit+0xdc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800454e:	4b0b      	ldr	r3, [pc, #44]	; (800457c <xTaskPriorityInherit+0x100>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004558:	2301      	movs	r3, #1
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e008      	b.n	8004570 <xTaskPriorityInherit+0xf4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	4b06      	ldr	r3, [pc, #24]	; (800457c <xTaskPriorityInherit+0x100>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004568:	429a      	cmp	r2, r3
 800456a:	d201      	bcs.n	8004570 <xTaskPriorityInherit+0xf4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800456c:	2301      	movs	r3, #1
 800456e:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004570:	68fb      	ldr	r3, [r7, #12]
	}
 8004572:	4618      	mov	r0, r3
 8004574:	3710      	adds	r7, #16
 8004576:	46bd      	mov	sp, r7
 8004578:	bd80      	pop	{r7, pc}
 800457a:	bf00      	nop
 800457c:	2000052c 	.word	0x2000052c
 8004580:	20000530 	.word	0x20000530
 8004584:	20000634 	.word	0x20000634

08004588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004594:	2300      	movs	r3, #0
 8004596:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d06e      	beq.n	800467c <xTaskPriorityDisinherit+0xf4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800459e:	4b3a      	ldr	r3, [pc, #232]	; (8004688 <xTaskPriorityDisinherit+0x100>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d00a      	beq.n	80045be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80045a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ac:	f383 8811 	msr	BASEPRI, r3
 80045b0:	f3bf 8f6f 	isb	sy
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	60fb      	str	r3, [r7, #12]
}
 80045ba:	bf00      	nop
 80045bc:	e7fe      	b.n	80045bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d10a      	bne.n	80045dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80045c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ca:	f383 8811 	msr	BASEPRI, r3
 80045ce:	f3bf 8f6f 	isb	sy
 80045d2:	f3bf 8f4f 	dsb	sy
 80045d6:	60bb      	str	r3, [r7, #8]
}
 80045d8:	bf00      	nop
 80045da:	e7fe      	b.n	80045da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e0:	1e5a      	subs	r2, r3, #1
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045ee:	429a      	cmp	r2, r3
 80045f0:	d044      	beq.n	800467c <xTaskPriorityDisinherit+0xf4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d140      	bne.n	800467c <xTaskPriorityDisinherit+0xf4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	3304      	adds	r3, #4
 80045fe:	4618      	mov	r0, r3
 8004600:	f7fe fbdd 	bl	8002dbe <uxListRemove>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d115      	bne.n	8004636 <xTaskPriorityDisinherit+0xae>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800460e:	491f      	ldr	r1, [pc, #124]	; (800468c <xTaskPriorityDisinherit+0x104>)
 8004610:	4613      	mov	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	4413      	add	r3, r2
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	440b      	add	r3, r1
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d10a      	bne.n	8004636 <xTaskPriorityDisinherit+0xae>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2201      	movs	r2, #1
 8004626:	fa02 f303 	lsl.w	r3, r2, r3
 800462a:	43da      	mvns	r2, r3
 800462c:	4b18      	ldr	r3, [pc, #96]	; (8004690 <xTaskPriorityDisinherit+0x108>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4013      	ands	r3, r2
 8004632:	4a17      	ldr	r2, [pc, #92]	; (8004690 <xTaskPriorityDisinherit+0x108>)
 8004634:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004642:	f1c3 0207 	rsb	r2, r3, #7
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464e:	2201      	movs	r2, #1
 8004650:	409a      	lsls	r2, r3
 8004652:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <xTaskPriorityDisinherit+0x108>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	4313      	orrs	r3, r2
 8004658:	4a0d      	ldr	r2, [pc, #52]	; (8004690 <xTaskPriorityDisinherit+0x108>)
 800465a:	6013      	str	r3, [r2, #0]
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004660:	4613      	mov	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	4413      	add	r3, r2
 8004666:	009b      	lsls	r3, r3, #2
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <xTaskPriorityDisinherit+0x104>)
 800466a:	441a      	add	r2, r3
 800466c:	693b      	ldr	r3, [r7, #16]
 800466e:	3304      	adds	r3, #4
 8004670:	4619      	mov	r1, r3
 8004672:	4610      	mov	r0, r2
 8004674:	f7fe fb48 	bl	8002d08 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004678:	2301      	movs	r3, #1
 800467a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800467c:	697b      	ldr	r3, [r7, #20]
	}
 800467e:	4618      	mov	r0, r3
 8004680:	3718      	adds	r7, #24
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	2000052c 	.word	0x2000052c
 800468c:	20000530 	.word	0x20000530
 8004690:	20000634 	.word	0x20000634

08004694 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004694:	b580      	push	{r7, lr}
 8004696:	b088      	sub	sp, #32
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80046a2:	2301      	movs	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 8088 	beq.w	80047be <vTaskPriorityDisinheritAfterTimeout+0x12a>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10a      	bne.n	80046cc <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 80046b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046ba:	f383 8811 	msr	BASEPRI, r3
 80046be:	f3bf 8f6f 	isb	sy
 80046c2:	f3bf 8f4f 	dsb	sy
 80046c6:	60fb      	str	r3, [r7, #12]
}
 80046c8:	bf00      	nop
 80046ca:	e7fe      	b.n	80046ca <vTaskPriorityDisinheritAfterTimeout+0x36>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80046cc:	69bb      	ldr	r3, [r7, #24]
 80046ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d0:	683a      	ldr	r2, [r7, #0]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d902      	bls.n	80046dc <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	61fb      	str	r3, [r7, #28]
 80046da:	e002      	b.n	80046e2 <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80046dc:	69bb      	ldr	r3, [r7, #24]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80046e2:	69bb      	ldr	r3, [r7, #24]
 80046e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e6:	69fa      	ldr	r2, [r7, #28]
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d068      	beq.n	80047be <vTaskPriorityDisinheritAfterTimeout+0x12a>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80046ec:	69bb      	ldr	r3, [r7, #24]
 80046ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d163      	bne.n	80047be <vTaskPriorityDisinheritAfterTimeout+0x12a>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80046f6:	4b34      	ldr	r3, [pc, #208]	; (80047c8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d10a      	bne.n	8004716 <vTaskPriorityDisinheritAfterTimeout+0x82>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	60bb      	str	r3, [r7, #8]
}
 8004712:	bf00      	nop
 8004714:	e7fe      	b.n	8004714 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004716:	69bb      	ldr	r3, [r7, #24]
 8004718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800471a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800471c:	69bb      	ldr	r3, [r7, #24]
 800471e:	69fa      	ldr	r2, [r7, #28]
 8004720:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	2b00      	cmp	r3, #0
 8004728:	db04      	blt.n	8004734 <vTaskPriorityDisinheritAfterTimeout+0xa0>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	f1c3 0207 	rsb	r2, r3, #7
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	6959      	ldr	r1, [r3, #20]
 8004738:	693a      	ldr	r2, [r7, #16]
 800473a:	4613      	mov	r3, r2
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4a22      	ldr	r2, [pc, #136]	; (80047cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8004744:	4413      	add	r3, r2
 8004746:	4299      	cmp	r1, r3
 8004748:	d101      	bne.n	800474e <vTaskPriorityDisinheritAfterTimeout+0xba>
 800474a:	2301      	movs	r3, #1
 800474c:	e000      	b.n	8004750 <vTaskPriorityDisinheritAfterTimeout+0xbc>
 800474e:	2300      	movs	r3, #0
 8004750:	2b00      	cmp	r3, #0
 8004752:	d034      	beq.n	80047be <vTaskPriorityDisinheritAfterTimeout+0x12a>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7fe fb30 	bl	8002dbe <uxListRemove>
 800475e:	4603      	mov	r3, r0
 8004760:	2b00      	cmp	r3, #0
 8004762:	d115      	bne.n	8004790 <vTaskPriorityDisinheritAfterTimeout+0xfc>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004768:	4918      	ldr	r1, [pc, #96]	; (80047cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800476a:	4613      	mov	r3, r2
 800476c:	009b      	lsls	r3, r3, #2
 800476e:	4413      	add	r3, r2
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	440b      	add	r3, r1
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10a      	bne.n	8004790 <vTaskPriorityDisinheritAfterTimeout+0xfc>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800477e:	2201      	movs	r2, #1
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43da      	mvns	r2, r3
 8004786:	4b12      	ldr	r3, [pc, #72]	; (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4013      	ands	r3, r2
 800478c:	4a10      	ldr	r2, [pc, #64]	; (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800478e:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	2201      	movs	r2, #1
 8004796:	409a      	lsls	r2, r3
 8004798:	4b0d      	ldr	r3, [pc, #52]	; (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4313      	orrs	r3, r2
 800479e:	4a0c      	ldr	r2, [pc, #48]	; (80047d0 <vTaskPriorityDisinheritAfterTimeout+0x13c>)
 80047a0:	6013      	str	r3, [r2, #0]
 80047a2:	69bb      	ldr	r3, [r7, #24]
 80047a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a6:	4613      	mov	r3, r2
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4413      	add	r3, r2
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	4a07      	ldr	r2, [pc, #28]	; (80047cc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 80047b0:	441a      	add	r2, r3
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4619      	mov	r1, r3
 80047b8:	4610      	mov	r0, r2
 80047ba:	f7fe faa5 	bl	8002d08 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047be:	bf00      	nop
 80047c0:	3720      	adds	r7, #32
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}
 80047c6:	bf00      	nop
 80047c8:	2000052c 	.word	0x2000052c
 80047cc:	20000530 	.word	0x20000530
 80047d0:	20000634 	.word	0x20000634

080047d4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 80047d4:	b480      	push	{r7}
 80047d6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d004      	beq.n	80047ea <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80047e0:	4b05      	ldr	r3, [pc, #20]	; (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047e6:	3201      	adds	r2, #1
 80047e8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80047ea:	4b03      	ldr	r3, [pc, #12]	; (80047f8 <pvTaskIncrementMutexHeldCount+0x24>)
 80047ec:	681b      	ldr	r3, [r3, #0]
	}
 80047ee:	4618      	mov	r0, r3
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bc80      	pop	{r7}
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	2000052c 	.word	0x2000052c

080047fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <prvAddCurrentTaskToDelayedList+0xb0>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800480c:	4b28      	ldr	r3, [pc, #160]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	3304      	adds	r3, #4
 8004812:	4618      	mov	r0, r3
 8004814:	f7fe fad3 	bl	8002dbe <uxListRemove>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10b      	bne.n	8004836 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800481e:	4b24      	ldr	r3, [pc, #144]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004824:	2201      	movs	r2, #1
 8004826:	fa02 f303 	lsl.w	r3, r2, r3
 800482a:	43da      	mvns	r2, r3
 800482c:	4b21      	ldr	r3, [pc, #132]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4013      	ands	r3, r2
 8004832:	4a20      	ldr	r2, [pc, #128]	; (80048b4 <prvAddCurrentTaskToDelayedList+0xb8>)
 8004834:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483c:	d10a      	bne.n	8004854 <prvAddCurrentTaskToDelayedList+0x58>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d007      	beq.n	8004854 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004844:	4b1a      	ldr	r3, [pc, #104]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3304      	adds	r3, #4
 800484a:	4619      	mov	r1, r3
 800484c:	481a      	ldr	r0, [pc, #104]	; (80048b8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800484e:	f7fe fa5b 	bl	8002d08 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004852:	e026      	b.n	80048a2 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4413      	add	r3, r2
 800485a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800485c:	4b14      	ldr	r3, [pc, #80]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	68ba      	ldr	r2, [r7, #8]
 8004862:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004864:	68ba      	ldr	r2, [r7, #8]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	429a      	cmp	r2, r3
 800486a:	d209      	bcs.n	8004880 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <prvAddCurrentTaskToDelayedList+0xc0>)
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	4b0f      	ldr	r3, [pc, #60]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3304      	adds	r3, #4
 8004876:	4619      	mov	r1, r3
 8004878:	4610      	mov	r0, r2
 800487a:	f7fe fa68 	bl	8002d4e <vListInsert>
}
 800487e:	e010      	b.n	80048a2 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004880:	4b0f      	ldr	r3, [pc, #60]	; (80048c0 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	4b0a      	ldr	r3, [pc, #40]	; (80048b0 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	3304      	adds	r3, #4
 800488a:	4619      	mov	r1, r3
 800488c:	4610      	mov	r0, r2
 800488e:	f7fe fa5e 	bl	8002d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	68ba      	ldr	r2, [r7, #8]
 8004898:	429a      	cmp	r2, r3
 800489a:	d202      	bcs.n	80048a2 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800489c:	4a09      	ldr	r2, [pc, #36]	; (80048c4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6013      	str	r3, [r2, #0]
}
 80048a2:	bf00      	nop
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	20000630 	.word	0x20000630
 80048b0:	2000052c 	.word	0x2000052c
 80048b4:	20000634 	.word	0x20000634
 80048b8:	20000618 	.word	0x20000618
 80048bc:	200005e8 	.word	0x200005e8
 80048c0:	200005e4 	.word	0x200005e4
 80048c4:	2000064c 	.word	0x2000064c

080048c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3b04      	subs	r3, #4
 80048d8:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	3b04      	subs	r3, #4
 80048e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	f023 0201 	bic.w	r2, r3, #1
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	3b04      	subs	r3, #4
 80048f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048f8:	4a08      	ldr	r2, [pc, #32]	; (800491c <pxPortInitialiseStack+0x54>)
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	3b14      	subs	r3, #20
 8004902:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	3b20      	subs	r3, #32
 800490e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004910:	68fb      	ldr	r3, [r7, #12]
}
 8004912:	4618      	mov	r0, r3
 8004914:	3714      	adds	r7, #20
 8004916:	46bd      	mov	sp, r7
 8004918:	bc80      	pop	{r7}
 800491a:	4770      	bx	lr
 800491c:	08004921 	.word	0x08004921

08004920 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004920:	b480      	push	{r7}
 8004922:	b085      	sub	sp, #20
 8004924:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004926:	2300      	movs	r3, #0
 8004928:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800492a:	4b12      	ldr	r3, [pc, #72]	; (8004974 <prvTaskExitError+0x54>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004932:	d00a      	beq.n	800494a <prvTaskExitError+0x2a>
	__asm volatile
 8004934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004938:	f383 8811 	msr	BASEPRI, r3
 800493c:	f3bf 8f6f 	isb	sy
 8004940:	f3bf 8f4f 	dsb	sy
 8004944:	60fb      	str	r3, [r7, #12]
}
 8004946:	bf00      	nop
 8004948:	e7fe      	b.n	8004948 <prvTaskExitError+0x28>
	__asm volatile
 800494a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800494e:	f383 8811 	msr	BASEPRI, r3
 8004952:	f3bf 8f6f 	isb	sy
 8004956:	f3bf 8f4f 	dsb	sy
 800495a:	60bb      	str	r3, [r7, #8]
}
 800495c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800495e:	bf00      	nop
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d0fc      	beq.n	8004960 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004966:	bf00      	nop
 8004968:	bf00      	nop
 800496a:	3714      	adds	r7, #20
 800496c:	46bd      	mov	sp, r7
 800496e:	bc80      	pop	{r7}
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	2000000c 	.word	0x2000000c
	...

08004980 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004980:	4b07      	ldr	r3, [pc, #28]	; (80049a0 <pxCurrentTCBConst2>)
 8004982:	6819      	ldr	r1, [r3, #0]
 8004984:	6808      	ldr	r0, [r1, #0]
 8004986:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800498a:	f380 8809 	msr	PSP, r0
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f04f 0000 	mov.w	r0, #0
 8004996:	f380 8811 	msr	BASEPRI, r0
 800499a:	f04e 0e0d 	orr.w	lr, lr, #13
 800499e:	4770      	bx	lr

080049a0 <pxCurrentTCBConst2>:
 80049a0:	2000052c 	.word	0x2000052c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80049a8:	4806      	ldr	r0, [pc, #24]	; (80049c4 <prvPortStartFirstTask+0x1c>)
 80049aa:	6800      	ldr	r0, [r0, #0]
 80049ac:	6800      	ldr	r0, [r0, #0]
 80049ae:	f380 8808 	msr	MSP, r0
 80049b2:	b662      	cpsie	i
 80049b4:	b661      	cpsie	f
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	f3bf 8f6f 	isb	sy
 80049be:	df00      	svc	0
 80049c0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80049c2:	bf00      	nop
 80049c4:	e000ed08 	.word	0xe000ed08

080049c8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	b084      	sub	sp, #16
 80049cc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049ce:	4b32      	ldr	r3, [pc, #200]	; (8004a98 <xPortStartScheduler+0xd0>)
 80049d0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	22ff      	movs	r2, #255	; 0xff
 80049de:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	b2db      	uxtb	r3, r3
 80049e6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80049e8:	78fb      	ldrb	r3, [r7, #3]
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80049f0:	b2da      	uxtb	r2, r3
 80049f2:	4b2a      	ldr	r3, [pc, #168]	; (8004a9c <xPortStartScheduler+0xd4>)
 80049f4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80049f6:	4b2a      	ldr	r3, [pc, #168]	; (8004aa0 <xPortStartScheduler+0xd8>)
 80049f8:	2207      	movs	r2, #7
 80049fa:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049fc:	e009      	b.n	8004a12 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80049fe:	4b28      	ldr	r3, [pc, #160]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	4a26      	ldr	r2, [pc, #152]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a06:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a08:	78fb      	ldrb	r3, [r7, #3]
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	005b      	lsls	r3, r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a12:	78fb      	ldrb	r3, [r7, #3]
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1a:	2b80      	cmp	r3, #128	; 0x80
 8004a1c:	d0ef      	beq.n	80049fe <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a1e:	4b20      	ldr	r3, [pc, #128]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f1c3 0307 	rsb	r3, r3, #7
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d00a      	beq.n	8004a40 <xPortStartScheduler+0x78>
	__asm volatile
 8004a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a2e:	f383 8811 	msr	BASEPRI, r3
 8004a32:	f3bf 8f6f 	isb	sy
 8004a36:	f3bf 8f4f 	dsb	sy
 8004a3a:	60bb      	str	r3, [r7, #8]
}
 8004a3c:	bf00      	nop
 8004a3e:	e7fe      	b.n	8004a3e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a40:	4b17      	ldr	r3, [pc, #92]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	021b      	lsls	r3, r3, #8
 8004a46:	4a16      	ldr	r2, [pc, #88]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a48:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a52:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <xPortStartScheduler+0xd8>)
 8004a54:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	b2da      	uxtb	r2, r3
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a5e:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a10      	ldr	r2, [pc, #64]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a68:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a6a:	4b0e      	ldr	r3, [pc, #56]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a0d      	ldr	r2, [pc, #52]	; (8004aa4 <xPortStartScheduler+0xdc>)
 8004a70:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a74:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a76:	f000 f8b9 	bl	8004bec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <xPortStartScheduler+0xe0>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004a80:	f7ff ff92 	bl	80049a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004a84:	f7ff fa9e 	bl	8003fc4 <vTaskSwitchContext>
	prvTaskExitError();
 8004a88:	f7ff ff4a 	bl	8004920 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}
 8004a96:	bf00      	nop
 8004a98:	e000e400 	.word	0xe000e400
 8004a9c:	20000658 	.word	0x20000658
 8004aa0:	2000065c 	.word	0x2000065c
 8004aa4:	e000ed20 	.word	0xe000ed20
 8004aa8:	2000000c 	.word	0x2000000c

08004aac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
	__asm volatile
 8004ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab6:	f383 8811 	msr	BASEPRI, r3
 8004aba:	f3bf 8f6f 	isb	sy
 8004abe:	f3bf 8f4f 	dsb	sy
 8004ac2:	607b      	str	r3, [r7, #4]
}
 8004ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004ac6:	4b0f      	ldr	r3, [pc, #60]	; (8004b04 <vPortEnterCritical+0x58>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3301      	adds	r3, #1
 8004acc:	4a0d      	ldr	r2, [pc, #52]	; (8004b04 <vPortEnterCritical+0x58>)
 8004ace:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004ad0:	4b0c      	ldr	r3, [pc, #48]	; (8004b04 <vPortEnterCritical+0x58>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d10f      	bne.n	8004af8 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004ad8:	4b0b      	ldr	r3, [pc, #44]	; (8004b08 <vPortEnterCritical+0x5c>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00a      	beq.n	8004af8 <vPortEnterCritical+0x4c>
	__asm volatile
 8004ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ae6:	f383 8811 	msr	BASEPRI, r3
 8004aea:	f3bf 8f6f 	isb	sy
 8004aee:	f3bf 8f4f 	dsb	sy
 8004af2:	603b      	str	r3, [r7, #0]
}
 8004af4:	bf00      	nop
 8004af6:	e7fe      	b.n	8004af6 <vPortEnterCritical+0x4a>
	}
}
 8004af8:	bf00      	nop
 8004afa:	370c      	adds	r7, #12
 8004afc:	46bd      	mov	sp, r7
 8004afe:	bc80      	pop	{r7}
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop
 8004b04:	2000000c 	.word	0x2000000c
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b083      	sub	sp, #12
 8004b10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b12:	4b11      	ldr	r3, [pc, #68]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10a      	bne.n	8004b30 <vPortExitCritical+0x24>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	607b      	str	r3, [r7, #4]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b30:	4b09      	ldr	r3, [pc, #36]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	4a08      	ldr	r2, [pc, #32]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b38:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b3a:	4b07      	ldr	r3, [pc, #28]	; (8004b58 <vPortExitCritical+0x4c>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d105      	bne.n	8004b4e <vPortExitCritical+0x42>
 8004b42:	2300      	movs	r3, #0
 8004b44:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	f383 8811 	msr	BASEPRI, r3
}
 8004b4c:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b4e:	bf00      	nop
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	2000000c 	.word	0x2000000c
 8004b5c:	00000000 	.word	0x00000000

08004b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004b60:	f3ef 8009 	mrs	r0, PSP
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <pxCurrentTCBConst>)
 8004b6a:	681a      	ldr	r2, [r3, #0]
 8004b6c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b70:	6010      	str	r0, [r2, #0]
 8004b72:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004b76:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b7a:	f380 8811 	msr	BASEPRI, r0
 8004b7e:	f7ff fa21 	bl	8003fc4 <vTaskSwitchContext>
 8004b82:	f04f 0000 	mov.w	r0, #0
 8004b86:	f380 8811 	msr	BASEPRI, r0
 8004b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004b8e:	6819      	ldr	r1, [r3, #0]
 8004b90:	6808      	ldr	r0, [r1, #0]
 8004b92:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004b96:	f380 8809 	msr	PSP, r0
 8004b9a:	f3bf 8f6f 	isb	sy
 8004b9e:	4770      	bx	lr

08004ba0 <pxCurrentTCBConst>:
 8004ba0:	2000052c 	.word	0x2000052c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ba4:	bf00      	nop
 8004ba6:	bf00      	nop

08004ba8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
	__asm volatile
 8004bae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb2:	f383 8811 	msr	BASEPRI, r3
 8004bb6:	f3bf 8f6f 	isb	sy
 8004bba:	f3bf 8f4f 	dsb	sy
 8004bbe:	607b      	str	r3, [r7, #4]
}
 8004bc0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004bc2:	f7ff f941 	bl	8003e48 <xTaskIncrementTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <SysTick_Handler+0x40>)
 8004bce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bd2:	601a      	str	r2, [r3, #0]
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f383 8811 	msr	BASEPRI, r3
}
 8004bde:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004be0:	bf00      	nop
 8004be2:	3708      	adds	r7, #8
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	e000ed04 	.word	0xe000ed04

08004bec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004bf0:	4b0a      	ldr	r3, [pc, #40]	; (8004c1c <vPortSetupTimerInterrupt+0x30>)
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004bf6:	4b0a      	ldr	r3, [pc, #40]	; (8004c20 <vPortSetupTimerInterrupt+0x34>)
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004bfc:	4b09      	ldr	r3, [pc, #36]	; (8004c24 <vPortSetupTimerInterrupt+0x38>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a09      	ldr	r2, [pc, #36]	; (8004c28 <vPortSetupTimerInterrupt+0x3c>)
 8004c02:	fba2 2303 	umull	r2, r3, r2, r3
 8004c06:	099b      	lsrs	r3, r3, #6
 8004c08:	4a08      	ldr	r2, [pc, #32]	; (8004c2c <vPortSetupTimerInterrupt+0x40>)
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c0e:	4b03      	ldr	r3, [pc, #12]	; (8004c1c <vPortSetupTimerInterrupt+0x30>)
 8004c10:	2207      	movs	r2, #7
 8004c12:	601a      	str	r2, [r3, #0]
}
 8004c14:	bf00      	nop
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bc80      	pop	{r7}
 8004c1a:	4770      	bx	lr
 8004c1c:	e000e010 	.word	0xe000e010
 8004c20:	e000e018 	.word	0xe000e018
 8004c24:	20000000 	.word	0x20000000
 8004c28:	10624dd3 	.word	0x10624dd3
 8004c2c:	e000e014 	.word	0xe000e014

08004c30 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004c30:	b480      	push	{r7}
 8004c32:	b085      	sub	sp, #20
 8004c34:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004c36:	f3ef 8305 	mrs	r3, IPSR
 8004c3a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b0f      	cmp	r3, #15
 8004c40:	d914      	bls.n	8004c6c <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004c42:	4a16      	ldr	r2, [pc, #88]	; (8004c9c <vPortValidateInterruptPriority+0x6c>)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	4413      	add	r3, r2
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004c4c:	4b14      	ldr	r3, [pc, #80]	; (8004ca0 <vPortValidateInterruptPriority+0x70>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	7afa      	ldrb	r2, [r7, #11]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d20a      	bcs.n	8004c6c <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	607b      	str	r3, [r7, #4]
}
 8004c68:	bf00      	nop
 8004c6a:	e7fe      	b.n	8004c6a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ca4 <vPortValidateInterruptPriority+0x74>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c74:	4b0c      	ldr	r3, [pc, #48]	; (8004ca8 <vPortValidateInterruptPriority+0x78>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d90a      	bls.n	8004c92 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c80:	f383 8811 	msr	BASEPRI, r3
 8004c84:	f3bf 8f6f 	isb	sy
 8004c88:	f3bf 8f4f 	dsb	sy
 8004c8c:	603b      	str	r3, [r7, #0]
}
 8004c8e:	bf00      	nop
 8004c90:	e7fe      	b.n	8004c90 <vPortValidateInterruptPriority+0x60>
	}
 8004c92:	bf00      	nop
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	bc80      	pop	{r7}
 8004c9a:	4770      	bx	lr
 8004c9c:	e000e3f0 	.word	0xe000e3f0
 8004ca0:	20000658 	.word	0x20000658
 8004ca4:	e000ed0c 	.word	0xe000ed0c
 8004ca8:	2000065c 	.word	0x2000065c

08004cac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b08a      	sub	sp, #40	; 0x28
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004cb8:	f7ff f81c 	bl	8003cf4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004cbc:	4b58      	ldr	r3, [pc, #352]	; (8004e20 <pvPortMalloc+0x174>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d101      	bne.n	8004cc8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004cc4:	f000 f910 	bl	8004ee8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004cc8:	4b56      	ldr	r3, [pc, #344]	; (8004e24 <pvPortMalloc+0x178>)
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4013      	ands	r3, r2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	f040 808e 	bne.w	8004df2 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d01d      	beq.n	8004d18 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004cdc:	2208      	movs	r2, #8
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4413      	add	r3, r2
 8004ce2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f003 0307 	and.w	r3, r3, #7
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d014      	beq.n	8004d18 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f023 0307 	bic.w	r3, r3, #7
 8004cf4:	3308      	adds	r3, #8
 8004cf6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f003 0307 	and.w	r3, r3, #7
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d00a      	beq.n	8004d18 <pvPortMalloc+0x6c>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	617b      	str	r3, [r7, #20]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d069      	beq.n	8004df2 <pvPortMalloc+0x146>
 8004d1e:	4b42      	ldr	r3, [pc, #264]	; (8004e28 <pvPortMalloc+0x17c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d864      	bhi.n	8004df2 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004d28:	4b40      	ldr	r3, [pc, #256]	; (8004e2c <pvPortMalloc+0x180>)
 8004d2a:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004d2c:	4b3f      	ldr	r3, [pc, #252]	; (8004e2c <pvPortMalloc+0x180>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d32:	e004      	b.n	8004d3e <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d36:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d903      	bls.n	8004d50 <pvPortMalloc+0xa4>
 8004d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f1      	bne.n	8004d34 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d50:	4b33      	ldr	r3, [pc, #204]	; (8004e20 <pvPortMalloc+0x174>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d56:	429a      	cmp	r2, r3
 8004d58:	d04b      	beq.n	8004df2 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2208      	movs	r2, #8
 8004d60:	4413      	add	r3, r2
 8004d62:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	6a3b      	ldr	r3, [r7, #32]
 8004d6a:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6e:	685a      	ldr	r2, [r3, #4]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	1ad2      	subs	r2, r2, r3
 8004d74:	2308      	movs	r3, #8
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d91f      	bls.n	8004dbc <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4413      	add	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f003 0307 	and.w	r3, r3, #7
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <pvPortMalloc+0xf8>
	__asm volatile
 8004d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d92:	f383 8811 	msr	BASEPRI, r3
 8004d96:	f3bf 8f6f 	isb	sy
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	613b      	str	r3, [r7, #16]
}
 8004da0:	bf00      	nop
 8004da2:	e7fe      	b.n	8004da2 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da6:	685a      	ldr	r2, [r3, #4]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	1ad2      	subs	r2, r2, r3
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004db6:	69b8      	ldr	r0, [r7, #24]
 8004db8:	f000 f8f8 	bl	8004fac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004dbc:	4b1a      	ldr	r3, [pc, #104]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	4a18      	ldr	r2, [pc, #96]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dc8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004dca:	4b17      	ldr	r3, [pc, #92]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	4b18      	ldr	r3, [pc, #96]	; (8004e30 <pvPortMalloc+0x184>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d203      	bcs.n	8004dde <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004dd6:	4b14      	ldr	r3, [pc, #80]	; (8004e28 <pvPortMalloc+0x17c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <pvPortMalloc+0x184>)
 8004ddc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de0:	685a      	ldr	r2, [r3, #4]
 8004de2:	4b10      	ldr	r3, [pc, #64]	; (8004e24 <pvPortMalloc+0x178>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	431a      	orrs	r2, r3
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004df2:	f7fe ff8d 	bl	8003d10 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004df6:	69fb      	ldr	r3, [r7, #28]
 8004df8:	f003 0307 	and.w	r3, r3, #7
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d00a      	beq.n	8004e16 <pvPortMalloc+0x16a>
	__asm volatile
 8004e00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e04:	f383 8811 	msr	BASEPRI, r3
 8004e08:	f3bf 8f6f 	isb	sy
 8004e0c:	f3bf 8f4f 	dsb	sy
 8004e10:	60fb      	str	r3, [r7, #12]
}
 8004e12:	bf00      	nop
 8004e14:	e7fe      	b.n	8004e14 <pvPortMalloc+0x168>
	return pvReturn;
 8004e16:	69fb      	ldr	r3, [r7, #28]
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3728      	adds	r7, #40	; 0x28
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	20001268 	.word	0x20001268
 8004e24:	20001274 	.word	0x20001274
 8004e28:	2000126c 	.word	0x2000126c
 8004e2c:	20001260 	.word	0x20001260
 8004e30:	20001270 	.word	0x20001270

08004e34 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b086      	sub	sp, #24
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d048      	beq.n	8004ed8 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004e46:	2308      	movs	r3, #8
 8004e48:	425b      	negs	r3, r3
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4413      	add	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e50:	697b      	ldr	r3, [r7, #20]
 8004e52:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	685a      	ldr	r2, [r3, #4]
 8004e58:	4b21      	ldr	r3, [pc, #132]	; (8004ee0 <vPortFree+0xac>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10a      	bne.n	8004e78 <vPortFree+0x44>
	__asm volatile
 8004e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e66:	f383 8811 	msr	BASEPRI, r3
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	f3bf 8f4f 	dsb	sy
 8004e72:	60fb      	str	r3, [r7, #12]
}
 8004e74:	bf00      	nop
 8004e76:	e7fe      	b.n	8004e76 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d00a      	beq.n	8004e96 <vPortFree+0x62>
	__asm volatile
 8004e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e84:	f383 8811 	msr	BASEPRI, r3
 8004e88:	f3bf 8f6f 	isb	sy
 8004e8c:	f3bf 8f4f 	dsb	sy
 8004e90:	60bb      	str	r3, [r7, #8]
}
 8004e92:	bf00      	nop
 8004e94:	e7fe      	b.n	8004e94 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <vPortFree+0xac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d019      	beq.n	8004ed8 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d115      	bne.n	8004ed8 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	685a      	ldr	r2, [r3, #4]
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <vPortFree+0xac>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	43db      	mvns	r3, r3
 8004eb6:	401a      	ands	r2, r3
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004ebc:	f7fe ff1a 	bl	8003cf4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	4b07      	ldr	r3, [pc, #28]	; (8004ee4 <vPortFree+0xb0>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4413      	add	r3, r2
 8004eca:	4a06      	ldr	r2, [pc, #24]	; (8004ee4 <vPortFree+0xb0>)
 8004ecc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ece:	6938      	ldr	r0, [r7, #16]
 8004ed0:	f000 f86c 	bl	8004fac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004ed4:	f7fe ff1c 	bl	8003d10 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004ed8:	bf00      	nop
 8004eda:	3718      	adds	r7, #24
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20001274 	.word	0x20001274
 8004ee4:	2000126c 	.word	0x2000126c

08004ee8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eee:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004ef2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ef4:	4b27      	ldr	r3, [pc, #156]	; (8004f94 <prvHeapInit+0xac>)
 8004ef6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f003 0307 	and.w	r3, r3, #7
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d00c      	beq.n	8004f1c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	3307      	adds	r3, #7
 8004f06:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 0307 	bic.w	r3, r3, #7
 8004f0e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f10:	68ba      	ldr	r2, [r7, #8]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	1ad3      	subs	r3, r2, r3
 8004f16:	4a1f      	ldr	r2, [pc, #124]	; (8004f94 <prvHeapInit+0xac>)
 8004f18:	4413      	add	r3, r2
 8004f1a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f20:	4a1d      	ldr	r2, [pc, #116]	; (8004f98 <prvHeapInit+0xb0>)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004f26:	4b1c      	ldr	r3, [pc, #112]	; (8004f98 <prvHeapInit+0xb0>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68ba      	ldr	r2, [r7, #8]
 8004f30:	4413      	add	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004f34:	2208      	movs	r2, #8
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	1a9b      	subs	r3, r3, r2
 8004f3a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f023 0307 	bic.w	r3, r3, #7
 8004f42:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4a15      	ldr	r2, [pc, #84]	; (8004f9c <prvHeapInit+0xb4>)
 8004f48:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f4a:	4b14      	ldr	r3, [pc, #80]	; (8004f9c <prvHeapInit+0xb4>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f52:	4b12      	ldr	r3, [pc, #72]	; (8004f9c <prvHeapInit+0xb4>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	1ad2      	subs	r2, r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f68:	4b0c      	ldr	r3, [pc, #48]	; (8004f9c <prvHeapInit+0xb4>)
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	4a0a      	ldr	r2, [pc, #40]	; (8004fa0 <prvHeapInit+0xb8>)
 8004f76:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	685b      	ldr	r3, [r3, #4]
 8004f7c:	4a09      	ldr	r2, [pc, #36]	; (8004fa4 <prvHeapInit+0xbc>)
 8004f7e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <prvHeapInit+0xc0>)
 8004f82:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f86:	601a      	str	r2, [r3, #0]
}
 8004f88:	bf00      	nop
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bc80      	pop	{r7}
 8004f90:	4770      	bx	lr
 8004f92:	bf00      	nop
 8004f94:	20000660 	.word	0x20000660
 8004f98:	20001260 	.word	0x20001260
 8004f9c:	20001268 	.word	0x20001268
 8004fa0:	20001270 	.word	0x20001270
 8004fa4:	2000126c 	.word	0x2000126c
 8004fa8:	20001274 	.word	0x20001274

08004fac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004fac:	b480      	push	{r7}
 8004fae:	b085      	sub	sp, #20
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004fb4:	4b27      	ldr	r3, [pc, #156]	; (8005054 <prvInsertBlockIntoFreeList+0xa8>)
 8004fb6:	60fb      	str	r3, [r7, #12]
 8004fb8:	e002      	b.n	8004fc0 <prvInsertBlockIntoFreeList+0x14>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	60fb      	str	r3, [r7, #12]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d8f7      	bhi.n	8004fba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	68ba      	ldr	r2, [r7, #8]
 8004fd4:	4413      	add	r3, r2
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d108      	bne.n	8004fee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685a      	ldr	r2, [r3, #4]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	441a      	add	r2, r3
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	68ba      	ldr	r2, [r7, #8]
 8004ff8:	441a      	add	r2, r3
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	429a      	cmp	r2, r3
 8005000:	d118      	bne.n	8005034 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681a      	ldr	r2, [r3, #0]
 8005006:	4b14      	ldr	r3, [pc, #80]	; (8005058 <prvInsertBlockIntoFreeList+0xac>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d00d      	beq.n	800502a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	685a      	ldr	r2, [r3, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	441a      	add	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	681a      	ldr	r2, [r3, #0]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	e008      	b.n	800503c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800502a:	4b0b      	ldr	r3, [pc, #44]	; (8005058 <prvInsertBlockIntoFreeList+0xac>)
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	601a      	str	r2, [r3, #0]
 8005032:	e003      	b.n	800503c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800503c:	68fa      	ldr	r2, [r7, #12]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d002      	beq.n	800504a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	687a      	ldr	r2, [r7, #4]
 8005048:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	bc80      	pop	{r7}
 8005052:	4770      	bx	lr
 8005054:	20001260 	.word	0x20001260
 8005058:	20001268 	.word	0x20001268

0800505c <__errno>:
 800505c:	4b01      	ldr	r3, [pc, #4]	; (8005064 <__errno+0x8>)
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000010 	.word	0x20000010

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	2600      	movs	r6, #0
 800506c:	4d0c      	ldr	r5, [pc, #48]	; (80050a0 <__libc_init_array+0x38>)
 800506e:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 8005070:	1b64      	subs	r4, r4, r5
 8005072:	10a4      	asrs	r4, r4, #2
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	f000 fc9c 	bl	80059b4 <_init>
 800507c:	2600      	movs	r6, #0
 800507e:	4d0a      	ldr	r5, [pc, #40]	; (80050a8 <__libc_init_array+0x40>)
 8005080:	4c0a      	ldr	r4, [pc, #40]	; (80050ac <__libc_init_array+0x44>)
 8005082:	1b64      	subs	r4, r4, r5
 8005084:	10a4      	asrs	r4, r4, #2
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	08005aa8 	.word	0x08005aa8
 80050a4:	08005aa8 	.word	0x08005aa8
 80050a8:	08005aa8 	.word	0x08005aa8
 80050ac:	08005aac 	.word	0x08005aac

080050b0 <memcpy>:
 80050b0:	440a      	add	r2, r1
 80050b2:	4291      	cmp	r1, r2
 80050b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80050b8:	d100      	bne.n	80050bc <memcpy+0xc>
 80050ba:	4770      	bx	lr
 80050bc:	b510      	push	{r4, lr}
 80050be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80050c2:	4291      	cmp	r1, r2
 80050c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80050c8:	d1f9      	bne.n	80050be <memcpy+0xe>
 80050ca:	bd10      	pop	{r4, pc}

080050cc <memset>:
 80050cc:	4603      	mov	r3, r0
 80050ce:	4402      	add	r2, r0
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d100      	bne.n	80050d6 <memset+0xa>
 80050d4:	4770      	bx	lr
 80050d6:	f803 1b01 	strb.w	r1, [r3], #1
 80050da:	e7f9      	b.n	80050d0 <memset+0x4>

080050dc <siprintf>:
 80050dc:	b40e      	push	{r1, r2, r3}
 80050de:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050e2:	b500      	push	{lr}
 80050e4:	b09c      	sub	sp, #112	; 0x70
 80050e6:	ab1d      	add	r3, sp, #116	; 0x74
 80050e8:	9002      	str	r0, [sp, #8]
 80050ea:	9006      	str	r0, [sp, #24]
 80050ec:	9107      	str	r1, [sp, #28]
 80050ee:	9104      	str	r1, [sp, #16]
 80050f0:	4808      	ldr	r0, [pc, #32]	; (8005114 <siprintf+0x38>)
 80050f2:	4909      	ldr	r1, [pc, #36]	; (8005118 <siprintf+0x3c>)
 80050f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80050f8:	9105      	str	r1, [sp, #20]
 80050fa:	6800      	ldr	r0, [r0, #0]
 80050fc:	a902      	add	r1, sp, #8
 80050fe:	9301      	str	r3, [sp, #4]
 8005100:	f000 f868 	bl	80051d4 <_svfiprintf_r>
 8005104:	2200      	movs	r2, #0
 8005106:	9b02      	ldr	r3, [sp, #8]
 8005108:	701a      	strb	r2, [r3, #0]
 800510a:	b01c      	add	sp, #112	; 0x70
 800510c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005110:	b003      	add	sp, #12
 8005112:	4770      	bx	lr
 8005114:	20000010 	.word	0x20000010
 8005118:	ffff0208 	.word	0xffff0208

0800511c <__ssputs_r>:
 800511c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005120:	688e      	ldr	r6, [r1, #8]
 8005122:	4682      	mov	sl, r0
 8005124:	429e      	cmp	r6, r3
 8005126:	460c      	mov	r4, r1
 8005128:	4690      	mov	r8, r2
 800512a:	461f      	mov	r7, r3
 800512c:	d838      	bhi.n	80051a0 <__ssputs_r+0x84>
 800512e:	898a      	ldrh	r2, [r1, #12]
 8005130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005134:	d032      	beq.n	800519c <__ssputs_r+0x80>
 8005136:	6825      	ldr	r5, [r4, #0]
 8005138:	6909      	ldr	r1, [r1, #16]
 800513a:	3301      	adds	r3, #1
 800513c:	eba5 0901 	sub.w	r9, r5, r1
 8005140:	6965      	ldr	r5, [r4, #20]
 8005142:	444b      	add	r3, r9
 8005144:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005148:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800514c:	106d      	asrs	r5, r5, #1
 800514e:	429d      	cmp	r5, r3
 8005150:	bf38      	it	cc
 8005152:	461d      	movcc	r5, r3
 8005154:	0553      	lsls	r3, r2, #21
 8005156:	d531      	bpl.n	80051bc <__ssputs_r+0xa0>
 8005158:	4629      	mov	r1, r5
 800515a:	f000 fb61 	bl	8005820 <_malloc_r>
 800515e:	4606      	mov	r6, r0
 8005160:	b950      	cbnz	r0, 8005178 <__ssputs_r+0x5c>
 8005162:	230c      	movs	r3, #12
 8005164:	f04f 30ff 	mov.w	r0, #4294967295
 8005168:	f8ca 3000 	str.w	r3, [sl]
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005172:	81a3      	strh	r3, [r4, #12]
 8005174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005178:	464a      	mov	r2, r9
 800517a:	6921      	ldr	r1, [r4, #16]
 800517c:	f7ff ff98 	bl	80050b0 <memcpy>
 8005180:	89a3      	ldrh	r3, [r4, #12]
 8005182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800518a:	81a3      	strh	r3, [r4, #12]
 800518c:	6126      	str	r6, [r4, #16]
 800518e:	444e      	add	r6, r9
 8005190:	6026      	str	r6, [r4, #0]
 8005192:	463e      	mov	r6, r7
 8005194:	6165      	str	r5, [r4, #20]
 8005196:	eba5 0509 	sub.w	r5, r5, r9
 800519a:	60a5      	str	r5, [r4, #8]
 800519c:	42be      	cmp	r6, r7
 800519e:	d900      	bls.n	80051a2 <__ssputs_r+0x86>
 80051a0:	463e      	mov	r6, r7
 80051a2:	4632      	mov	r2, r6
 80051a4:	4641      	mov	r1, r8
 80051a6:	6820      	ldr	r0, [r4, #0]
 80051a8:	f000 fab8 	bl	800571c <memmove>
 80051ac:	68a3      	ldr	r3, [r4, #8]
 80051ae:	2000      	movs	r0, #0
 80051b0:	1b9b      	subs	r3, r3, r6
 80051b2:	60a3      	str	r3, [r4, #8]
 80051b4:	6823      	ldr	r3, [r4, #0]
 80051b6:	4433      	add	r3, r6
 80051b8:	6023      	str	r3, [r4, #0]
 80051ba:	e7db      	b.n	8005174 <__ssputs_r+0x58>
 80051bc:	462a      	mov	r2, r5
 80051be:	f000 fba3 	bl	8005908 <_realloc_r>
 80051c2:	4606      	mov	r6, r0
 80051c4:	2800      	cmp	r0, #0
 80051c6:	d1e1      	bne.n	800518c <__ssputs_r+0x70>
 80051c8:	4650      	mov	r0, sl
 80051ca:	6921      	ldr	r1, [r4, #16]
 80051cc:	f000 fac0 	bl	8005750 <_free_r>
 80051d0:	e7c7      	b.n	8005162 <__ssputs_r+0x46>
	...

080051d4 <_svfiprintf_r>:
 80051d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051d8:	4698      	mov	r8, r3
 80051da:	898b      	ldrh	r3, [r1, #12]
 80051dc:	4607      	mov	r7, r0
 80051de:	061b      	lsls	r3, r3, #24
 80051e0:	460d      	mov	r5, r1
 80051e2:	4614      	mov	r4, r2
 80051e4:	b09d      	sub	sp, #116	; 0x74
 80051e6:	d50e      	bpl.n	8005206 <_svfiprintf_r+0x32>
 80051e8:	690b      	ldr	r3, [r1, #16]
 80051ea:	b963      	cbnz	r3, 8005206 <_svfiprintf_r+0x32>
 80051ec:	2140      	movs	r1, #64	; 0x40
 80051ee:	f000 fb17 	bl	8005820 <_malloc_r>
 80051f2:	6028      	str	r0, [r5, #0]
 80051f4:	6128      	str	r0, [r5, #16]
 80051f6:	b920      	cbnz	r0, 8005202 <_svfiprintf_r+0x2e>
 80051f8:	230c      	movs	r3, #12
 80051fa:	603b      	str	r3, [r7, #0]
 80051fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005200:	e0d1      	b.n	80053a6 <_svfiprintf_r+0x1d2>
 8005202:	2340      	movs	r3, #64	; 0x40
 8005204:	616b      	str	r3, [r5, #20]
 8005206:	2300      	movs	r3, #0
 8005208:	9309      	str	r3, [sp, #36]	; 0x24
 800520a:	2320      	movs	r3, #32
 800520c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005210:	2330      	movs	r3, #48	; 0x30
 8005212:	f04f 0901 	mov.w	r9, #1
 8005216:	f8cd 800c 	str.w	r8, [sp, #12]
 800521a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80053c0 <_svfiprintf_r+0x1ec>
 800521e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005222:	4623      	mov	r3, r4
 8005224:	469a      	mov	sl, r3
 8005226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800522a:	b10a      	cbz	r2, 8005230 <_svfiprintf_r+0x5c>
 800522c:	2a25      	cmp	r2, #37	; 0x25
 800522e:	d1f9      	bne.n	8005224 <_svfiprintf_r+0x50>
 8005230:	ebba 0b04 	subs.w	fp, sl, r4
 8005234:	d00b      	beq.n	800524e <_svfiprintf_r+0x7a>
 8005236:	465b      	mov	r3, fp
 8005238:	4622      	mov	r2, r4
 800523a:	4629      	mov	r1, r5
 800523c:	4638      	mov	r0, r7
 800523e:	f7ff ff6d 	bl	800511c <__ssputs_r>
 8005242:	3001      	adds	r0, #1
 8005244:	f000 80aa 	beq.w	800539c <_svfiprintf_r+0x1c8>
 8005248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800524a:	445a      	add	r2, fp
 800524c:	9209      	str	r2, [sp, #36]	; 0x24
 800524e:	f89a 3000 	ldrb.w	r3, [sl]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f000 80a2 	beq.w	800539c <_svfiprintf_r+0x1c8>
 8005258:	2300      	movs	r3, #0
 800525a:	f04f 32ff 	mov.w	r2, #4294967295
 800525e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005262:	f10a 0a01 	add.w	sl, sl, #1
 8005266:	9304      	str	r3, [sp, #16]
 8005268:	9307      	str	r3, [sp, #28]
 800526a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800526e:	931a      	str	r3, [sp, #104]	; 0x68
 8005270:	4654      	mov	r4, sl
 8005272:	2205      	movs	r2, #5
 8005274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005278:	4851      	ldr	r0, [pc, #324]	; (80053c0 <_svfiprintf_r+0x1ec>)
 800527a:	f000 fa41 	bl	8005700 <memchr>
 800527e:	9a04      	ldr	r2, [sp, #16]
 8005280:	b9d8      	cbnz	r0, 80052ba <_svfiprintf_r+0xe6>
 8005282:	06d0      	lsls	r0, r2, #27
 8005284:	bf44      	itt	mi
 8005286:	2320      	movmi	r3, #32
 8005288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800528c:	0711      	lsls	r1, r2, #28
 800528e:	bf44      	itt	mi
 8005290:	232b      	movmi	r3, #43	; 0x2b
 8005292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005296:	f89a 3000 	ldrb.w	r3, [sl]
 800529a:	2b2a      	cmp	r3, #42	; 0x2a
 800529c:	d015      	beq.n	80052ca <_svfiprintf_r+0xf6>
 800529e:	4654      	mov	r4, sl
 80052a0:	2000      	movs	r0, #0
 80052a2:	f04f 0c0a 	mov.w	ip, #10
 80052a6:	9a07      	ldr	r2, [sp, #28]
 80052a8:	4621      	mov	r1, r4
 80052aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052ae:	3b30      	subs	r3, #48	; 0x30
 80052b0:	2b09      	cmp	r3, #9
 80052b2:	d94e      	bls.n	8005352 <_svfiprintf_r+0x17e>
 80052b4:	b1b0      	cbz	r0, 80052e4 <_svfiprintf_r+0x110>
 80052b6:	9207      	str	r2, [sp, #28]
 80052b8:	e014      	b.n	80052e4 <_svfiprintf_r+0x110>
 80052ba:	eba0 0308 	sub.w	r3, r0, r8
 80052be:	fa09 f303 	lsl.w	r3, r9, r3
 80052c2:	4313      	orrs	r3, r2
 80052c4:	46a2      	mov	sl, r4
 80052c6:	9304      	str	r3, [sp, #16]
 80052c8:	e7d2      	b.n	8005270 <_svfiprintf_r+0x9c>
 80052ca:	9b03      	ldr	r3, [sp, #12]
 80052cc:	1d19      	adds	r1, r3, #4
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	9103      	str	r1, [sp, #12]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	bfbb      	ittet	lt
 80052d6:	425b      	neglt	r3, r3
 80052d8:	f042 0202 	orrlt.w	r2, r2, #2
 80052dc:	9307      	strge	r3, [sp, #28]
 80052de:	9307      	strlt	r3, [sp, #28]
 80052e0:	bfb8      	it	lt
 80052e2:	9204      	strlt	r2, [sp, #16]
 80052e4:	7823      	ldrb	r3, [r4, #0]
 80052e6:	2b2e      	cmp	r3, #46	; 0x2e
 80052e8:	d10c      	bne.n	8005304 <_svfiprintf_r+0x130>
 80052ea:	7863      	ldrb	r3, [r4, #1]
 80052ec:	2b2a      	cmp	r3, #42	; 0x2a
 80052ee:	d135      	bne.n	800535c <_svfiprintf_r+0x188>
 80052f0:	9b03      	ldr	r3, [sp, #12]
 80052f2:	3402      	adds	r4, #2
 80052f4:	1d1a      	adds	r2, r3, #4
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	9203      	str	r2, [sp, #12]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	bfb8      	it	lt
 80052fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8005302:	9305      	str	r3, [sp, #20]
 8005304:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80053c4 <_svfiprintf_r+0x1f0>
 8005308:	2203      	movs	r2, #3
 800530a:	4650      	mov	r0, sl
 800530c:	7821      	ldrb	r1, [r4, #0]
 800530e:	f000 f9f7 	bl	8005700 <memchr>
 8005312:	b140      	cbz	r0, 8005326 <_svfiprintf_r+0x152>
 8005314:	2340      	movs	r3, #64	; 0x40
 8005316:	eba0 000a 	sub.w	r0, r0, sl
 800531a:	fa03 f000 	lsl.w	r0, r3, r0
 800531e:	9b04      	ldr	r3, [sp, #16]
 8005320:	3401      	adds	r4, #1
 8005322:	4303      	orrs	r3, r0
 8005324:	9304      	str	r3, [sp, #16]
 8005326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800532a:	2206      	movs	r2, #6
 800532c:	4826      	ldr	r0, [pc, #152]	; (80053c8 <_svfiprintf_r+0x1f4>)
 800532e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005332:	f000 f9e5 	bl	8005700 <memchr>
 8005336:	2800      	cmp	r0, #0
 8005338:	d038      	beq.n	80053ac <_svfiprintf_r+0x1d8>
 800533a:	4b24      	ldr	r3, [pc, #144]	; (80053cc <_svfiprintf_r+0x1f8>)
 800533c:	bb1b      	cbnz	r3, 8005386 <_svfiprintf_r+0x1b2>
 800533e:	9b03      	ldr	r3, [sp, #12]
 8005340:	3307      	adds	r3, #7
 8005342:	f023 0307 	bic.w	r3, r3, #7
 8005346:	3308      	adds	r3, #8
 8005348:	9303      	str	r3, [sp, #12]
 800534a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800534c:	4433      	add	r3, r6
 800534e:	9309      	str	r3, [sp, #36]	; 0x24
 8005350:	e767      	b.n	8005222 <_svfiprintf_r+0x4e>
 8005352:	460c      	mov	r4, r1
 8005354:	2001      	movs	r0, #1
 8005356:	fb0c 3202 	mla	r2, ip, r2, r3
 800535a:	e7a5      	b.n	80052a8 <_svfiprintf_r+0xd4>
 800535c:	2300      	movs	r3, #0
 800535e:	f04f 0c0a 	mov.w	ip, #10
 8005362:	4619      	mov	r1, r3
 8005364:	3401      	adds	r4, #1
 8005366:	9305      	str	r3, [sp, #20]
 8005368:	4620      	mov	r0, r4
 800536a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800536e:	3a30      	subs	r2, #48	; 0x30
 8005370:	2a09      	cmp	r2, #9
 8005372:	d903      	bls.n	800537c <_svfiprintf_r+0x1a8>
 8005374:	2b00      	cmp	r3, #0
 8005376:	d0c5      	beq.n	8005304 <_svfiprintf_r+0x130>
 8005378:	9105      	str	r1, [sp, #20]
 800537a:	e7c3      	b.n	8005304 <_svfiprintf_r+0x130>
 800537c:	4604      	mov	r4, r0
 800537e:	2301      	movs	r3, #1
 8005380:	fb0c 2101 	mla	r1, ip, r1, r2
 8005384:	e7f0      	b.n	8005368 <_svfiprintf_r+0x194>
 8005386:	ab03      	add	r3, sp, #12
 8005388:	9300      	str	r3, [sp, #0]
 800538a:	462a      	mov	r2, r5
 800538c:	4638      	mov	r0, r7
 800538e:	4b10      	ldr	r3, [pc, #64]	; (80053d0 <_svfiprintf_r+0x1fc>)
 8005390:	a904      	add	r1, sp, #16
 8005392:	f3af 8000 	nop.w
 8005396:	1c42      	adds	r2, r0, #1
 8005398:	4606      	mov	r6, r0
 800539a:	d1d6      	bne.n	800534a <_svfiprintf_r+0x176>
 800539c:	89ab      	ldrh	r3, [r5, #12]
 800539e:	065b      	lsls	r3, r3, #25
 80053a0:	f53f af2c 	bmi.w	80051fc <_svfiprintf_r+0x28>
 80053a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053a6:	b01d      	add	sp, #116	; 0x74
 80053a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ac:	ab03      	add	r3, sp, #12
 80053ae:	9300      	str	r3, [sp, #0]
 80053b0:	462a      	mov	r2, r5
 80053b2:	4638      	mov	r0, r7
 80053b4:	4b06      	ldr	r3, [pc, #24]	; (80053d0 <_svfiprintf_r+0x1fc>)
 80053b6:	a904      	add	r1, sp, #16
 80053b8:	f000 f87c 	bl	80054b4 <_printf_i>
 80053bc:	e7eb      	b.n	8005396 <_svfiprintf_r+0x1c2>
 80053be:	bf00      	nop
 80053c0:	08005a72 	.word	0x08005a72
 80053c4:	08005a78 	.word	0x08005a78
 80053c8:	08005a7c 	.word	0x08005a7c
 80053cc:	00000000 	.word	0x00000000
 80053d0:	0800511d 	.word	0x0800511d

080053d4 <_printf_common>:
 80053d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053d8:	4616      	mov	r6, r2
 80053da:	4699      	mov	r9, r3
 80053dc:	688a      	ldr	r2, [r1, #8]
 80053de:	690b      	ldr	r3, [r1, #16]
 80053e0:	4607      	mov	r7, r0
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bfb8      	it	lt
 80053e6:	4613      	movlt	r3, r2
 80053e8:	6033      	str	r3, [r6, #0]
 80053ea:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80053ee:	460c      	mov	r4, r1
 80053f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80053f4:	b10a      	cbz	r2, 80053fa <_printf_common+0x26>
 80053f6:	3301      	adds	r3, #1
 80053f8:	6033      	str	r3, [r6, #0]
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	0699      	lsls	r1, r3, #26
 80053fe:	bf42      	ittt	mi
 8005400:	6833      	ldrmi	r3, [r6, #0]
 8005402:	3302      	addmi	r3, #2
 8005404:	6033      	strmi	r3, [r6, #0]
 8005406:	6825      	ldr	r5, [r4, #0]
 8005408:	f015 0506 	ands.w	r5, r5, #6
 800540c:	d106      	bne.n	800541c <_printf_common+0x48>
 800540e:	f104 0a19 	add.w	sl, r4, #25
 8005412:	68e3      	ldr	r3, [r4, #12]
 8005414:	6832      	ldr	r2, [r6, #0]
 8005416:	1a9b      	subs	r3, r3, r2
 8005418:	42ab      	cmp	r3, r5
 800541a:	dc28      	bgt.n	800546e <_printf_common+0x9a>
 800541c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005420:	1e13      	subs	r3, r2, #0
 8005422:	6822      	ldr	r2, [r4, #0]
 8005424:	bf18      	it	ne
 8005426:	2301      	movne	r3, #1
 8005428:	0692      	lsls	r2, r2, #26
 800542a:	d42d      	bmi.n	8005488 <_printf_common+0xb4>
 800542c:	4649      	mov	r1, r9
 800542e:	4638      	mov	r0, r7
 8005430:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005434:	47c0      	blx	r8
 8005436:	3001      	adds	r0, #1
 8005438:	d020      	beq.n	800547c <_printf_common+0xa8>
 800543a:	6823      	ldr	r3, [r4, #0]
 800543c:	68e5      	ldr	r5, [r4, #12]
 800543e:	f003 0306 	and.w	r3, r3, #6
 8005442:	2b04      	cmp	r3, #4
 8005444:	bf18      	it	ne
 8005446:	2500      	movne	r5, #0
 8005448:	6832      	ldr	r2, [r6, #0]
 800544a:	f04f 0600 	mov.w	r6, #0
 800544e:	68a3      	ldr	r3, [r4, #8]
 8005450:	bf08      	it	eq
 8005452:	1aad      	subeq	r5, r5, r2
 8005454:	6922      	ldr	r2, [r4, #16]
 8005456:	bf08      	it	eq
 8005458:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800545c:	4293      	cmp	r3, r2
 800545e:	bfc4      	itt	gt
 8005460:	1a9b      	subgt	r3, r3, r2
 8005462:	18ed      	addgt	r5, r5, r3
 8005464:	341a      	adds	r4, #26
 8005466:	42b5      	cmp	r5, r6
 8005468:	d11a      	bne.n	80054a0 <_printf_common+0xcc>
 800546a:	2000      	movs	r0, #0
 800546c:	e008      	b.n	8005480 <_printf_common+0xac>
 800546e:	2301      	movs	r3, #1
 8005470:	4652      	mov	r2, sl
 8005472:	4649      	mov	r1, r9
 8005474:	4638      	mov	r0, r7
 8005476:	47c0      	blx	r8
 8005478:	3001      	adds	r0, #1
 800547a:	d103      	bne.n	8005484 <_printf_common+0xb0>
 800547c:	f04f 30ff 	mov.w	r0, #4294967295
 8005480:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005484:	3501      	adds	r5, #1
 8005486:	e7c4      	b.n	8005412 <_printf_common+0x3e>
 8005488:	2030      	movs	r0, #48	; 0x30
 800548a:	18e1      	adds	r1, r4, r3
 800548c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005490:	1c5a      	adds	r2, r3, #1
 8005492:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005496:	4422      	add	r2, r4
 8005498:	3302      	adds	r3, #2
 800549a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800549e:	e7c5      	b.n	800542c <_printf_common+0x58>
 80054a0:	2301      	movs	r3, #1
 80054a2:	4622      	mov	r2, r4
 80054a4:	4649      	mov	r1, r9
 80054a6:	4638      	mov	r0, r7
 80054a8:	47c0      	blx	r8
 80054aa:	3001      	adds	r0, #1
 80054ac:	d0e6      	beq.n	800547c <_printf_common+0xa8>
 80054ae:	3601      	adds	r6, #1
 80054b0:	e7d9      	b.n	8005466 <_printf_common+0x92>
	...

080054b4 <_printf_i>:
 80054b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80054b8:	7e0f      	ldrb	r7, [r1, #24]
 80054ba:	4691      	mov	r9, r2
 80054bc:	2f78      	cmp	r7, #120	; 0x78
 80054be:	4680      	mov	r8, r0
 80054c0:	460c      	mov	r4, r1
 80054c2:	469a      	mov	sl, r3
 80054c4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80054c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80054ca:	d807      	bhi.n	80054dc <_printf_i+0x28>
 80054cc:	2f62      	cmp	r7, #98	; 0x62
 80054ce:	d80a      	bhi.n	80054e6 <_printf_i+0x32>
 80054d0:	2f00      	cmp	r7, #0
 80054d2:	f000 80d9 	beq.w	8005688 <_printf_i+0x1d4>
 80054d6:	2f58      	cmp	r7, #88	; 0x58
 80054d8:	f000 80a4 	beq.w	8005624 <_printf_i+0x170>
 80054dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80054e4:	e03a      	b.n	800555c <_printf_i+0xa8>
 80054e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80054ea:	2b15      	cmp	r3, #21
 80054ec:	d8f6      	bhi.n	80054dc <_printf_i+0x28>
 80054ee:	a101      	add	r1, pc, #4	; (adr r1, 80054f4 <_printf_i+0x40>)
 80054f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80054f4:	0800554d 	.word	0x0800554d
 80054f8:	08005561 	.word	0x08005561
 80054fc:	080054dd 	.word	0x080054dd
 8005500:	080054dd 	.word	0x080054dd
 8005504:	080054dd 	.word	0x080054dd
 8005508:	080054dd 	.word	0x080054dd
 800550c:	08005561 	.word	0x08005561
 8005510:	080054dd 	.word	0x080054dd
 8005514:	080054dd 	.word	0x080054dd
 8005518:	080054dd 	.word	0x080054dd
 800551c:	080054dd 	.word	0x080054dd
 8005520:	0800566f 	.word	0x0800566f
 8005524:	08005591 	.word	0x08005591
 8005528:	08005651 	.word	0x08005651
 800552c:	080054dd 	.word	0x080054dd
 8005530:	080054dd 	.word	0x080054dd
 8005534:	08005691 	.word	0x08005691
 8005538:	080054dd 	.word	0x080054dd
 800553c:	08005591 	.word	0x08005591
 8005540:	080054dd 	.word	0x080054dd
 8005544:	080054dd 	.word	0x080054dd
 8005548:	08005659 	.word	0x08005659
 800554c:	682b      	ldr	r3, [r5, #0]
 800554e:	1d1a      	adds	r2, r3, #4
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	602a      	str	r2, [r5, #0]
 8005554:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800555c:	2301      	movs	r3, #1
 800555e:	e0a4      	b.n	80056aa <_printf_i+0x1f6>
 8005560:	6820      	ldr	r0, [r4, #0]
 8005562:	6829      	ldr	r1, [r5, #0]
 8005564:	0606      	lsls	r6, r0, #24
 8005566:	f101 0304 	add.w	r3, r1, #4
 800556a:	d50a      	bpl.n	8005582 <_printf_i+0xce>
 800556c:	680e      	ldr	r6, [r1, #0]
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	2e00      	cmp	r6, #0
 8005572:	da03      	bge.n	800557c <_printf_i+0xc8>
 8005574:	232d      	movs	r3, #45	; 0x2d
 8005576:	4276      	negs	r6, r6
 8005578:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800557c:	230a      	movs	r3, #10
 800557e:	485e      	ldr	r0, [pc, #376]	; (80056f8 <_printf_i+0x244>)
 8005580:	e019      	b.n	80055b6 <_printf_i+0x102>
 8005582:	680e      	ldr	r6, [r1, #0]
 8005584:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005588:	602b      	str	r3, [r5, #0]
 800558a:	bf18      	it	ne
 800558c:	b236      	sxthne	r6, r6
 800558e:	e7ef      	b.n	8005570 <_printf_i+0xbc>
 8005590:	682b      	ldr	r3, [r5, #0]
 8005592:	6820      	ldr	r0, [r4, #0]
 8005594:	1d19      	adds	r1, r3, #4
 8005596:	6029      	str	r1, [r5, #0]
 8005598:	0601      	lsls	r1, r0, #24
 800559a:	d501      	bpl.n	80055a0 <_printf_i+0xec>
 800559c:	681e      	ldr	r6, [r3, #0]
 800559e:	e002      	b.n	80055a6 <_printf_i+0xf2>
 80055a0:	0646      	lsls	r6, r0, #25
 80055a2:	d5fb      	bpl.n	800559c <_printf_i+0xe8>
 80055a4:	881e      	ldrh	r6, [r3, #0]
 80055a6:	2f6f      	cmp	r7, #111	; 0x6f
 80055a8:	bf0c      	ite	eq
 80055aa:	2308      	moveq	r3, #8
 80055ac:	230a      	movne	r3, #10
 80055ae:	4852      	ldr	r0, [pc, #328]	; (80056f8 <_printf_i+0x244>)
 80055b0:	2100      	movs	r1, #0
 80055b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055b6:	6865      	ldr	r5, [r4, #4]
 80055b8:	2d00      	cmp	r5, #0
 80055ba:	bfa8      	it	ge
 80055bc:	6821      	ldrge	r1, [r4, #0]
 80055be:	60a5      	str	r5, [r4, #8]
 80055c0:	bfa4      	itt	ge
 80055c2:	f021 0104 	bicge.w	r1, r1, #4
 80055c6:	6021      	strge	r1, [r4, #0]
 80055c8:	b90e      	cbnz	r6, 80055ce <_printf_i+0x11a>
 80055ca:	2d00      	cmp	r5, #0
 80055cc:	d04d      	beq.n	800566a <_printf_i+0x1b6>
 80055ce:	4615      	mov	r5, r2
 80055d0:	fbb6 f1f3 	udiv	r1, r6, r3
 80055d4:	fb03 6711 	mls	r7, r3, r1, r6
 80055d8:	5dc7      	ldrb	r7, [r0, r7]
 80055da:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80055de:	4637      	mov	r7, r6
 80055e0:	42bb      	cmp	r3, r7
 80055e2:	460e      	mov	r6, r1
 80055e4:	d9f4      	bls.n	80055d0 <_printf_i+0x11c>
 80055e6:	2b08      	cmp	r3, #8
 80055e8:	d10b      	bne.n	8005602 <_printf_i+0x14e>
 80055ea:	6823      	ldr	r3, [r4, #0]
 80055ec:	07de      	lsls	r6, r3, #31
 80055ee:	d508      	bpl.n	8005602 <_printf_i+0x14e>
 80055f0:	6923      	ldr	r3, [r4, #16]
 80055f2:	6861      	ldr	r1, [r4, #4]
 80055f4:	4299      	cmp	r1, r3
 80055f6:	bfde      	ittt	le
 80055f8:	2330      	movle	r3, #48	; 0x30
 80055fa:	f805 3c01 	strble.w	r3, [r5, #-1]
 80055fe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005602:	1b52      	subs	r2, r2, r5
 8005604:	6122      	str	r2, [r4, #16]
 8005606:	464b      	mov	r3, r9
 8005608:	4621      	mov	r1, r4
 800560a:	4640      	mov	r0, r8
 800560c:	f8cd a000 	str.w	sl, [sp]
 8005610:	aa03      	add	r2, sp, #12
 8005612:	f7ff fedf 	bl	80053d4 <_printf_common>
 8005616:	3001      	adds	r0, #1
 8005618:	d14c      	bne.n	80056b4 <_printf_i+0x200>
 800561a:	f04f 30ff 	mov.w	r0, #4294967295
 800561e:	b004      	add	sp, #16
 8005620:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005624:	4834      	ldr	r0, [pc, #208]	; (80056f8 <_printf_i+0x244>)
 8005626:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800562a:	6829      	ldr	r1, [r5, #0]
 800562c:	6823      	ldr	r3, [r4, #0]
 800562e:	f851 6b04 	ldr.w	r6, [r1], #4
 8005632:	6029      	str	r1, [r5, #0]
 8005634:	061d      	lsls	r5, r3, #24
 8005636:	d514      	bpl.n	8005662 <_printf_i+0x1ae>
 8005638:	07df      	lsls	r7, r3, #31
 800563a:	bf44      	itt	mi
 800563c:	f043 0320 	orrmi.w	r3, r3, #32
 8005640:	6023      	strmi	r3, [r4, #0]
 8005642:	b91e      	cbnz	r6, 800564c <_printf_i+0x198>
 8005644:	6823      	ldr	r3, [r4, #0]
 8005646:	f023 0320 	bic.w	r3, r3, #32
 800564a:	6023      	str	r3, [r4, #0]
 800564c:	2310      	movs	r3, #16
 800564e:	e7af      	b.n	80055b0 <_printf_i+0xfc>
 8005650:	6823      	ldr	r3, [r4, #0]
 8005652:	f043 0320 	orr.w	r3, r3, #32
 8005656:	6023      	str	r3, [r4, #0]
 8005658:	2378      	movs	r3, #120	; 0x78
 800565a:	4828      	ldr	r0, [pc, #160]	; (80056fc <_printf_i+0x248>)
 800565c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005660:	e7e3      	b.n	800562a <_printf_i+0x176>
 8005662:	0659      	lsls	r1, r3, #25
 8005664:	bf48      	it	mi
 8005666:	b2b6      	uxthmi	r6, r6
 8005668:	e7e6      	b.n	8005638 <_printf_i+0x184>
 800566a:	4615      	mov	r5, r2
 800566c:	e7bb      	b.n	80055e6 <_printf_i+0x132>
 800566e:	682b      	ldr	r3, [r5, #0]
 8005670:	6826      	ldr	r6, [r4, #0]
 8005672:	1d18      	adds	r0, r3, #4
 8005674:	6961      	ldr	r1, [r4, #20]
 8005676:	6028      	str	r0, [r5, #0]
 8005678:	0635      	lsls	r5, r6, #24
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	d501      	bpl.n	8005682 <_printf_i+0x1ce>
 800567e:	6019      	str	r1, [r3, #0]
 8005680:	e002      	b.n	8005688 <_printf_i+0x1d4>
 8005682:	0670      	lsls	r0, r6, #25
 8005684:	d5fb      	bpl.n	800567e <_printf_i+0x1ca>
 8005686:	8019      	strh	r1, [r3, #0]
 8005688:	2300      	movs	r3, #0
 800568a:	4615      	mov	r5, r2
 800568c:	6123      	str	r3, [r4, #16]
 800568e:	e7ba      	b.n	8005606 <_printf_i+0x152>
 8005690:	682b      	ldr	r3, [r5, #0]
 8005692:	2100      	movs	r1, #0
 8005694:	1d1a      	adds	r2, r3, #4
 8005696:	602a      	str	r2, [r5, #0]
 8005698:	681d      	ldr	r5, [r3, #0]
 800569a:	6862      	ldr	r2, [r4, #4]
 800569c:	4628      	mov	r0, r5
 800569e:	f000 f82f 	bl	8005700 <memchr>
 80056a2:	b108      	cbz	r0, 80056a8 <_printf_i+0x1f4>
 80056a4:	1b40      	subs	r0, r0, r5
 80056a6:	6060      	str	r0, [r4, #4]
 80056a8:	6863      	ldr	r3, [r4, #4]
 80056aa:	6123      	str	r3, [r4, #16]
 80056ac:	2300      	movs	r3, #0
 80056ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056b2:	e7a8      	b.n	8005606 <_printf_i+0x152>
 80056b4:	462a      	mov	r2, r5
 80056b6:	4649      	mov	r1, r9
 80056b8:	4640      	mov	r0, r8
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	47d0      	blx	sl
 80056be:	3001      	adds	r0, #1
 80056c0:	d0ab      	beq.n	800561a <_printf_i+0x166>
 80056c2:	6823      	ldr	r3, [r4, #0]
 80056c4:	079b      	lsls	r3, r3, #30
 80056c6:	d413      	bmi.n	80056f0 <_printf_i+0x23c>
 80056c8:	68e0      	ldr	r0, [r4, #12]
 80056ca:	9b03      	ldr	r3, [sp, #12]
 80056cc:	4298      	cmp	r0, r3
 80056ce:	bfb8      	it	lt
 80056d0:	4618      	movlt	r0, r3
 80056d2:	e7a4      	b.n	800561e <_printf_i+0x16a>
 80056d4:	2301      	movs	r3, #1
 80056d6:	4632      	mov	r2, r6
 80056d8:	4649      	mov	r1, r9
 80056da:	4640      	mov	r0, r8
 80056dc:	47d0      	blx	sl
 80056de:	3001      	adds	r0, #1
 80056e0:	d09b      	beq.n	800561a <_printf_i+0x166>
 80056e2:	3501      	adds	r5, #1
 80056e4:	68e3      	ldr	r3, [r4, #12]
 80056e6:	9903      	ldr	r1, [sp, #12]
 80056e8:	1a5b      	subs	r3, r3, r1
 80056ea:	42ab      	cmp	r3, r5
 80056ec:	dcf2      	bgt.n	80056d4 <_printf_i+0x220>
 80056ee:	e7eb      	b.n	80056c8 <_printf_i+0x214>
 80056f0:	2500      	movs	r5, #0
 80056f2:	f104 0619 	add.w	r6, r4, #25
 80056f6:	e7f5      	b.n	80056e4 <_printf_i+0x230>
 80056f8:	08005a83 	.word	0x08005a83
 80056fc:	08005a94 	.word	0x08005a94

08005700 <memchr>:
 8005700:	4603      	mov	r3, r0
 8005702:	b510      	push	{r4, lr}
 8005704:	b2c9      	uxtb	r1, r1
 8005706:	4402      	add	r2, r0
 8005708:	4293      	cmp	r3, r2
 800570a:	4618      	mov	r0, r3
 800570c:	d101      	bne.n	8005712 <memchr+0x12>
 800570e:	2000      	movs	r0, #0
 8005710:	e003      	b.n	800571a <memchr+0x1a>
 8005712:	7804      	ldrb	r4, [r0, #0]
 8005714:	3301      	adds	r3, #1
 8005716:	428c      	cmp	r4, r1
 8005718:	d1f6      	bne.n	8005708 <memchr+0x8>
 800571a:	bd10      	pop	{r4, pc}

0800571c <memmove>:
 800571c:	4288      	cmp	r0, r1
 800571e:	b510      	push	{r4, lr}
 8005720:	eb01 0402 	add.w	r4, r1, r2
 8005724:	d902      	bls.n	800572c <memmove+0x10>
 8005726:	4284      	cmp	r4, r0
 8005728:	4623      	mov	r3, r4
 800572a:	d807      	bhi.n	800573c <memmove+0x20>
 800572c:	1e43      	subs	r3, r0, #1
 800572e:	42a1      	cmp	r1, r4
 8005730:	d008      	beq.n	8005744 <memmove+0x28>
 8005732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800573a:	e7f8      	b.n	800572e <memmove+0x12>
 800573c:	4601      	mov	r1, r0
 800573e:	4402      	add	r2, r0
 8005740:	428a      	cmp	r2, r1
 8005742:	d100      	bne.n	8005746 <memmove+0x2a>
 8005744:	bd10      	pop	{r4, pc}
 8005746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800574a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800574e:	e7f7      	b.n	8005740 <memmove+0x24>

08005750 <_free_r>:
 8005750:	b538      	push	{r3, r4, r5, lr}
 8005752:	4605      	mov	r5, r0
 8005754:	2900      	cmp	r1, #0
 8005756:	d040      	beq.n	80057da <_free_r+0x8a>
 8005758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800575c:	1f0c      	subs	r4, r1, #4
 800575e:	2b00      	cmp	r3, #0
 8005760:	bfb8      	it	lt
 8005762:	18e4      	addlt	r4, r4, r3
 8005764:	f000 f910 	bl	8005988 <__malloc_lock>
 8005768:	4a1c      	ldr	r2, [pc, #112]	; (80057dc <_free_r+0x8c>)
 800576a:	6813      	ldr	r3, [r2, #0]
 800576c:	b933      	cbnz	r3, 800577c <_free_r+0x2c>
 800576e:	6063      	str	r3, [r4, #4]
 8005770:	6014      	str	r4, [r2, #0]
 8005772:	4628      	mov	r0, r5
 8005774:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005778:	f000 b90c 	b.w	8005994 <__malloc_unlock>
 800577c:	42a3      	cmp	r3, r4
 800577e:	d908      	bls.n	8005792 <_free_r+0x42>
 8005780:	6820      	ldr	r0, [r4, #0]
 8005782:	1821      	adds	r1, r4, r0
 8005784:	428b      	cmp	r3, r1
 8005786:	bf01      	itttt	eq
 8005788:	6819      	ldreq	r1, [r3, #0]
 800578a:	685b      	ldreq	r3, [r3, #4]
 800578c:	1809      	addeq	r1, r1, r0
 800578e:	6021      	streq	r1, [r4, #0]
 8005790:	e7ed      	b.n	800576e <_free_r+0x1e>
 8005792:	461a      	mov	r2, r3
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	b10b      	cbz	r3, 800579c <_free_r+0x4c>
 8005798:	42a3      	cmp	r3, r4
 800579a:	d9fa      	bls.n	8005792 <_free_r+0x42>
 800579c:	6811      	ldr	r1, [r2, #0]
 800579e:	1850      	adds	r0, r2, r1
 80057a0:	42a0      	cmp	r0, r4
 80057a2:	d10b      	bne.n	80057bc <_free_r+0x6c>
 80057a4:	6820      	ldr	r0, [r4, #0]
 80057a6:	4401      	add	r1, r0
 80057a8:	1850      	adds	r0, r2, r1
 80057aa:	4283      	cmp	r3, r0
 80057ac:	6011      	str	r1, [r2, #0]
 80057ae:	d1e0      	bne.n	8005772 <_free_r+0x22>
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	4401      	add	r1, r0
 80057b6:	6011      	str	r1, [r2, #0]
 80057b8:	6053      	str	r3, [r2, #4]
 80057ba:	e7da      	b.n	8005772 <_free_r+0x22>
 80057bc:	d902      	bls.n	80057c4 <_free_r+0x74>
 80057be:	230c      	movs	r3, #12
 80057c0:	602b      	str	r3, [r5, #0]
 80057c2:	e7d6      	b.n	8005772 <_free_r+0x22>
 80057c4:	6820      	ldr	r0, [r4, #0]
 80057c6:	1821      	adds	r1, r4, r0
 80057c8:	428b      	cmp	r3, r1
 80057ca:	bf01      	itttt	eq
 80057cc:	6819      	ldreq	r1, [r3, #0]
 80057ce:	685b      	ldreq	r3, [r3, #4]
 80057d0:	1809      	addeq	r1, r1, r0
 80057d2:	6021      	streq	r1, [r4, #0]
 80057d4:	6063      	str	r3, [r4, #4]
 80057d6:	6054      	str	r4, [r2, #4]
 80057d8:	e7cb      	b.n	8005772 <_free_r+0x22>
 80057da:	bd38      	pop	{r3, r4, r5, pc}
 80057dc:	20001278 	.word	0x20001278

080057e0 <sbrk_aligned>:
 80057e0:	b570      	push	{r4, r5, r6, lr}
 80057e2:	4e0e      	ldr	r6, [pc, #56]	; (800581c <sbrk_aligned+0x3c>)
 80057e4:	460c      	mov	r4, r1
 80057e6:	6831      	ldr	r1, [r6, #0]
 80057e8:	4605      	mov	r5, r0
 80057ea:	b911      	cbnz	r1, 80057f2 <sbrk_aligned+0x12>
 80057ec:	f000 f8bc 	bl	8005968 <_sbrk_r>
 80057f0:	6030      	str	r0, [r6, #0]
 80057f2:	4621      	mov	r1, r4
 80057f4:	4628      	mov	r0, r5
 80057f6:	f000 f8b7 	bl	8005968 <_sbrk_r>
 80057fa:	1c43      	adds	r3, r0, #1
 80057fc:	d00a      	beq.n	8005814 <sbrk_aligned+0x34>
 80057fe:	1cc4      	adds	r4, r0, #3
 8005800:	f024 0403 	bic.w	r4, r4, #3
 8005804:	42a0      	cmp	r0, r4
 8005806:	d007      	beq.n	8005818 <sbrk_aligned+0x38>
 8005808:	1a21      	subs	r1, r4, r0
 800580a:	4628      	mov	r0, r5
 800580c:	f000 f8ac 	bl	8005968 <_sbrk_r>
 8005810:	3001      	adds	r0, #1
 8005812:	d101      	bne.n	8005818 <sbrk_aligned+0x38>
 8005814:	f04f 34ff 	mov.w	r4, #4294967295
 8005818:	4620      	mov	r0, r4
 800581a:	bd70      	pop	{r4, r5, r6, pc}
 800581c:	2000127c 	.word	0x2000127c

08005820 <_malloc_r>:
 8005820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005824:	1ccd      	adds	r5, r1, #3
 8005826:	f025 0503 	bic.w	r5, r5, #3
 800582a:	3508      	adds	r5, #8
 800582c:	2d0c      	cmp	r5, #12
 800582e:	bf38      	it	cc
 8005830:	250c      	movcc	r5, #12
 8005832:	2d00      	cmp	r5, #0
 8005834:	4607      	mov	r7, r0
 8005836:	db01      	blt.n	800583c <_malloc_r+0x1c>
 8005838:	42a9      	cmp	r1, r5
 800583a:	d905      	bls.n	8005848 <_malloc_r+0x28>
 800583c:	230c      	movs	r3, #12
 800583e:	2600      	movs	r6, #0
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	4630      	mov	r0, r6
 8005844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005848:	4e2e      	ldr	r6, [pc, #184]	; (8005904 <_malloc_r+0xe4>)
 800584a:	f000 f89d 	bl	8005988 <__malloc_lock>
 800584e:	6833      	ldr	r3, [r6, #0]
 8005850:	461c      	mov	r4, r3
 8005852:	bb34      	cbnz	r4, 80058a2 <_malloc_r+0x82>
 8005854:	4629      	mov	r1, r5
 8005856:	4638      	mov	r0, r7
 8005858:	f7ff ffc2 	bl	80057e0 <sbrk_aligned>
 800585c:	1c43      	adds	r3, r0, #1
 800585e:	4604      	mov	r4, r0
 8005860:	d14d      	bne.n	80058fe <_malloc_r+0xde>
 8005862:	6834      	ldr	r4, [r6, #0]
 8005864:	4626      	mov	r6, r4
 8005866:	2e00      	cmp	r6, #0
 8005868:	d140      	bne.n	80058ec <_malloc_r+0xcc>
 800586a:	6823      	ldr	r3, [r4, #0]
 800586c:	4631      	mov	r1, r6
 800586e:	4638      	mov	r0, r7
 8005870:	eb04 0803 	add.w	r8, r4, r3
 8005874:	f000 f878 	bl	8005968 <_sbrk_r>
 8005878:	4580      	cmp	r8, r0
 800587a:	d13a      	bne.n	80058f2 <_malloc_r+0xd2>
 800587c:	6821      	ldr	r1, [r4, #0]
 800587e:	3503      	adds	r5, #3
 8005880:	1a6d      	subs	r5, r5, r1
 8005882:	f025 0503 	bic.w	r5, r5, #3
 8005886:	3508      	adds	r5, #8
 8005888:	2d0c      	cmp	r5, #12
 800588a:	bf38      	it	cc
 800588c:	250c      	movcc	r5, #12
 800588e:	4638      	mov	r0, r7
 8005890:	4629      	mov	r1, r5
 8005892:	f7ff ffa5 	bl	80057e0 <sbrk_aligned>
 8005896:	3001      	adds	r0, #1
 8005898:	d02b      	beq.n	80058f2 <_malloc_r+0xd2>
 800589a:	6823      	ldr	r3, [r4, #0]
 800589c:	442b      	add	r3, r5
 800589e:	6023      	str	r3, [r4, #0]
 80058a0:	e00e      	b.n	80058c0 <_malloc_r+0xa0>
 80058a2:	6822      	ldr	r2, [r4, #0]
 80058a4:	1b52      	subs	r2, r2, r5
 80058a6:	d41e      	bmi.n	80058e6 <_malloc_r+0xc6>
 80058a8:	2a0b      	cmp	r2, #11
 80058aa:	d916      	bls.n	80058da <_malloc_r+0xba>
 80058ac:	1961      	adds	r1, r4, r5
 80058ae:	42a3      	cmp	r3, r4
 80058b0:	6025      	str	r5, [r4, #0]
 80058b2:	bf18      	it	ne
 80058b4:	6059      	strne	r1, [r3, #4]
 80058b6:	6863      	ldr	r3, [r4, #4]
 80058b8:	bf08      	it	eq
 80058ba:	6031      	streq	r1, [r6, #0]
 80058bc:	5162      	str	r2, [r4, r5]
 80058be:	604b      	str	r3, [r1, #4]
 80058c0:	4638      	mov	r0, r7
 80058c2:	f104 060b 	add.w	r6, r4, #11
 80058c6:	f000 f865 	bl	8005994 <__malloc_unlock>
 80058ca:	f026 0607 	bic.w	r6, r6, #7
 80058ce:	1d23      	adds	r3, r4, #4
 80058d0:	1af2      	subs	r2, r6, r3
 80058d2:	d0b6      	beq.n	8005842 <_malloc_r+0x22>
 80058d4:	1b9b      	subs	r3, r3, r6
 80058d6:	50a3      	str	r3, [r4, r2]
 80058d8:	e7b3      	b.n	8005842 <_malloc_r+0x22>
 80058da:	6862      	ldr	r2, [r4, #4]
 80058dc:	42a3      	cmp	r3, r4
 80058de:	bf0c      	ite	eq
 80058e0:	6032      	streq	r2, [r6, #0]
 80058e2:	605a      	strne	r2, [r3, #4]
 80058e4:	e7ec      	b.n	80058c0 <_malloc_r+0xa0>
 80058e6:	4623      	mov	r3, r4
 80058e8:	6864      	ldr	r4, [r4, #4]
 80058ea:	e7b2      	b.n	8005852 <_malloc_r+0x32>
 80058ec:	4634      	mov	r4, r6
 80058ee:	6876      	ldr	r6, [r6, #4]
 80058f0:	e7b9      	b.n	8005866 <_malloc_r+0x46>
 80058f2:	230c      	movs	r3, #12
 80058f4:	4638      	mov	r0, r7
 80058f6:	603b      	str	r3, [r7, #0]
 80058f8:	f000 f84c 	bl	8005994 <__malloc_unlock>
 80058fc:	e7a1      	b.n	8005842 <_malloc_r+0x22>
 80058fe:	6025      	str	r5, [r4, #0]
 8005900:	e7de      	b.n	80058c0 <_malloc_r+0xa0>
 8005902:	bf00      	nop
 8005904:	20001278 	.word	0x20001278

08005908 <_realloc_r>:
 8005908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800590c:	4680      	mov	r8, r0
 800590e:	4614      	mov	r4, r2
 8005910:	460e      	mov	r6, r1
 8005912:	b921      	cbnz	r1, 800591e <_realloc_r+0x16>
 8005914:	4611      	mov	r1, r2
 8005916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800591a:	f7ff bf81 	b.w	8005820 <_malloc_r>
 800591e:	b92a      	cbnz	r2, 800592c <_realloc_r+0x24>
 8005920:	f7ff ff16 	bl	8005750 <_free_r>
 8005924:	4625      	mov	r5, r4
 8005926:	4628      	mov	r0, r5
 8005928:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800592c:	f000 f838 	bl	80059a0 <_malloc_usable_size_r>
 8005930:	4284      	cmp	r4, r0
 8005932:	4607      	mov	r7, r0
 8005934:	d802      	bhi.n	800593c <_realloc_r+0x34>
 8005936:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800593a:	d812      	bhi.n	8005962 <_realloc_r+0x5a>
 800593c:	4621      	mov	r1, r4
 800593e:	4640      	mov	r0, r8
 8005940:	f7ff ff6e 	bl	8005820 <_malloc_r>
 8005944:	4605      	mov	r5, r0
 8005946:	2800      	cmp	r0, #0
 8005948:	d0ed      	beq.n	8005926 <_realloc_r+0x1e>
 800594a:	42bc      	cmp	r4, r7
 800594c:	4622      	mov	r2, r4
 800594e:	4631      	mov	r1, r6
 8005950:	bf28      	it	cs
 8005952:	463a      	movcs	r2, r7
 8005954:	f7ff fbac 	bl	80050b0 <memcpy>
 8005958:	4631      	mov	r1, r6
 800595a:	4640      	mov	r0, r8
 800595c:	f7ff fef8 	bl	8005750 <_free_r>
 8005960:	e7e1      	b.n	8005926 <_realloc_r+0x1e>
 8005962:	4635      	mov	r5, r6
 8005964:	e7df      	b.n	8005926 <_realloc_r+0x1e>
	...

08005968 <_sbrk_r>:
 8005968:	b538      	push	{r3, r4, r5, lr}
 800596a:	2300      	movs	r3, #0
 800596c:	4d05      	ldr	r5, [pc, #20]	; (8005984 <_sbrk_r+0x1c>)
 800596e:	4604      	mov	r4, r0
 8005970:	4608      	mov	r0, r1
 8005972:	602b      	str	r3, [r5, #0]
 8005974:	f7fb f8d2 	bl	8000b1c <_sbrk>
 8005978:	1c43      	adds	r3, r0, #1
 800597a:	d102      	bne.n	8005982 <_sbrk_r+0x1a>
 800597c:	682b      	ldr	r3, [r5, #0]
 800597e:	b103      	cbz	r3, 8005982 <_sbrk_r+0x1a>
 8005980:	6023      	str	r3, [r4, #0]
 8005982:	bd38      	pop	{r3, r4, r5, pc}
 8005984:	20001280 	.word	0x20001280

08005988 <__malloc_lock>:
 8005988:	4801      	ldr	r0, [pc, #4]	; (8005990 <__malloc_lock+0x8>)
 800598a:	f000 b811 	b.w	80059b0 <__retarget_lock_acquire_recursive>
 800598e:	bf00      	nop
 8005990:	20001284 	.word	0x20001284

08005994 <__malloc_unlock>:
 8005994:	4801      	ldr	r0, [pc, #4]	; (800599c <__malloc_unlock+0x8>)
 8005996:	f000 b80c 	b.w	80059b2 <__retarget_lock_release_recursive>
 800599a:	bf00      	nop
 800599c:	20001284 	.word	0x20001284

080059a0 <_malloc_usable_size_r>:
 80059a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059a4:	1f18      	subs	r0, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	bfbc      	itt	lt
 80059aa:	580b      	ldrlt	r3, [r1, r0]
 80059ac:	18c0      	addlt	r0, r0, r3
 80059ae:	4770      	bx	lr

080059b0 <__retarget_lock_acquire_recursive>:
 80059b0:	4770      	bx	lr

080059b2 <__retarget_lock_release_recursive>:
 80059b2:	4770      	bx	lr

080059b4 <_init>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr

080059c0 <_fini>:
 80059c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059c2:	bf00      	nop
 80059c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059c6:	bc08      	pop	{r3}
 80059c8:	469e      	mov	lr, r3
 80059ca:	4770      	bx	lr
