
Led_task.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000446c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800457c  0800457c  0001457c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046b4  080046b4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080046b4  080046b4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046b4  080046b4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046b8  080046b8  000146b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080046bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002bbc  20000014  080046d0  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002bd0  080046d0  00022bd0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010116  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000272d  00000000  00000000  00030153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001070  00000000  00000000  00032880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f18  00000000  00000000  000338f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ece  00000000  00000000  00034808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113aa  00000000  00000000  0004d6d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000941a8  00000000  00000000  0005ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2c28  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043fc  00000000  00000000  000f2c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000014 	.word	0x20000014
 800012c:	00000000 	.word	0x00000000
 8000130:	08004564 	.word	0x08004564

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000018 	.word	0x20000018
 800014c:	08004564 	.word	0x08004564

08000150 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000150:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000152:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000156:	f8df 0080 	ldr.w	r0, [pc, #128]	; 80001d8 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800015a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800015e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000162:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000164:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000166:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000168:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800016a:	d32e      	bcc.n	80001ca <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800016c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800016e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000170:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000172:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000174:	d312      	bcc.n	800019c <_CheckCase2>

08000176 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000176:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000178:	19d0      	adds	r0, r2, r7
 800017a:	bf00      	nop

0800017c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800017c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000180:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000184:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000186:	d005      	beq.n	8000194 <_CSDone>
        LDRB     R3,[R1], #+1
 8000188:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800018c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000190:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000192:	d1f3      	bne.n	800017c <_LoopCopyStraight>

08000194 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000194:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 8000196:	2001      	movs	r0, #1
        POP      {R4-R7}
 8000198:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800019a:	4770      	bx	lr

0800019c <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 800019c:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 800019e:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 80001a0:	d317      	bcc.n	80001d2 <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 80001a2:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 80001a4:	1b12      	subs	r2, r2, r4

080001a6 <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 80001a6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 80001aa:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 80001ae:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 80001b0:	d1f9      	bne.n	80001a6 <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 80001b2:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 80001b4:	d005      	beq.n	80001c2 <_No2ChunkNeeded>

080001b6 <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 80001b6:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 80001ba:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 80001be:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 80001c0:	d1f9      	bne.n	80001b6 <_LoopCopyAfterWrapAround>

080001c2 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 80001c2:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 80001c4:	2001      	movs	r0, #1
        POP      {R4-R7}
 80001c6:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80001c8:	4770      	bx	lr

080001ca <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80001ca:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80001cc:	3801      	subs	r0, #1
        CMP      R0,R2
 80001ce:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80001d0:	d2d1      	bcs.n	8000176 <_Case4>

080001d2 <_Case3>:
_Case3:
        MOVS     R0,#+0
 80001d2:	2000      	movs	r0, #0
        POP      {R4-R7}
 80001d4:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80001d6:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d8:	200015fc 	.word	0x200015fc

080001dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001dc:	b580      	push	{r7, lr}
 80001de:	b08a      	sub	sp, #40	; 0x28
 80001e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001e2:	f000 fa27 	bl	8000634 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001e6:	f000 f86b 	bl	80002c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ea:	f000 f8ab 	bl	8000344 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //CYCLCNT enable
  DWT_CTRL |= ( 1 << 0);
 80001ee:	4b2d      	ldr	r3, [pc, #180]	; (80002a4 <main+0xc8>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	4a2c      	ldr	r2, [pc, #176]	; (80002a4 <main+0xc8>)
 80001f4:	f043 0301 	orr.w	r3, r3, #1
 80001f8:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80001fa:	f002 fd91 	bl	8002d20 <SEGGER_SYSVIEW_Conf>
  SEGGER_SYSVIEW_Start();
 80001fe:	f003 fbab 	bl	8003958 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 8000202:	f107 030c 	add.w	r3, r7, #12
 8000206:	9301      	str	r3, [sp, #4]
 8000208:	2302      	movs	r3, #2
 800020a:	9300      	str	r3, [sp, #0]
 800020c:	2300      	movs	r3, #0
 800020e:	22c8      	movs	r2, #200	; 0xc8
 8000210:	4925      	ldr	r1, [pc, #148]	; (80002a8 <main+0xcc>)
 8000212:	4826      	ldr	r0, [pc, #152]	; (80002ac <main+0xd0>)
 8000214:	f001 fc05 	bl	8001a22 <xTaskCreate>
 8000218:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800021a:	69fb      	ldr	r3, [r7, #28]
 800021c:	2b01      	cmp	r3, #1
 800021e:	d00a      	beq.n	8000236 <main+0x5a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000224:	f383 8811 	msr	BASEPRI, r3
 8000228:	f3bf 8f6f 	isb	sy
 800022c:	f3bf 8f4f 	dsb	sy
 8000230:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8000232:	bf00      	nop
 8000234:	e7fe      	b.n	8000234 <main+0x58>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200,NULL, 2, &task2_handle);
 8000236:	f107 0308 	add.w	r3, r7, #8
 800023a:	9301      	str	r3, [sp, #4]
 800023c:	2302      	movs	r3, #2
 800023e:	9300      	str	r3, [sp, #0]
 8000240:	2300      	movs	r3, #0
 8000242:	22c8      	movs	r2, #200	; 0xc8
 8000244:	491a      	ldr	r1, [pc, #104]	; (80002b0 <main+0xd4>)
 8000246:	481b      	ldr	r0, [pc, #108]	; (80002b4 <main+0xd8>)
 8000248:	f001 fbeb 	bl	8001a22 <xTaskCreate>
 800024c:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 800024e:	69fb      	ldr	r3, [r7, #28]
 8000250:	2b01      	cmp	r3, #1
 8000252:	d00a      	beq.n	800026a <main+0x8e>
        __asm volatile
 8000254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000258:	f383 8811 	msr	BASEPRI, r3
 800025c:	f3bf 8f6f 	isb	sy
 8000260:	f3bf 8f4f 	dsb	sy
 8000264:	617b      	str	r3, [r7, #20]
    }
 8000266:	bf00      	nop
 8000268:	e7fe      	b.n	8000268 <main+0x8c>

  status = xTaskCreate(led_orange_handler, "LED_orange_task", 200, NULL, 2, &task3_handle);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	9301      	str	r3, [sp, #4]
 800026e:	2302      	movs	r3, #2
 8000270:	9300      	str	r3, [sp, #0]
 8000272:	2300      	movs	r3, #0
 8000274:	22c8      	movs	r2, #200	; 0xc8
 8000276:	4910      	ldr	r1, [pc, #64]	; (80002b8 <main+0xdc>)
 8000278:	4810      	ldr	r0, [pc, #64]	; (80002bc <main+0xe0>)
 800027a:	f001 fbd2 	bl	8001a22 <xTaskCreate>
 800027e:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000280:	69fb      	ldr	r3, [r7, #28]
 8000282:	2b01      	cmp	r3, #1
 8000284:	d00a      	beq.n	800029c <main+0xc0>
        __asm volatile
 8000286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800028a:	f383 8811 	msr	BASEPRI, r3
 800028e:	f3bf 8f6f 	isb	sy
 8000292:	f3bf 8f4f 	dsb	sy
 8000296:	613b      	str	r3, [r7, #16]
    }
 8000298:	bf00      	nop
 800029a:	e7fe      	b.n	800029a <main+0xbe>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 800029c:	f001 fd50 	bl	8001d40 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002a0:	e7fe      	b.n	80002a0 <main+0xc4>
 80002a2:	bf00      	nop
 80002a4:	e0001000 	.word	0xe0001000
 80002a8:	0800457c 	.word	0x0800457c
 80002ac:	080003a9 	.word	0x080003a9
 80002b0:	0800458c 	.word	0x0800458c
 80002b4:	080003e9 	.word	0x080003e9
 80002b8:	0800459c 	.word	0x0800459c
 80002bc:	080003c9 	.word	0x080003c9

080002c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b090      	sub	sp, #64	; 0x40
 80002c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002c6:	f107 0318 	add.w	r3, r7, #24
 80002ca:	2228      	movs	r2, #40	; 0x28
 80002cc:	2100      	movs	r1, #0
 80002ce:	4618      	mov	r0, r3
 80002d0:	f004 f940 	bl	8004554 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e2:	2302      	movs	r3, #2
 80002e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e6:	2301      	movs	r3, #1
 80002e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ea:	2310      	movs	r3, #16
 80002ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ee:	2302      	movs	r3, #2
 80002f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80002f2:	2300      	movs	r3, #0
 80002f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002f6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fc5f 	bl	8000bc4 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800030c:	f000 f88e 	bl	800042c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2302      	movs	r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f000 fecc 	bl	80010c8 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000336:	f000 f879 	bl	800042c <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	; 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	b086      	sub	sp, #24
 8000348:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <MX_GPIO_Init+0x5c>)
 800035a:	699b      	ldr	r3, [r3, #24]
 800035c:	4a10      	ldr	r2, [pc, #64]	; (80003a0 <MX_GPIO_Init+0x5c>)
 800035e:	f043 0304 	orr.w	r3, r3, #4
 8000362:	6193      	str	r3, [r2, #24]
 8000364:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <MX_GPIO_Init+0x5c>)
 8000366:	699b      	ldr	r3, [r3, #24]
 8000368:	f003 0304 	and.w	r3, r3, #4
 800036c:	607b      	str	r3, [r7, #4]
 800036e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	2170      	movs	r1, #112	; 0x70
 8000374:	480b      	ldr	r0, [pc, #44]	; (80003a4 <MX_GPIO_Init+0x60>)
 8000376:	f000 fbf3 	bl	8000b60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800037a:	2370      	movs	r3, #112	; 0x70
 800037c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800037e:	2301      	movs	r3, #1
 8000380:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000382:	2300      	movs	r3, #0
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000386:	2302      	movs	r3, #2
 8000388:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 0308 	add.w	r3, r7, #8
 800038e:	4619      	mov	r1, r3
 8000390:	4804      	ldr	r0, [pc, #16]	; (80003a4 <MX_GPIO_Init+0x60>)
 8000392:	f000 fa61 	bl	8000858 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000396:	bf00      	nop
 8000398:	3718      	adds	r7, #24
 800039a:	46bd      	mov	sp, r7
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40010800 	.word	0x40010800

080003a8 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
 80003ae:	6078      	str	r0, [r7, #4]

	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80003b0:	2110      	movs	r1, #16
 80003b2:	4804      	ldr	r0, [pc, #16]	; (80003c4 <led_green_handler+0x1c>)
 80003b4:	f000 fbec 	bl	8000b90 <HAL_GPIO_TogglePin>
//		HAL_Delay(1000);
		vTaskDelay(1000);
 80003b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003bc:	f001 fc88 	bl	8001cd0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_4);
 80003c0:	e7f6      	b.n	80003b0 <led_green_handler+0x8>
 80003c2:	bf00      	nop
 80003c4:	40010800 	.word	0x40010800

080003c8 <led_orange_handler>:

}


static void led_orange_handler(void* parameters)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003d0:	2120      	movs	r1, #32
 80003d2:	4804      	ldr	r0, [pc, #16]	; (80003e4 <led_orange_handler+0x1c>)
 80003d4:	f000 fbdc 	bl	8000b90 <HAL_GPIO_TogglePin>
//		HAL_Delay(800);
		vTaskDelay(800);
 80003d8:	f44f 7048 	mov.w	r0, #800	; 0x320
 80003dc:	f001 fc78 	bl	8001cd0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80003e0:	e7f6      	b.n	80003d0 <led_orange_handler+0x8>
 80003e2:	bf00      	nop
 80003e4:	40010800 	.word	0x40010800

080003e8 <led_red_handler>:

}


static void led_red_handler(void* parameters)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b082      	sub	sp, #8
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
	while(1)
	{
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80003f0:	2140      	movs	r1, #64	; 0x40
 80003f2:	4804      	ldr	r0, [pc, #16]	; (8000404 <led_red_handler+0x1c>)
 80003f4:	f000 fbcc 	bl	8000b90 <HAL_GPIO_TogglePin>
//		HAL_Delay(400);
		vTaskDelay(400);
 80003f8:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80003fc:	f001 fc68 	bl	8001cd0 <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 8000400:	e7f6      	b.n	80003f0 <led_red_handler+0x8>
 8000402:	bf00      	nop
 8000404:	40010800 	.word	0x40010800

08000408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a04      	ldr	r2, [pc, #16]	; (8000428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000416:	4293      	cmp	r3, r2
 8000418:	d101      	bne.n	800041e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800041a:	f000 f921 	bl	8000660 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	40000800 	.word	0x40000800

0800042c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800042c:	b480      	push	{r7}
 800042e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000430:	b672      	cpsid	i
}
 8000432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000434:	e7fe      	b.n	8000434 <Error_Handler+0x8>
	...

08000438 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b084      	sub	sp, #16
 800043c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800043e:	4b16      	ldr	r3, [pc, #88]	; (8000498 <HAL_MspInit+0x60>)
 8000440:	699b      	ldr	r3, [r3, #24]
 8000442:	4a15      	ldr	r2, [pc, #84]	; (8000498 <HAL_MspInit+0x60>)
 8000444:	f043 0301 	orr.w	r3, r3, #1
 8000448:	6193      	str	r3, [r2, #24]
 800044a:	4b13      	ldr	r3, [pc, #76]	; (8000498 <HAL_MspInit+0x60>)
 800044c:	699b      	ldr	r3, [r3, #24]
 800044e:	f003 0301 	and.w	r3, r3, #1
 8000452:	60bb      	str	r3, [r7, #8]
 8000454:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <HAL_MspInit+0x60>)
 8000458:	69db      	ldr	r3, [r3, #28]
 800045a:	4a0f      	ldr	r2, [pc, #60]	; (8000498 <HAL_MspInit+0x60>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000460:	61d3      	str	r3, [r2, #28]
 8000462:	4b0d      	ldr	r3, [pc, #52]	; (8000498 <HAL_MspInit+0x60>)
 8000464:	69db      	ldr	r3, [r3, #28]
 8000466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800046a:	607b      	str	r3, [r7, #4]
 800046c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800046e:	4b0b      	ldr	r3, [pc, #44]	; (800049c <HAL_MspInit+0x64>)
 8000470:	685b      	ldr	r3, [r3, #4]
 8000472:	60fb      	str	r3, [r7, #12]
 8000474:	68fb      	ldr	r3, [r7, #12]
 8000476:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800047a:	60fb      	str	r3, [r7, #12]
 800047c:	68fb      	ldr	r3, [r7, #12]
 800047e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	4a05      	ldr	r2, [pc, #20]	; (800049c <HAL_MspInit+0x64>)
 8000486:	68fb      	ldr	r3, [r7, #12]
 8000488:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 800048a:	f002 f8b9 	bl	8002600 <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 800048e:	bf00      	nop
 8000490:	3710      	adds	r7, #16
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	bf00      	nop
 8000498:	40021000 	.word	0x40021000
 800049c:	40010000 	.word	0x40010000

080004a0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	b08e      	sub	sp, #56	; 0x38
 80004a4:	af00      	add	r7, sp, #0
 80004a6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80004a8:	2300      	movs	r3, #0
 80004aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80004ac:	2300      	movs	r3, #0
 80004ae:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80004b0:	2300      	movs	r3, #0
 80004b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80004b6:	4b34      	ldr	r3, [pc, #208]	; (8000588 <HAL_InitTick+0xe8>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	4a33      	ldr	r2, [pc, #204]	; (8000588 <HAL_InitTick+0xe8>)
 80004bc:	f043 0304 	orr.w	r3, r3, #4
 80004c0:	61d3      	str	r3, [r2, #28]
 80004c2:	4b31      	ldr	r3, [pc, #196]	; (8000588 <HAL_InitTick+0xe8>)
 80004c4:	69db      	ldr	r3, [r3, #28]
 80004c6:	f003 0304 	and.w	r3, r3, #4
 80004ca:	60fb      	str	r3, [r7, #12]
 80004cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80004ce:	f107 0210 	add.w	r2, r7, #16
 80004d2:	f107 0314 	add.w	r3, r7, #20
 80004d6:	4611      	mov	r1, r2
 80004d8:	4618      	mov	r0, r3
 80004da:	f000 ff5b 	bl	8001394 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80004de:	6a3b      	ldr	r3, [r7, #32]
 80004e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80004e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d103      	bne.n	80004f0 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80004e8:	f000 ff40 	bl	800136c <HAL_RCC_GetPCLK1Freq>
 80004ec:	6378      	str	r0, [r7, #52]	; 0x34
 80004ee:	e004      	b.n	80004fa <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004f0:	f000 ff3c 	bl	800136c <HAL_RCC_GetPCLK1Freq>
 80004f4:	4603      	mov	r3, r0
 80004f6:	005b      	lsls	r3, r3, #1
 80004f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80004fc:	4a23      	ldr	r2, [pc, #140]	; (800058c <HAL_InitTick+0xec>)
 80004fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000502:	0c9b      	lsrs	r3, r3, #18
 8000504:	3b01      	subs	r3, #1
 8000506:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <HAL_InitTick+0xf0>)
 800050a:	4a22      	ldr	r2, [pc, #136]	; (8000594 <HAL_InitTick+0xf4>)
 800050c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 800050e:	4b20      	ldr	r3, [pc, #128]	; (8000590 <HAL_InitTick+0xf0>)
 8000510:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000514:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8000516:	4a1e      	ldr	r2, [pc, #120]	; (8000590 <HAL_InitTick+0xf0>)
 8000518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800051a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 800051c:	4b1c      	ldr	r3, [pc, #112]	; (8000590 <HAL_InitTick+0xf0>)
 800051e:	2200      	movs	r2, #0
 8000520:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000522:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <HAL_InitTick+0xf0>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000528:	4b19      	ldr	r3, [pc, #100]	; (8000590 <HAL_InitTick+0xf0>)
 800052a:	2200      	movs	r2, #0
 800052c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 800052e:	4818      	ldr	r0, [pc, #96]	; (8000590 <HAL_InitTick+0xf0>)
 8000530:	f000 ff7e 	bl	8001430 <HAL_TIM_Base_Init>
 8000534:	4603      	mov	r3, r0
 8000536:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800053a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800053e:	2b00      	cmp	r3, #0
 8000540:	d11b      	bne.n	800057a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8000542:	4813      	ldr	r0, [pc, #76]	; (8000590 <HAL_InitTick+0xf0>)
 8000544:	f000 ffcc 	bl	80014e0 <HAL_TIM_Base_Start_IT>
 8000548:	4603      	mov	r3, r0
 800054a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800054e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000552:	2b00      	cmp	r3, #0
 8000554:	d111      	bne.n	800057a <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000556:	201e      	movs	r0, #30
 8000558:	f000 f96f 	bl	800083a <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	2b0f      	cmp	r3, #15
 8000560:	d808      	bhi.n	8000574 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8000562:	2200      	movs	r2, #0
 8000564:	6879      	ldr	r1, [r7, #4]
 8000566:	201e      	movs	r0, #30
 8000568:	f000 f94b 	bl	8000802 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800056c:	4a0a      	ldr	r2, [pc, #40]	; (8000598 <HAL_InitTick+0xf8>)
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	6013      	str	r3, [r2, #0]
 8000572:	e002      	b.n	800057a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000574:	2301      	movs	r3, #1
 8000576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800057a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800057e:	4618      	mov	r0, r3
 8000580:	3738      	adds	r7, #56	; 0x38
 8000582:	46bd      	mov	sp, r7
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40021000 	.word	0x40021000
 800058c:	431bde83 	.word	0x431bde83
 8000590:	20000030 	.word	0x20000030
 8000594:	40000800 	.word	0x40000800
 8000598:	20000004 	.word	0x20000004

0800059c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800059c:	b480      	push	{r7}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005a0:	e7fe      	b.n	80005a0 <NMI_Handler+0x4>

080005a2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <HardFault_Handler+0x4>

080005a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005ac:	e7fe      	b.n	80005ac <MemManage_Handler+0x4>

080005ae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005ae:	b480      	push	{r7}
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <BusFault_Handler+0x4>

080005b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b8:	e7fe      	b.n	80005b8 <UsageFault_Handler+0x4>

080005ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005ba:	b480      	push	{r7}
 80005bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005be:	bf00      	nop
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bc80      	pop	{r7}
 80005c4:	4770      	bx	lr
	...

080005c8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80005cc:	4802      	ldr	r0, [pc, #8]	; (80005d8 <TIM4_IRQHandler+0x10>)
 80005ce:	f000 ffd9 	bl	8001584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	20000030 	.word	0x20000030

080005dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005e0:	bf00      	nop
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bc80      	pop	{r7}
 80005e6:	4770      	bx	lr

080005e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005e8:	480c      	ldr	r0, [pc, #48]	; (800061c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80005ea:	490d      	ldr	r1, [pc, #52]	; (8000620 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80005ec:	4a0d      	ldr	r2, [pc, #52]	; (8000624 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80005ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005f0:	e002      	b.n	80005f8 <LoopCopyDataInit>

080005f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005f6:	3304      	adds	r3, #4

080005f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005fc:	d3f9      	bcc.n	80005f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005fe:	4a0a      	ldr	r2, [pc, #40]	; (8000628 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000600:	4c0a      	ldr	r4, [pc, #40]	; (800062c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000602:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000604:	e001      	b.n	800060a <LoopFillZerobss>

08000606 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000606:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000608:	3204      	adds	r2, #4

0800060a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800060a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800060c:	d3fb      	bcc.n	8000606 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800060e:	f7ff ffe5 	bl	80005dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000612:	f003 ff5d 	bl	80044d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000616:	f7ff fde1 	bl	80001dc <main>
  bx lr
 800061a:	4770      	bx	lr
  ldr r0, =_sdata
 800061c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000620:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000624:	080046bc 	.word	0x080046bc
  ldr r2, =_sbss
 8000628:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 800062c:	20002bd0 	.word	0x20002bd0

08000630 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000630:	e7fe      	b.n	8000630 <ADC1_2_IRQHandler>
	...

08000634 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <HAL_Init+0x28>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a07      	ldr	r2, [pc, #28]	; (800065c <HAL_Init+0x28>)
 800063e:	f043 0310 	orr.w	r3, r3, #16
 8000642:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000644:	2003      	movs	r0, #3
 8000646:	f000 f8d1 	bl	80007ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800064a:	200f      	movs	r0, #15
 800064c:	f7ff ff28 	bl	80004a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000650:	f7ff fef2 	bl	8000438 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000654:	2300      	movs	r3, #0
}
 8000656:	4618      	mov	r0, r3
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	40022000 	.word	0x40022000

08000660 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <HAL_IncTick+0x1c>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	461a      	mov	r2, r3
 800066a:	4b05      	ldr	r3, [pc, #20]	; (8000680 <HAL_IncTick+0x20>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	4413      	add	r3, r2
 8000670:	4a03      	ldr	r2, [pc, #12]	; (8000680 <HAL_IncTick+0x20>)
 8000672:	6013      	str	r3, [r2, #0]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	bc80      	pop	{r7}
 800067a:	4770      	bx	lr
 800067c:	20000008 	.word	0x20000008
 8000680:	20000078 	.word	0x20000078

08000684 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b02      	ldr	r3, [pc, #8]	; (8000694 <HAL_GetTick+0x10>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	bc80      	pop	{r7}
 8000692:	4770      	bx	lr
 8000694:	20000078 	.word	0x20000078

08000698 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	f003 0307 	and.w	r3, r3, #7
 80006a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006aa:	68db      	ldr	r3, [r3, #12]
 80006ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ae:	68ba      	ldr	r2, [r7, #8]
 80006b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006b4:	4013      	ands	r3, r2
 80006b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006bc:	68bb      	ldr	r3, [r7, #8]
 80006be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006ca:	4a04      	ldr	r2, [pc, #16]	; (80006dc <__NVIC_SetPriorityGrouping+0x44>)
 80006cc:	68bb      	ldr	r3, [r7, #8]
 80006ce:	60d3      	str	r3, [r2, #12]
}
 80006d0:	bf00      	nop
 80006d2:	3714      	adds	r7, #20
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000ed00 	.word	0xe000ed00

080006e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e4:	4b04      	ldr	r3, [pc, #16]	; (80006f8 <__NVIC_GetPriorityGrouping+0x18>)
 80006e6:	68db      	ldr	r3, [r3, #12]
 80006e8:	0a1b      	lsrs	r3, r3, #8
 80006ea:	f003 0307 	and.w	r3, r3, #7
}
 80006ee:	4618      	mov	r0, r3
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr
 80006f6:	bf00      	nop
 80006f8:	e000ed00 	.word	0xe000ed00

080006fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800070a:	2b00      	cmp	r3, #0
 800070c:	db0b      	blt.n	8000726 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	f003 021f 	and.w	r2, r3, #31
 8000714:	4906      	ldr	r1, [pc, #24]	; (8000730 <__NVIC_EnableIRQ+0x34>)
 8000716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800071a:	095b      	lsrs	r3, r3, #5
 800071c:	2001      	movs	r0, #1
 800071e:	fa00 f202 	lsl.w	r2, r0, r2
 8000722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000726:	bf00      	nop
 8000728:	370c      	adds	r7, #12
 800072a:	46bd      	mov	sp, r7
 800072c:	bc80      	pop	{r7}
 800072e:	4770      	bx	lr
 8000730:	e000e100 	.word	0xe000e100

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	; (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	; 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	; 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bc80      	pop	{r7}
 80007ea:	4770      	bx	lr

080007ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b082      	sub	sp, #8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f4:	6878      	ldr	r0, [r7, #4]
 80007f6:	f7ff ff4f 	bl	8000698 <__NVIC_SetPriorityGrouping>
}
 80007fa:	bf00      	nop
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}

08000802 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000802:	b580      	push	{r7, lr}
 8000804:	b086      	sub	sp, #24
 8000806:	af00      	add	r7, sp, #0
 8000808:	4603      	mov	r3, r0
 800080a:	60b9      	str	r1, [r7, #8]
 800080c:	607a      	str	r2, [r7, #4]
 800080e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000810:	2300      	movs	r3, #0
 8000812:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000814:	f7ff ff64 	bl	80006e0 <__NVIC_GetPriorityGrouping>
 8000818:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	68b9      	ldr	r1, [r7, #8]
 800081e:	6978      	ldr	r0, [r7, #20]
 8000820:	f7ff ffb2 	bl	8000788 <NVIC_EncodePriority>
 8000824:	4602      	mov	r2, r0
 8000826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082a:	4611      	mov	r1, r2
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff81 	bl	8000734 <__NVIC_SetPriority>
}
 8000832:	bf00      	nop
 8000834:	3718      	adds	r7, #24
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	4603      	mov	r3, r0
 8000842:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff57 	bl	80006fc <__NVIC_EnableIRQ>
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
	...

08000858 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000858:	b480      	push	{r7}
 800085a:	b08b      	sub	sp, #44	; 0x2c
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000866:	2300      	movs	r3, #0
 8000868:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800086a:	e169      	b.n	8000b40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800086c:	2201      	movs	r2, #1
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	fa02 f303 	lsl.w	r3, r2, r3
 8000874:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000876:	683b      	ldr	r3, [r7, #0]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	69fa      	ldr	r2, [r7, #28]
 800087c:	4013      	ands	r3, r2
 800087e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	69fb      	ldr	r3, [r7, #28]
 8000884:	429a      	cmp	r2, r3
 8000886:	f040 8158 	bne.w	8000b3a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	4a9a      	ldr	r2, [pc, #616]	; (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d05e      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 8000894:	4a98      	ldr	r2, [pc, #608]	; (8000af8 <HAL_GPIO_Init+0x2a0>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d875      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 800089a:	4a98      	ldr	r2, [pc, #608]	; (8000afc <HAL_GPIO_Init+0x2a4>)
 800089c:	4293      	cmp	r3, r2
 800089e:	d058      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008a0:	4a96      	ldr	r2, [pc, #600]	; (8000afc <HAL_GPIO_Init+0x2a4>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d86f      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008a6:	4a96      	ldr	r2, [pc, #600]	; (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d052      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008ac:	4a94      	ldr	r2, [pc, #592]	; (8000b00 <HAL_GPIO_Init+0x2a8>)
 80008ae:	4293      	cmp	r3, r2
 80008b0:	d869      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008b2:	4a94      	ldr	r2, [pc, #592]	; (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d04c      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008b8:	4a92      	ldr	r2, [pc, #584]	; (8000b04 <HAL_GPIO_Init+0x2ac>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d863      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008be:	4a92      	ldr	r2, [pc, #584]	; (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d046      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
 80008c4:	4a90      	ldr	r2, [pc, #576]	; (8000b08 <HAL_GPIO_Init+0x2b0>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d85d      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008ca:	2b12      	cmp	r3, #18
 80008cc:	d82a      	bhi.n	8000924 <HAL_GPIO_Init+0xcc>
 80008ce:	2b12      	cmp	r3, #18
 80008d0:	d859      	bhi.n	8000986 <HAL_GPIO_Init+0x12e>
 80008d2:	a201      	add	r2, pc, #4	; (adr r2, 80008d8 <HAL_GPIO_Init+0x80>)
 80008d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008d8:	08000953 	.word	0x08000953
 80008dc:	0800092d 	.word	0x0800092d
 80008e0:	0800093f 	.word	0x0800093f
 80008e4:	08000981 	.word	0x08000981
 80008e8:	08000987 	.word	0x08000987
 80008ec:	08000987 	.word	0x08000987
 80008f0:	08000987 	.word	0x08000987
 80008f4:	08000987 	.word	0x08000987
 80008f8:	08000987 	.word	0x08000987
 80008fc:	08000987 	.word	0x08000987
 8000900:	08000987 	.word	0x08000987
 8000904:	08000987 	.word	0x08000987
 8000908:	08000987 	.word	0x08000987
 800090c:	08000987 	.word	0x08000987
 8000910:	08000987 	.word	0x08000987
 8000914:	08000987 	.word	0x08000987
 8000918:	08000987 	.word	0x08000987
 800091c:	08000935 	.word	0x08000935
 8000920:	08000949 	.word	0x08000949
 8000924:	4a79      	ldr	r2, [pc, #484]	; (8000b0c <HAL_GPIO_Init+0x2b4>)
 8000926:	4293      	cmp	r3, r2
 8000928:	d013      	beq.n	8000952 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800092a:	e02c      	b.n	8000986 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	623b      	str	r3, [r7, #32]
          break;
 8000932:	e029      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	3304      	adds	r3, #4
 800093a:	623b      	str	r3, [r7, #32]
          break;
 800093c:	e024      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	68db      	ldr	r3, [r3, #12]
 8000942:	3308      	adds	r3, #8
 8000944:	623b      	str	r3, [r7, #32]
          break;
 8000946:	e01f      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000948:	683b      	ldr	r3, [r7, #0]
 800094a:	68db      	ldr	r3, [r3, #12]
 800094c:	330c      	adds	r3, #12
 800094e:	623b      	str	r3, [r7, #32]
          break;
 8000950:	e01a      	b.n	8000988 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	689b      	ldr	r3, [r3, #8]
 8000956:	2b00      	cmp	r3, #0
 8000958:	d102      	bne.n	8000960 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800095a:	2304      	movs	r3, #4
 800095c:	623b      	str	r3, [r7, #32]
          break;
 800095e:	e013      	b.n	8000988 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000960:	683b      	ldr	r3, [r7, #0]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d105      	bne.n	8000974 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000968:	2308      	movs	r3, #8
 800096a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	69fa      	ldr	r2, [r7, #28]
 8000970:	611a      	str	r2, [r3, #16]
          break;
 8000972:	e009      	b.n	8000988 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000974:	2308      	movs	r3, #8
 8000976:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	69fa      	ldr	r2, [r7, #28]
 800097c:	615a      	str	r2, [r3, #20]
          break;
 800097e:	e003      	b.n	8000988 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000980:	2300      	movs	r3, #0
 8000982:	623b      	str	r3, [r7, #32]
          break;
 8000984:	e000      	b.n	8000988 <HAL_GPIO_Init+0x130>
          break;
 8000986:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000988:	69bb      	ldr	r3, [r7, #24]
 800098a:	2bff      	cmp	r3, #255	; 0xff
 800098c:	d801      	bhi.n	8000992 <HAL_GPIO_Init+0x13a>
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	e001      	b.n	8000996 <HAL_GPIO_Init+0x13e>
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3304      	adds	r3, #4
 8000996:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	2bff      	cmp	r3, #255	; 0xff
 800099c:	d802      	bhi.n	80009a4 <HAL_GPIO_Init+0x14c>
 800099e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a0:	009b      	lsls	r3, r3, #2
 80009a2:	e002      	b.n	80009aa <HAL_GPIO_Init+0x152>
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	3b08      	subs	r3, #8
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	681a      	ldr	r2, [r3, #0]
 80009b0:	210f      	movs	r1, #15
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	fa01 f303 	lsl.w	r3, r1, r3
 80009b8:	43db      	mvns	r3, r3
 80009ba:	401a      	ands	r2, r3
 80009bc:	6a39      	ldr	r1, [r7, #32]
 80009be:	693b      	ldr	r3, [r7, #16]
 80009c0:	fa01 f303 	lsl.w	r3, r1, r3
 80009c4:	431a      	orrs	r2, r3
 80009c6:	697b      	ldr	r3, [r7, #20]
 80009c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	685b      	ldr	r3, [r3, #4]
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	f000 80b1 	beq.w	8000b3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009d8:	4b4d      	ldr	r3, [pc, #308]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009da:	699b      	ldr	r3, [r3, #24]
 80009dc:	4a4c      	ldr	r2, [pc, #304]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009de:	f043 0301 	orr.w	r3, r3, #1
 80009e2:	6193      	str	r3, [r2, #24]
 80009e4:	4b4a      	ldr	r3, [pc, #296]	; (8000b10 <HAL_GPIO_Init+0x2b8>)
 80009e6:	699b      	ldr	r3, [r3, #24]
 80009e8:	f003 0301 	and.w	r3, r3, #1
 80009ec:	60bb      	str	r3, [r7, #8]
 80009ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80009f0:	4a48      	ldr	r2, [pc, #288]	; (8000b14 <HAL_GPIO_Init+0x2bc>)
 80009f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80009fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a00:	f003 0303 	and.w	r3, r3, #3
 8000a04:	009b      	lsls	r3, r3, #2
 8000a06:	220f      	movs	r2, #15
 8000a08:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0c:	43db      	mvns	r3, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	4a40      	ldr	r2, [pc, #256]	; (8000b18 <HAL_GPIO_Init+0x2c0>)
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	d013      	beq.n	8000a44 <HAL_GPIO_Init+0x1ec>
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	4a3f      	ldr	r2, [pc, #252]	; (8000b1c <HAL_GPIO_Init+0x2c4>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	d00d      	beq.n	8000a40 <HAL_GPIO_Init+0x1e8>
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	4a3e      	ldr	r2, [pc, #248]	; (8000b20 <HAL_GPIO_Init+0x2c8>)
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d007      	beq.n	8000a3c <HAL_GPIO_Init+0x1e4>
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4a3d      	ldr	r2, [pc, #244]	; (8000b24 <HAL_GPIO_Init+0x2cc>)
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d101      	bne.n	8000a38 <HAL_GPIO_Init+0x1e0>
 8000a34:	2303      	movs	r3, #3
 8000a36:	e006      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a38:	2304      	movs	r3, #4
 8000a3a:	e004      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a3c:	2302      	movs	r3, #2
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <HAL_GPIO_Init+0x1ee>
 8000a44:	2300      	movs	r3, #0
 8000a46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a56:	492f      	ldr	r1, [pc, #188]	; (8000b14 <HAL_GPIO_Init+0x2bc>)
 8000a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d006      	beq.n	8000a7e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a70:	4b2d      	ldr	r3, [pc, #180]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	492c      	ldr	r1, [pc, #176]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a76:	69bb      	ldr	r3, [r7, #24]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	600b      	str	r3, [r1, #0]
 8000a7c:	e006      	b.n	8000a8c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000a7e:	4b2a      	ldr	r3, [pc, #168]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	4928      	ldr	r1, [pc, #160]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a88:	4013      	ands	r3, r2
 8000a8a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d006      	beq.n	8000aa6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000a98:	4b23      	ldr	r3, [pc, #140]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9a:	685a      	ldr	r2, [r3, #4]
 8000a9c:	4922      	ldr	r1, [pc, #136]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000a9e:	69bb      	ldr	r3, [r7, #24]
 8000aa0:	4313      	orrs	r3, r2
 8000aa2:	604b      	str	r3, [r1, #4]
 8000aa4:	e006      	b.n	8000ab4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000aa6:	4b20      	ldr	r3, [pc, #128]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aa8:	685a      	ldr	r2, [r3, #4]
 8000aaa:	69bb      	ldr	r3, [r7, #24]
 8000aac:	43db      	mvns	r3, r3
 8000aae:	491e      	ldr	r1, [pc, #120]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	685b      	ldr	r3, [r3, #4]
 8000ab8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d006      	beq.n	8000ace <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac2:	689a      	ldr	r2, [r3, #8]
 8000ac4:	4918      	ldr	r1, [pc, #96]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	608b      	str	r3, [r1, #8]
 8000acc:	e006      	b.n	8000adc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad0:	689a      	ldr	r2, [r3, #8]
 8000ad2:	69bb      	ldr	r3, [r7, #24]
 8000ad4:	43db      	mvns	r3, r3
 8000ad6:	4914      	ldr	r1, [pc, #80]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000ad8:	4013      	ands	r3, r2
 8000ada:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000adc:	683b      	ldr	r3, [r7, #0]
 8000ade:	685b      	ldr	r3, [r3, #4]
 8000ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d021      	beq.n	8000b2c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ae8:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	490e      	ldr	r1, [pc, #56]	; (8000b28 <HAL_GPIO_Init+0x2d0>)
 8000aee:	69bb      	ldr	r3, [r7, #24]
 8000af0:	4313      	orrs	r3, r2
 8000af2:	60cb      	str	r3, [r1, #12]
 8000af4:	e021      	b.n	8000b3a <HAL_GPIO_Init+0x2e2>
 8000af6:	bf00      	nop
 8000af8:	10320000 	.word	0x10320000
 8000afc:	10310000 	.word	0x10310000
 8000b00:	10220000 	.word	0x10220000
 8000b04:	10210000 	.word	0x10210000
 8000b08:	10120000 	.word	0x10120000
 8000b0c:	10110000 	.word	0x10110000
 8000b10:	40021000 	.word	0x40021000
 8000b14:	40010000 	.word	0x40010000
 8000b18:	40010800 	.word	0x40010800
 8000b1c:	40010c00 	.word	0x40010c00
 8000b20:	40011000 	.word	0x40011000
 8000b24:	40011400 	.word	0x40011400
 8000b28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b2c:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000b2e:	68da      	ldr	r2, [r3, #12]
 8000b30:	69bb      	ldr	r3, [r7, #24]
 8000b32:	43db      	mvns	r3, r3
 8000b34:	4909      	ldr	r1, [pc, #36]	; (8000b5c <HAL_GPIO_Init+0x304>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b3c:	3301      	adds	r3, #1
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	681a      	ldr	r2, [r3, #0]
 8000b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b46:	fa22 f303 	lsr.w	r3, r2, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	f47f ae8e 	bne.w	800086c <HAL_GPIO_Init+0x14>
  }
}
 8000b50:	bf00      	nop
 8000b52:	bf00      	nop
 8000b54:	372c      	adds	r7, #44	; 0x2c
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bc80      	pop	{r7}
 8000b5a:	4770      	bx	lr
 8000b5c:	40010400 	.word	0x40010400

08000b60 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	807b      	strh	r3, [r7, #2]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000b70:	787b      	ldrb	r3, [r7, #1]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d003      	beq.n	8000b7e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b76:	887a      	ldrh	r2, [r7, #2]
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000b7c:	e003      	b.n	8000b86 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000b7e:	887b      	ldrh	r3, [r7, #2]
 8000b80:	041a      	lsls	r2, r3, #16
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	611a      	str	r2, [r3, #16]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	460b      	mov	r3, r1
 8000b9a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	68db      	ldr	r3, [r3, #12]
 8000ba0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000ba2:	887a      	ldrh	r2, [r7, #2]
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	041a      	lsls	r2, r3, #16
 8000baa:	68fb      	ldr	r3, [r7, #12]
 8000bac:	43d9      	mvns	r1, r3
 8000bae:	887b      	ldrh	r3, [r7, #2]
 8000bb0:	400b      	ands	r3, r1
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	611a      	str	r2, [r3, #16]
}
 8000bb8:	bf00      	nop
 8000bba:	3714      	adds	r7, #20
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bc80      	pop	{r7}
 8000bc0:	4770      	bx	lr
	...

08000bc4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d101      	bne.n	8000bd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd2:	2301      	movs	r3, #1
 8000bd4:	e272      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	f000 8087 	beq.w	8000cf2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000be4:	4b92      	ldr	r3, [pc, #584]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f003 030c 	and.w	r3, r3, #12
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d00c      	beq.n	8000c0a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000bf0:	4b8f      	ldr	r3, [pc, #572]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	f003 030c 	and.w	r3, r3, #12
 8000bf8:	2b08      	cmp	r3, #8
 8000bfa:	d112      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
 8000bfc:	4b8c      	ldr	r3, [pc, #560]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c08:	d10b      	bne.n	8000c22 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c0a:	4b89      	ldr	r3, [pc, #548]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d06c      	beq.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d168      	bne.n	8000cf0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	e24c      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d106      	bne.n	8000c3a <HAL_RCC_OscConfig+0x76>
 8000c2c:	4b80      	ldr	r3, [pc, #512]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a7f      	ldr	r2, [pc, #508]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c36:	6013      	str	r3, [r2, #0]
 8000c38:	e02e      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d10c      	bne.n	8000c5c <HAL_RCC_OscConfig+0x98>
 8000c42:	4b7b      	ldr	r3, [pc, #492]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a7a      	ldr	r2, [pc, #488]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c4c:	6013      	str	r3, [r2, #0]
 8000c4e:	4b78      	ldr	r3, [pc, #480]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a77      	ldr	r2, [pc, #476]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c54:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c58:	6013      	str	r3, [r2, #0]
 8000c5a:	e01d      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c64:	d10c      	bne.n	8000c80 <HAL_RCC_OscConfig+0xbc>
 8000c66:	4b72      	ldr	r3, [pc, #456]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	4a71      	ldr	r2, [pc, #452]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c70:	6013      	str	r3, [r2, #0]
 8000c72:	4b6f      	ldr	r3, [pc, #444]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a6e      	ldr	r2, [pc, #440]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c7c:	6013      	str	r3, [r2, #0]
 8000c7e:	e00b      	b.n	8000c98 <HAL_RCC_OscConfig+0xd4>
 8000c80:	4b6b      	ldr	r3, [pc, #428]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a6a      	ldr	r2, [pc, #424]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c86:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c8a:	6013      	str	r3, [r2, #0]
 8000c8c:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a67      	ldr	r2, [pc, #412]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000c92:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c96:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d013      	beq.n	8000cc8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ca0:	f7ff fcf0 	bl	8000684 <HAL_GetTick>
 8000ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ca6:	e008      	b.n	8000cba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000ca8:	f7ff fcec 	bl	8000684 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	693b      	ldr	r3, [r7, #16]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	2b64      	cmp	r3, #100	; 0x64
 8000cb4:	d901      	bls.n	8000cba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	e200      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cba:	4b5d      	ldr	r3, [pc, #372]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d0f0      	beq.n	8000ca8 <HAL_RCC_OscConfig+0xe4>
 8000cc6:	e014      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cc8:	f7ff fcdc 	bl	8000684 <HAL_GetTick>
 8000ccc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cce:	e008      	b.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000cd0:	f7ff fcd8 	bl	8000684 <HAL_GetTick>
 8000cd4:	4602      	mov	r2, r0
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	1ad3      	subs	r3, r2, r3
 8000cda:	2b64      	cmp	r3, #100	; 0x64
 8000cdc:	d901      	bls.n	8000ce2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000cde:	2303      	movs	r3, #3
 8000ce0:	e1ec      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ce2:	4b53      	ldr	r3, [pc, #332]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1f0      	bne.n	8000cd0 <HAL_RCC_OscConfig+0x10c>
 8000cee:	e000      	b.n	8000cf2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000cf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d063      	beq.n	8000dc6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000cfe:	4b4c      	ldr	r3, [pc, #304]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 030c 	and.w	r3, r3, #12
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d00b      	beq.n	8000d22 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d0a:	4b49      	ldr	r3, [pc, #292]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d0c:	685b      	ldr	r3, [r3, #4]
 8000d0e:	f003 030c 	and.w	r3, r3, #12
 8000d12:	2b08      	cmp	r3, #8
 8000d14:	d11c      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
 8000d16:	4b46      	ldr	r3, [pc, #280]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d116      	bne.n	8000d50 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d22:	4b43      	ldr	r3, [pc, #268]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f003 0302 	and.w	r3, r3, #2
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d005      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	691b      	ldr	r3, [r3, #16]
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d001      	beq.n	8000d3a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e1c0      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3a:	4b3d      	ldr	r3, [pc, #244]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	695b      	ldr	r3, [r3, #20]
 8000d46:	00db      	lsls	r3, r3, #3
 8000d48:	4939      	ldr	r1, [pc, #228]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d4e:	e03a      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	691b      	ldr	r3, [r3, #16]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d020      	beq.n	8000d9a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d58:	4b36      	ldr	r3, [pc, #216]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d5e:	f7ff fc91 	bl	8000684 <HAL_GetTick>
 8000d62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d64:	e008      	b.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000d66:	f7ff fc8d 	bl	8000684 <HAL_GetTick>
 8000d6a:	4602      	mov	r2, r0
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	1ad3      	subs	r3, r2, r3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d901      	bls.n	8000d78 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000d74:	2303      	movs	r3, #3
 8000d76:	e1a1      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d78:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	f003 0302 	and.w	r3, r3, #2
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d0f0      	beq.n	8000d66 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d84:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	695b      	ldr	r3, [r3, #20]
 8000d90:	00db      	lsls	r3, r3, #3
 8000d92:	4927      	ldr	r1, [pc, #156]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000d94:	4313      	orrs	r3, r2
 8000d96:	600b      	str	r3, [r1, #0]
 8000d98:	e015      	b.n	8000dc6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d9a:	4b26      	ldr	r3, [pc, #152]	; (8000e34 <HAL_RCC_OscConfig+0x270>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000da0:	f7ff fc70 	bl	8000684 <HAL_GetTick>
 8000da4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000da6:	e008      	b.n	8000dba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000da8:	f7ff fc6c 	bl	8000684 <HAL_GetTick>
 8000dac:	4602      	mov	r2, r0
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d901      	bls.n	8000dba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000db6:	2303      	movs	r3, #3
 8000db8:	e180      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f0      	bne.n	8000da8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d03a      	beq.n	8000e48 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	699b      	ldr	r3, [r3, #24]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d019      	beq.n	8000e0e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000dda:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000ddc:	2201      	movs	r2, #1
 8000dde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000de0:	f7ff fc50 	bl	8000684 <HAL_GetTick>
 8000de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000de6:	e008      	b.n	8000dfa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000de8:	f7ff fc4c 	bl	8000684 <HAL_GetTick>
 8000dec:	4602      	mov	r2, r0
 8000dee:	693b      	ldr	r3, [r7, #16]
 8000df0:	1ad3      	subs	r3, r2, r3
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d901      	bls.n	8000dfa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000df6:	2303      	movs	r3, #3
 8000df8:	e160      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000dfa:	4b0d      	ldr	r3, [pc, #52]	; (8000e30 <HAL_RCC_OscConfig+0x26c>)
 8000dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d0f0      	beq.n	8000de8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000e06:	2001      	movs	r0, #1
 8000e08:	f000 faf4 	bl	80013f4 <RCC_Delay>
 8000e0c:	e01c      	b.n	8000e48 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e0e:	4b0a      	ldr	r3, [pc, #40]	; (8000e38 <HAL_RCC_OscConfig+0x274>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e14:	f7ff fc36 	bl	8000684 <HAL_GetTick>
 8000e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e1a:	e00f      	b.n	8000e3c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e1c:	f7ff fc32 	bl	8000684 <HAL_GetTick>
 8000e20:	4602      	mov	r2, r0
 8000e22:	693b      	ldr	r3, [r7, #16]
 8000e24:	1ad3      	subs	r3, r2, r3
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d908      	bls.n	8000e3c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e146      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	42420000 	.word	0x42420000
 8000e38:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e3c:	4b92      	ldr	r3, [pc, #584]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	f003 0302 	and.w	r3, r3, #2
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d1e9      	bne.n	8000e1c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	f003 0304 	and.w	r3, r3, #4
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	f000 80a6 	beq.w	8000fa2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e56:	2300      	movs	r3, #0
 8000e58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e5a:	4b8b      	ldr	r3, [pc, #556]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e5c:	69db      	ldr	r3, [r3, #28]
 8000e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d10d      	bne.n	8000e82 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e66:	4b88      	ldr	r3, [pc, #544]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e68:	69db      	ldr	r3, [r3, #28]
 8000e6a:	4a87      	ldr	r2, [pc, #540]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	61d3      	str	r3, [r2, #28]
 8000e72:	4b85      	ldr	r3, [pc, #532]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000e74:	69db      	ldr	r3, [r3, #28]
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e82:	4b82      	ldr	r3, [pc, #520]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d118      	bne.n	8000ec0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e8e:	4b7f      	ldr	r3, [pc, #508]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4a7e      	ldr	r2, [pc, #504]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e9a:	f7ff fbf3 	bl	8000684 <HAL_GetTick>
 8000e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ea0:	e008      	b.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ea2:	f7ff fbef 	bl	8000684 <HAL_GetTick>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	1ad3      	subs	r3, r2, r3
 8000eac:	2b64      	cmp	r3, #100	; 0x64
 8000eae:	d901      	bls.n	8000eb4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8000eb0:	2303      	movs	r3, #3
 8000eb2:	e103      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb4:	4b75      	ldr	r3, [pc, #468]	; (800108c <HAL_RCC_OscConfig+0x4c8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d0f0      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b01      	cmp	r3, #1
 8000ec6:	d106      	bne.n	8000ed6 <HAL_RCC_OscConfig+0x312>
 8000ec8:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000eca:	6a1b      	ldr	r3, [r3, #32]
 8000ecc:	4a6e      	ldr	r2, [pc, #440]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ece:	f043 0301 	orr.w	r3, r3, #1
 8000ed2:	6213      	str	r3, [r2, #32]
 8000ed4:	e02d      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	68db      	ldr	r3, [r3, #12]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d10c      	bne.n	8000ef8 <HAL_RCC_OscConfig+0x334>
 8000ede:	4b6a      	ldr	r3, [pc, #424]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ee0:	6a1b      	ldr	r3, [r3, #32]
 8000ee2:	4a69      	ldr	r2, [pc, #420]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ee4:	f023 0301 	bic.w	r3, r3, #1
 8000ee8:	6213      	str	r3, [r2, #32]
 8000eea:	4b67      	ldr	r3, [pc, #412]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000eec:	6a1b      	ldr	r3, [r3, #32]
 8000eee:	4a66      	ldr	r2, [pc, #408]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ef0:	f023 0304 	bic.w	r3, r3, #4
 8000ef4:	6213      	str	r3, [r2, #32]
 8000ef6:	e01c      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b05      	cmp	r3, #5
 8000efe:	d10c      	bne.n	8000f1a <HAL_RCC_OscConfig+0x356>
 8000f00:	4b61      	ldr	r3, [pc, #388]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f02:	6a1b      	ldr	r3, [r3, #32]
 8000f04:	4a60      	ldr	r2, [pc, #384]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f06:	f043 0304 	orr.w	r3, r3, #4
 8000f0a:	6213      	str	r3, [r2, #32]
 8000f0c:	4b5e      	ldr	r3, [pc, #376]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f0e:	6a1b      	ldr	r3, [r3, #32]
 8000f10:	4a5d      	ldr	r2, [pc, #372]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	6213      	str	r3, [r2, #32]
 8000f18:	e00b      	b.n	8000f32 <HAL_RCC_OscConfig+0x36e>
 8000f1a:	4b5b      	ldr	r3, [pc, #364]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f1c:	6a1b      	ldr	r3, [r3, #32]
 8000f1e:	4a5a      	ldr	r2, [pc, #360]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f20:	f023 0301 	bic.w	r3, r3, #1
 8000f24:	6213      	str	r3, [r2, #32]
 8000f26:	4b58      	ldr	r3, [pc, #352]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f28:	6a1b      	ldr	r3, [r3, #32]
 8000f2a:	4a57      	ldr	r2, [pc, #348]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f2c:	f023 0304 	bic.w	r3, r3, #4
 8000f30:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d015      	beq.n	8000f66 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f3a:	f7ff fba3 	bl	8000684 <HAL_GetTick>
 8000f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f40:	e00a      	b.n	8000f58 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f42:	f7ff fb9f 	bl	8000684 <HAL_GetTick>
 8000f46:	4602      	mov	r2, r0
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f50:	4293      	cmp	r3, r2
 8000f52:	d901      	bls.n	8000f58 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8000f54:	2303      	movs	r3, #3
 8000f56:	e0b1      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f58:	4b4b      	ldr	r3, [pc, #300]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f5a:	6a1b      	ldr	r3, [r3, #32]
 8000f5c:	f003 0302 	and.w	r3, r3, #2
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d0ee      	beq.n	8000f42 <HAL_RCC_OscConfig+0x37e>
 8000f64:	e014      	b.n	8000f90 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f66:	f7ff fb8d 	bl	8000684 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f6c:	e00a      	b.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f6e:	f7ff fb89 	bl	8000684 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d901      	bls.n	8000f84 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8000f80:	2303      	movs	r3, #3
 8000f82:	e09b      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f84:	4b40      	ldr	r3, [pc, #256]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f86:	6a1b      	ldr	r3, [r3, #32]
 8000f88:	f003 0302 	and.w	r3, r3, #2
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1ee      	bne.n	8000f6e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8000f90:	7dfb      	ldrb	r3, [r7, #23]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d105      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f96:	4b3c      	ldr	r3, [pc, #240]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a3b      	ldr	r2, [pc, #236]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8087 	beq.w	80010ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000fac:	4b36      	ldr	r3, [pc, #216]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f003 030c 	and.w	r3, r3, #12
 8000fb4:	2b08      	cmp	r3, #8
 8000fb6:	d061      	beq.n	800107c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	69db      	ldr	r3, [r3, #28]
 8000fbc:	2b02      	cmp	r3, #2
 8000fbe:	d146      	bne.n	800104e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fc0:	4b33      	ldr	r3, [pc, #204]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc6:	f7ff fb5d 	bl	8000684 <HAL_GetTick>
 8000fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fcc:	e008      	b.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fce:	f7ff fb59 	bl	8000684 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d901      	bls.n	8000fe0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	e06d      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d1f0      	bne.n	8000fce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	6a1b      	ldr	r3, [r3, #32]
 8000ff0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ff4:	d108      	bne.n	8001008 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ff6:	4b24      	ldr	r3, [pc, #144]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	4921      	ldr	r1, [pc, #132]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001004:	4313      	orrs	r3, r2
 8001006:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001008:	4b1f      	ldr	r3, [pc, #124]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a19      	ldr	r1, [r3, #32]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001018:	430b      	orrs	r3, r1
 800101a:	491b      	ldr	r1, [pc, #108]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 800101c:	4313      	orrs	r3, r2
 800101e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001020:	4b1b      	ldr	r3, [pc, #108]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8001022:	2201      	movs	r2, #1
 8001024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001026:	f7ff fb2d 	bl	8000684 <HAL_GetTick>
 800102a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800102c:	e008      	b.n	8001040 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800102e:	f7ff fb29 	bl	8000684 <HAL_GetTick>
 8001032:	4602      	mov	r2, r0
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b02      	cmp	r3, #2
 800103a:	d901      	bls.n	8001040 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800103c:	2303      	movs	r3, #3
 800103e:	e03d      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001040:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001048:	2b00      	cmp	r3, #0
 800104a:	d0f0      	beq.n	800102e <HAL_RCC_OscConfig+0x46a>
 800104c:	e035      	b.n	80010ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800104e:	4b10      	ldr	r3, [pc, #64]	; (8001090 <HAL_RCC_OscConfig+0x4cc>)
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001054:	f7ff fb16 	bl	8000684 <HAL_GetTick>
 8001058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800105a:	e008      	b.n	800106e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800105c:	f7ff fb12 	bl	8000684 <HAL_GetTick>
 8001060:	4602      	mov	r2, r0
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	2b02      	cmp	r3, #2
 8001068:	d901      	bls.n	800106e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800106a:	2303      	movs	r3, #3
 800106c:	e026      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800106e:	4b06      	ldr	r3, [pc, #24]	; (8001088 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001076:	2b00      	cmp	r3, #0
 8001078:	d1f0      	bne.n	800105c <HAL_RCC_OscConfig+0x498>
 800107a:	e01e      	b.n	80010ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d107      	bne.n	8001094 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001084:	2301      	movs	r3, #1
 8001086:	e019      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
 8001088:	40021000 	.word	0x40021000
 800108c:	40007000 	.word	0x40007000
 8001090:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001094:	4b0b      	ldr	r3, [pc, #44]	; (80010c4 <HAL_RCC_OscConfig+0x500>)
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6a1b      	ldr	r3, [r3, #32]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d106      	bne.n	80010b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010b2:	429a      	cmp	r2, r3
 80010b4:	d001      	beq.n	80010ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80010b6:	2301      	movs	r3, #1
 80010b8:	e000      	b.n	80010bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80010ba:	2300      	movs	r3, #0
}
 80010bc:	4618      	mov	r0, r3
 80010be:	3718      	adds	r7, #24
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40021000 	.word	0x40021000

080010c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
 80010d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d101      	bne.n	80010dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0d0      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80010dc:	4b6a      	ldr	r3, [pc, #424]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 0307 	and.w	r3, r3, #7
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d910      	bls.n	800110c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010ea:	4b67      	ldr	r3, [pc, #412]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f023 0207 	bic.w	r2, r3, #7
 80010f2:	4965      	ldr	r1, [pc, #404]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80010fa:	4b63      	ldr	r3, [pc, #396]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f003 0307 	and.w	r3, r3, #7
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	d001      	beq.n	800110c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001108:	2301      	movs	r3, #1
 800110a:	e0b8      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d020      	beq.n	800115a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f003 0304 	and.w	r3, r3, #4
 8001120:	2b00      	cmp	r3, #0
 8001122:	d005      	beq.n	8001130 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001124:	4b59      	ldr	r3, [pc, #356]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	4a58      	ldr	r2, [pc, #352]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800112a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800112e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f003 0308 	and.w	r3, r3, #8
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800113c:	4b53      	ldr	r3, [pc, #332]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4a52      	ldr	r2, [pc, #328]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001142:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001146:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001148:	4b50      	ldr	r3, [pc, #320]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	494d      	ldr	r1, [pc, #308]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001156:	4313      	orrs	r3, r2
 8001158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	2b00      	cmp	r3, #0
 8001164:	d040      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d107      	bne.n	800117e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800116e:	4b47      	ldr	r3, [pc, #284]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001176:	2b00      	cmp	r3, #0
 8001178:	d115      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	e07f      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b02      	cmp	r3, #2
 8001184:	d107      	bne.n	8001196 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001186:	4b41      	ldr	r3, [pc, #260]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	e073      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001196:	4b3d      	ldr	r3, [pc, #244]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d101      	bne.n	80011a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	e06b      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011a6:	4b39      	ldr	r3, [pc, #228]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f023 0203 	bic.w	r2, r3, #3
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	4936      	ldr	r1, [pc, #216]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011b4:	4313      	orrs	r3, r2
 80011b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b8:	f7ff fa64 	bl	8000684 <HAL_GetTick>
 80011bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011be:	e00a      	b.n	80011d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011c0:	f7ff fa60 	bl	8000684 <HAL_GetTick>
 80011c4:	4602      	mov	r2, r0
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	1ad3      	subs	r3, r2, r3
 80011ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d901      	bls.n	80011d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011d2:	2303      	movs	r3, #3
 80011d4:	e053      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011d6:	4b2d      	ldr	r3, [pc, #180]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 020c 	and.w	r2, r3, #12
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d1eb      	bne.n	80011c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80011e8:	4b27      	ldr	r3, [pc, #156]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d210      	bcs.n	8001218 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b24      	ldr	r3, [pc, #144]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f023 0207 	bic.w	r2, r3, #7
 80011fe:	4922      	ldr	r1, [pc, #136]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	4313      	orrs	r3, r2
 8001204:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_RCC_ClockConfig+0x1c0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f003 0307 	and.w	r3, r3, #7
 800120e:	683a      	ldr	r2, [r7, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d001      	beq.n	8001218 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001214:	2301      	movs	r3, #1
 8001216:	e032      	b.n	800127e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 0304 	and.w	r3, r3, #4
 8001220:	2b00      	cmp	r3, #0
 8001222:	d008      	beq.n	8001236 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001224:	4b19      	ldr	r3, [pc, #100]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	4916      	ldr	r1, [pc, #88]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001232:	4313      	orrs	r3, r2
 8001234:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d009      	beq.n	8001256 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001242:	4b12      	ldr	r3, [pc, #72]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	691b      	ldr	r3, [r3, #16]
 800124e:	00db      	lsls	r3, r3, #3
 8001250:	490e      	ldr	r1, [pc, #56]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 8001252:	4313      	orrs	r3, r2
 8001254:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001256:	f000 f821 	bl	800129c <HAL_RCC_GetSysClockFreq>
 800125a:	4602      	mov	r2, r0
 800125c:	4b0b      	ldr	r3, [pc, #44]	; (800128c <HAL_RCC_ClockConfig+0x1c4>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 030f 	and.w	r3, r3, #15
 8001266:	490a      	ldr	r1, [pc, #40]	; (8001290 <HAL_RCC_ClockConfig+0x1c8>)
 8001268:	5ccb      	ldrb	r3, [r1, r3]
 800126a:	fa22 f303 	lsr.w	r3, r2, r3
 800126e:	4a09      	ldr	r2, [pc, #36]	; (8001294 <HAL_RCC_ClockConfig+0x1cc>)
 8001270:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <HAL_RCC_ClockConfig+0x1d0>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff f912 	bl	80004a0 <HAL_InitTick>

  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	40022000 	.word	0x40022000
 800128c:	40021000 	.word	0x40021000
 8001290:	08004688 	.word	0x08004688
 8001294:	20000000 	.word	0x20000000
 8001298:	20000004 	.word	0x20000004

0800129c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800129c:	b490      	push	{r4, r7}
 800129e:	b08a      	sub	sp, #40	; 0x28
 80012a0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80012a2:	4b29      	ldr	r3, [pc, #164]	; (8001348 <HAL_RCC_GetSysClockFreq+0xac>)
 80012a4:	1d3c      	adds	r4, r7, #4
 80012a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80012ac:	f240 2301 	movw	r3, #513	; 0x201
 80012b0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80012b2:	2300      	movs	r3, #0
 80012b4:	61fb      	str	r3, [r7, #28]
 80012b6:	2300      	movs	r3, #0
 80012b8:	61bb      	str	r3, [r7, #24]
 80012ba:	2300      	movs	r3, #0
 80012bc:	627b      	str	r3, [r7, #36]	; 0x24
 80012be:	2300      	movs	r3, #0
 80012c0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80012c2:	2300      	movs	r3, #0
 80012c4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <HAL_RCC_GetSysClockFreq+0xb0>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	f003 030c 	and.w	r3, r3, #12
 80012d2:	2b04      	cmp	r3, #4
 80012d4:	d002      	beq.n	80012dc <HAL_RCC_GetSysClockFreq+0x40>
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d003      	beq.n	80012e2 <HAL_RCC_GetSysClockFreq+0x46>
 80012da:	e02b      	b.n	8001334 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80012dc:	4b1c      	ldr	r3, [pc, #112]	; (8001350 <HAL_RCC_GetSysClockFreq+0xb4>)
 80012de:	623b      	str	r3, [r7, #32]
      break;
 80012e0:	e02b      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	0c9b      	lsrs	r3, r3, #18
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	3328      	adds	r3, #40	; 0x28
 80012ec:	443b      	add	r3, r7
 80012ee:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80012f2:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80012f4:	69fb      	ldr	r3, [r7, #28]
 80012f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d012      	beq.n	8001324 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80012fe:	4b13      	ldr	r3, [pc, #76]	; (800134c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	0c5b      	lsrs	r3, r3, #17
 8001304:	f003 0301 	and.w	r3, r3, #1
 8001308:	3328      	adds	r3, #40	; 0x28
 800130a:	443b      	add	r3, r7
 800130c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001310:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001312:	697b      	ldr	r3, [r7, #20]
 8001314:	4a0e      	ldr	r2, [pc, #56]	; (8001350 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001316:	fb03 f202 	mul.w	r2, r3, r2
 800131a:	69bb      	ldr	r3, [r7, #24]
 800131c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001320:	627b      	str	r3, [r7, #36]	; 0x24
 8001322:	e004      	b.n	800132e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	4a0b      	ldr	r2, [pc, #44]	; (8001354 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001328:	fb02 f303 	mul.w	r3, r2, r3
 800132c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800132e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001330:	623b      	str	r3, [r7, #32]
      break;
 8001332:	e002      	b.n	800133a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001334:	4b06      	ldr	r3, [pc, #24]	; (8001350 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001336:	623b      	str	r3, [r7, #32]
      break;
 8001338:	bf00      	nop
    }
  }
  return sysclockfreq;
 800133a:	6a3b      	ldr	r3, [r7, #32]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3728      	adds	r7, #40	; 0x28
 8001340:	46bd      	mov	sp, r7
 8001342:	bc90      	pop	{r4, r7}
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	080045ac 	.word	0x080045ac
 800134c:	40021000 	.word	0x40021000
 8001350:	007a1200 	.word	0x007a1200
 8001354:	003d0900 	.word	0x003d0900

08001358 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800135c:	4b02      	ldr	r3, [pc, #8]	; (8001368 <HAL_RCC_GetHCLKFreq+0x10>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	bc80      	pop	{r7}
 8001366:	4770      	bx	lr
 8001368:	20000000 	.word	0x20000000

0800136c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001370:	f7ff fff2 	bl	8001358 <HAL_RCC_GetHCLKFreq>
 8001374:	4602      	mov	r2, r0
 8001376:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	0a1b      	lsrs	r3, r3, #8
 800137c:	f003 0307 	and.w	r3, r3, #7
 8001380:	4903      	ldr	r1, [pc, #12]	; (8001390 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001382:	5ccb      	ldrb	r3, [r1, r3]
 8001384:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001388:	4618      	mov	r0, r3
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40021000 	.word	0x40021000
 8001390:	08004698 	.word	0x08004698

08001394 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	220f      	movs	r2, #15
 80013a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80013b0:	4b0e      	ldr	r3, [pc, #56]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80013c8:	4b08      	ldr	r3, [pc, #32]	; (80013ec <HAL_RCC_GetClockConfig+0x58>)
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	08db      	lsrs	r3, r3, #3
 80013ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_RCC_GetClockConfig+0x5c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f003 0207 	and.w	r2, r3, #7
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40022000 	.word	0x40022000

080013f4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b085      	sub	sp, #20
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80013fc:	4b0a      	ldr	r3, [pc, #40]	; (8001428 <RCC_Delay+0x34>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a0a      	ldr	r2, [pc, #40]	; (800142c <RCC_Delay+0x38>)
 8001402:	fba2 2303 	umull	r2, r3, r2, r3
 8001406:	0a5b      	lsrs	r3, r3, #9
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	fb02 f303 	mul.w	r3, r2, r3
 800140e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001410:	bf00      	nop
  }
  while (Delay --);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1e5a      	subs	r2, r3, #1
 8001416:	60fa      	str	r2, [r7, #12]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f9      	bne.n	8001410 <RCC_Delay+0x1c>
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3714      	adds	r7, #20
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr
 8001428:	20000000 	.word	0x20000000
 800142c:	10624dd3 	.word	0x10624dd3

08001430 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d101      	bne.n	8001442 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e041      	b.n	80014c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d106      	bne.n	800145c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001456:	6878      	ldr	r0, [r7, #4]
 8001458:	f000 f839 	bl	80014ce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	3304      	adds	r3, #4
 800146c:	4619      	mov	r1, r3
 800146e:	4610      	mov	r0, r2
 8001470:	f000 f9b4 	bl	80017dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2201      	movs	r2, #1
 8001478:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2201      	movs	r2, #1
 8001480:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	2201      	movs	r2, #1
 8001488:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2201      	movs	r2, #1
 8001490:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	2201      	movs	r2, #1
 80014b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2201      	movs	r2, #1
 80014b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2201      	movs	r2, #1
 80014c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80014c4:	2300      	movs	r3, #0
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}

080014ce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80014ce:	b480      	push	{r7}
 80014d0:	b083      	sub	sp, #12
 80014d2:	af00      	add	r7, sp, #0
 80014d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80014d6:	bf00      	nop
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	bc80      	pop	{r7}
 80014de:	4770      	bx	lr

080014e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b085      	sub	sp, #20
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	d001      	beq.n	80014f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80014f4:	2301      	movs	r3, #1
 80014f6:	e03a      	b.n	800156e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2202      	movs	r2, #2
 80014fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	68da      	ldr	r2, [r3, #12]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a18      	ldr	r2, [pc, #96]	; (8001578 <HAL_TIM_Base_Start_IT+0x98>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d00e      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x58>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001522:	d009      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x58>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a14      	ldr	r2, [pc, #80]	; (800157c <HAL_TIM_Base_Start_IT+0x9c>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d004      	beq.n	8001538 <HAL_TIM_Base_Start_IT+0x58>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a13      	ldr	r2, [pc, #76]	; (8001580 <HAL_TIM_Base_Start_IT+0xa0>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d111      	bne.n	800155c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689b      	ldr	r3, [r3, #8]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d010      	beq.n	800156c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681a      	ldr	r2, [r3, #0]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f042 0201 	orr.w	r2, r2, #1
 8001558:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800155a:	e007      	b.n	800156c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 0201 	orr.w	r2, r2, #1
 800156a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3714      	adds	r7, #20
 8001572:	46bd      	mov	sp, r7
 8001574:	bc80      	pop	{r7}
 8001576:	4770      	bx	lr
 8001578:	40012c00 	.word	0x40012c00
 800157c:	40000400 	.word	0x40000400
 8001580:	40000800 	.word	0x40000800

08001584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	691b      	ldr	r3, [r3, #16]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b02      	cmp	r3, #2
 8001598:	d122      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	68db      	ldr	r3, [r3, #12]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d11b      	bne.n	80015e0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f06f 0202 	mvn.w	r2, #2
 80015b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2201      	movs	r2, #1
 80015b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	699b      	ldr	r3, [r3, #24]
 80015be:	f003 0303 	and.w	r3, r3, #3
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f000 f8ed 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 80015cc:	e005      	b.n	80015da <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f000 f8e0 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f000 f8ef 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	691b      	ldr	r3, [r3, #16]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b04      	cmp	r3, #4
 80015ec:	d122      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b04      	cmp	r3, #4
 80015fa:	d11b      	bne.n	8001634 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f06f 0204 	mvn.w	r2, #4
 8001604:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	2202      	movs	r2, #2
 800160a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001616:	2b00      	cmp	r3, #0
 8001618:	d003      	beq.n	8001622 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800161a:	6878      	ldr	r0, [r7, #4]
 800161c:	f000 f8c3 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 8001620:	e005      	b.n	800162e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f000 f8b6 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001628:	6878      	ldr	r0, [r7, #4]
 800162a:	f000 f8c5 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2200      	movs	r2, #0
 8001632:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	f003 0308 	and.w	r3, r3, #8
 800163e:	2b08      	cmp	r3, #8
 8001640:	d122      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	f003 0308 	and.w	r3, r3, #8
 800164c:	2b08      	cmp	r3, #8
 800164e:	d11b      	bne.n	8001688 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f06f 0208 	mvn.w	r2, #8
 8001658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	69db      	ldr	r3, [r3, #28]
 8001666:	f003 0303 	and.w	r3, r3, #3
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 f899 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 8001674:	e005      	b.n	8001682 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f000 f88c 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800167c:	6878      	ldr	r0, [r7, #4]
 800167e:	f000 f89b 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	691b      	ldr	r3, [r3, #16]
 800168e:	f003 0310 	and.w	r3, r3, #16
 8001692:	2b10      	cmp	r3, #16
 8001694:	d122      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	f003 0310 	and.w	r3, r3, #16
 80016a0:	2b10      	cmp	r3, #16
 80016a2:	d11b      	bne.n	80016dc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f06f 0210 	mvn.w	r2, #16
 80016ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2208      	movs	r2, #8
 80016b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f000 f86f 	bl	80017a6 <HAL_TIM_IC_CaptureCallback>
 80016c8:	e005      	b.n	80016d6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 f862 	bl	8001794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 f871 	bl	80017b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2200      	movs	r2, #0
 80016da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	691b      	ldr	r3, [r3, #16]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d10e      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d107      	bne.n	8001708 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f06f 0201 	mvn.w	r2, #1
 8001700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7fe fe80 	bl	8000408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	691b      	ldr	r3, [r3, #16]
 800170e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001712:	2b80      	cmp	r3, #128	; 0x80
 8001714:	d10e      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001720:	2b80      	cmp	r3, #128	; 0x80
 8001722:	d107      	bne.n	8001734 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800172c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800172e:	6878      	ldr	r0, [r7, #4]
 8001730:	f000 f8bf 	bl	80018b2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	691b      	ldr	r3, [r3, #16]
 800173a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800173e:	2b40      	cmp	r3, #64	; 0x40
 8001740:	d10e      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800174c:	2b40      	cmp	r3, #64	; 0x40
 800174e:	d107      	bne.n	8001760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001758:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 f835 	bl	80017ca <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	691b      	ldr	r3, [r3, #16]
 8001766:	f003 0320 	and.w	r3, r3, #32
 800176a:	2b20      	cmp	r3, #32
 800176c:	d10e      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	f003 0320 	and.w	r3, r3, #32
 8001778:	2b20      	cmp	r3, #32
 800177a:	d107      	bne.n	800178c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f06f 0220 	mvn.w	r2, #32
 8001784:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001786:	6878      	ldr	r0, [r7, #4]
 8001788:	f000 f88a 	bl	80018a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800178c:	bf00      	nop
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}

08001794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800179c:	bf00      	nop
 800179e:	370c      	adds	r7, #12
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bc80      	pop	{r7}
 80017a4:	4770      	bx	lr

080017a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80017a6:	b480      	push	{r7}
 80017a8:	b083      	sub	sp, #12
 80017aa:	af00      	add	r7, sp, #0
 80017ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80017ae:	bf00      	nop
 80017b0:	370c      	adds	r7, #12
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bc80      	pop	{r7}
 80017c8:	4770      	bx	lr

080017ca <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80017ca:	b480      	push	{r7}
 80017cc:	b083      	sub	sp, #12
 80017ce:	af00      	add	r7, sp, #0
 80017d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80017d2:	bf00      	nop
 80017d4:	370c      	adds	r7, #12
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bc80      	pop	{r7}
 80017da:	4770      	bx	lr

080017dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	4a29      	ldr	r2, [pc, #164]	; (8001894 <TIM_Base_SetConfig+0xb8>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d00b      	beq.n	800180c <TIM_Base_SetConfig+0x30>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017fa:	d007      	beq.n	800180c <TIM_Base_SetConfig+0x30>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	4a26      	ldr	r2, [pc, #152]	; (8001898 <TIM_Base_SetConfig+0xbc>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d003      	beq.n	800180c <TIM_Base_SetConfig+0x30>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	4a25      	ldr	r2, [pc, #148]	; (800189c <TIM_Base_SetConfig+0xc0>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d108      	bne.n	800181e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001812:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	68fa      	ldr	r2, [r7, #12]
 800181a:	4313      	orrs	r3, r2
 800181c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a1c      	ldr	r2, [pc, #112]	; (8001894 <TIM_Base_SetConfig+0xb8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00b      	beq.n	800183e <TIM_Base_SetConfig+0x62>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800182c:	d007      	beq.n	800183e <TIM_Base_SetConfig+0x62>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a19      	ldr	r2, [pc, #100]	; (8001898 <TIM_Base_SetConfig+0xbc>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d003      	beq.n	800183e <TIM_Base_SetConfig+0x62>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a18      	ldr	r2, [pc, #96]	; (800189c <TIM_Base_SetConfig+0xc0>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d108      	bne.n	8001850 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	68db      	ldr	r3, [r3, #12]
 800184a:	68fa      	ldr	r2, [r7, #12]
 800184c:	4313      	orrs	r3, r2
 800184e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	695b      	ldr	r3, [r3, #20]
 800185a:	4313      	orrs	r3, r2
 800185c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	68fa      	ldr	r2, [r7, #12]
 8001862:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <TIM_Base_SetConfig+0xb8>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d103      	bne.n	8001884 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	691a      	ldr	r2, [r3, #16]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	2201      	movs	r2, #1
 8001888:	615a      	str	r2, [r3, #20]
}
 800188a:	bf00      	nop
 800188c:	3714      	adds	r7, #20
 800188e:	46bd      	mov	sp, r7
 8001890:	bc80      	pop	{r7}
 8001892:	4770      	bx	lr
 8001894:	40012c00 	.word	0x40012c00
 8001898:	40000400 	.word	0x40000400
 800189c:	40000800 	.word	0x40000800

080018a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80018a8:	bf00      	nop
 80018aa:	370c      	adds	r7, #12
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bc80      	pop	{r7}
 80018b0:	4770      	bx	lr

080018b2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80018b2:	b480      	push	{r7}
 80018b4:	b083      	sub	sp, #12
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr

080018c4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f103 0208 	add.w	r2, r3, #8
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f04f 32ff 	mov.w	r2, #4294967295
 80018dc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f103 0208 	add.w	r2, r3, #8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	f103 0208 	add.w	r2, r3, #8
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bc80      	pop	{r7}
 8001900:	4770      	bx	lr

08001902 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001902:	b480      	push	{r7}
 8001904:	b083      	sub	sp, #12
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	bc80      	pop	{r7}
 8001918:	4770      	bx	lr

0800191a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800191a:	b480      	push	{r7}
 800191c:	b085      	sub	sp, #20
 800191e:	af00      	add	r7, sp, #0
 8001920:	6078      	str	r0, [r7, #4]
 8001922:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	687a      	ldr	r2, [r7, #4]
 800194a:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	1c5a      	adds	r2, r3, #1
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	601a      	str	r2, [r3, #0]
}
 8001956:	bf00      	nop
 8001958:	3714      	adds	r7, #20
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8001960:	b480      	push	{r7}
 8001962:	b085      	sub	sp, #20
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
 8001968:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8001970:	68bb      	ldr	r3, [r7, #8]
 8001972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001976:	d103      	bne.n	8001980 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	60fb      	str	r3, [r7, #12]
 800197e:	e00c      	b.n	800199a <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	3308      	adds	r3, #8
 8001984:	60fb      	str	r3, [r7, #12]
 8001986:	e002      	b.n	800198e <vListInsert+0x2e>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	68ba      	ldr	r2, [r7, #8]
 8001996:	429a      	cmp	r2, r3
 8001998:	d2f6      	bcs.n	8001988 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	685a      	ldr	r2, [r3, #4]
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	683a      	ldr	r2, [r7, #0]
 80019a8:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	68fa      	ldr	r2, [r7, #12]
 80019ae:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	683a      	ldr	r2, [r7, #0]
 80019b4:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	1c5a      	adds	r2, r3, #1
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
}
 80019c6:	bf00      	nop
 80019c8:	3714      	adds	r7, #20
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr

080019d0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80019d0:	b480      	push	{r7}
 80019d2:	b085      	sub	sp, #20
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	6892      	ldr	r2, [r2, #8]
 80019e6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	6852      	ldr	r2, [r2, #4]
 80019f0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	687a      	ldr	r2, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d103      	bne.n	8001a04 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	689a      	ldr	r2, [r3, #8]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	1e5a      	subs	r2, r3, #1
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bc80      	pop	{r7}
 8001a20:	4770      	bx	lr

08001a22 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b08c      	sub	sp, #48	; 0x30
 8001a26:	af04      	add	r7, sp, #16
 8001a28:	60f8      	str	r0, [r7, #12]
 8001a2a:	60b9      	str	r1, [r7, #8]
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4613      	mov	r3, r2
 8001a30:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001a32:	88fb      	ldrh	r3, [r7, #6]
 8001a34:	009b      	lsls	r3, r3, #2
 8001a36:	4618      	mov	r0, r3
 8001a38:	f000 ff68 	bl	800290c <pvPortMalloc>
 8001a3c:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d00e      	beq.n	8001a62 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001a44:	2054      	movs	r0, #84	; 0x54
 8001a46:	f000 ff61 	bl	800290c <pvPortMalloc>
 8001a4a:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	697a      	ldr	r2, [r7, #20]
 8001a56:	631a      	str	r2, [r3, #48]	; 0x30
 8001a58:	e005      	b.n	8001a66 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f001 f836 	bl	8002acc <vPortFree>
 8001a60:	e001      	b.n	8001a66 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8001a66:	69fb      	ldr	r3, [r7, #28]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d013      	beq.n	8001a94 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001a6c:	88fa      	ldrh	r2, [r7, #6]
 8001a6e:	2300      	movs	r3, #0
 8001a70:	9303      	str	r3, [sp, #12]
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	9302      	str	r3, [sp, #8]
 8001a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	68b9      	ldr	r1, [r7, #8]
 8001a82:	68f8      	ldr	r0, [r7, #12]
 8001a84:	f000 f80e 	bl	8001aa4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8001a88:	69f8      	ldr	r0, [r7, #28]
 8001a8a:	f000 f899 	bl	8001bc0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	61bb      	str	r3, [r7, #24]
 8001a92:	e002      	b.n	8001a9a <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001a94:	f04f 33ff 	mov.w	r3, #4294967295
 8001a98:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8001a9a:	69bb      	ldr	r3, [r7, #24]
    }
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	3720      	adds	r7, #32
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b088      	sub	sp, #32
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
 8001ab0:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ab4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001abc:	3b01      	subs	r3, #1
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	f023 0307 	bic.w	r3, r3, #7
 8001aca:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d00a      	beq.n	8001aec <prvInitialiseNewTask+0x48>
        __asm volatile
 8001ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ada:	f383 8811 	msr	BASEPRI, r3
 8001ade:	f3bf 8f6f 	isb	sy
 8001ae2:	f3bf 8f4f 	dsb	sy
 8001ae6:	617b      	str	r3, [r7, #20]
    }
 8001ae8:	bf00      	nop
 8001aea:	e7fe      	b.n	8001aea <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d01f      	beq.n	8001b32 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
 8001af6:	e012      	b.n	8001b1e <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001af8:	68ba      	ldr	r2, [r7, #8]
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	4413      	add	r3, r2
 8001afe:	7819      	ldrb	r1, [r3, #0]
 8001b00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	4413      	add	r3, r2
 8001b06:	3334      	adds	r3, #52	; 0x34
 8001b08:	460a      	mov	r2, r1
 8001b0a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8001b0c:	68ba      	ldr	r2, [r7, #8]
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	4413      	add	r3, r2
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d006      	beq.n	8001b26 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	3301      	adds	r3, #1
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	2b0f      	cmp	r3, #15
 8001b22:	d9e9      	bls.n	8001af8 <prvInitialiseNewTask+0x54>
 8001b24:	e000      	b.n	8001b28 <prvInitialiseNewTask+0x84>
            {
                break;
 8001b26:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001b30:	e003      	b.n	8001b3a <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b3c:	2b06      	cmp	r3, #6
 8001b3e:	d901      	bls.n	8001b44 <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001b40:	2306      	movs	r3, #6
 8001b42:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8001b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b46:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b48:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8001b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001b4e:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8001b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b52:	2200      	movs	r2, #0
 8001b54:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b58:	3304      	adds	r3, #4
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff fed1 	bl	8001902 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b62:	3318      	adds	r3, #24
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fecc 	bl	8001902 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001b6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b6e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b72:	f1c3 0207 	rsb	r2, r3, #7
 8001b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b78:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001b7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001b7e:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8001b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b82:	334c      	adds	r3, #76	; 0x4c
 8001b84:	2204      	movs	r2, #4
 8001b86:	2100      	movs	r1, #0
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f002 fce3 	bl	8004554 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8001b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b90:	3350      	adds	r3, #80	; 0x50
 8001b92:	2201      	movs	r2, #1
 8001b94:	2100      	movs	r1, #0
 8001b96:	4618      	mov	r0, r3
 8001b98:	f002 fcdc 	bl	8004554 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	68f9      	ldr	r1, [r7, #12]
 8001ba0:	69b8      	ldr	r0, [r7, #24]
 8001ba2:	f000 fc37 	bl	8002414 <pxPortInitialiseStack>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001baa:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8001bac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d002      	beq.n	8001bb8 <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001bb6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001bb8:	bf00      	nop
 8001bba:	3720      	adds	r7, #32
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8001bc8:	f000 fd96 	bl	80026f8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8001bcc:	4b39      	ldr	r3, [pc, #228]	; (8001cb4 <prvAddNewTaskToReadyList+0xf4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	3301      	adds	r3, #1
 8001bd2:	4a38      	ldr	r2, [pc, #224]	; (8001cb4 <prvAddNewTaskToReadyList+0xf4>)
 8001bd4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8001bd6:	4b38      	ldr	r3, [pc, #224]	; (8001cb8 <prvAddNewTaskToReadyList+0xf8>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d109      	bne.n	8001bf2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8001bde:	4a36      	ldr	r2, [pc, #216]	; (8001cb8 <prvAddNewTaskToReadyList+0xf8>)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001be4:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <prvAddNewTaskToReadyList+0xf4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d110      	bne.n	8001c0e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8001bec:	f000 fb02 	bl	80021f4 <prvInitialiseTaskLists>
 8001bf0:	e00d      	b.n	8001c0e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8001bf2:	4b32      	ldr	r3, [pc, #200]	; (8001cbc <prvAddNewTaskToReadyList+0xfc>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d109      	bne.n	8001c0e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001bfa:	4b2f      	ldr	r3, [pc, #188]	; (8001cb8 <prvAddNewTaskToReadyList+0xf8>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d802      	bhi.n	8001c0e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8001c08:	4a2b      	ldr	r2, [pc, #172]	; (8001cb8 <prvAddNewTaskToReadyList+0xf8>)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <prvAddNewTaskToReadyList+0x100>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	3301      	adds	r3, #1
 8001c14:	4a2a      	ldr	r2, [pc, #168]	; (8001cc0 <prvAddNewTaskToReadyList+0x100>)
 8001c16:	6013      	str	r3, [r2, #0]
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d016      	beq.n	8001c4c <prvAddNewTaskToReadyList+0x8c>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f002 f9f7 	bl	8004014 <SEGGER_SYSVIEW_OnTaskCreate>
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c36:	461d      	mov	r5, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	461c      	mov	r4, r3
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	1ae3      	subs	r3, r4, r3
 8001c44:	9300      	str	r3, [sp, #0]
 8001c46:	462b      	mov	r3, r5
 8001c48:	f001 f90c 	bl	8002e64 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fa64 	bl	800411c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	2201      	movs	r2, #1
 8001c5a:	409a      	lsls	r2, r3
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <prvAddNewTaskToReadyList+0x104>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	4a18      	ldr	r2, [pc, #96]	; (8001cc4 <prvAddNewTaskToReadyList+0x104>)
 8001c64:	6013      	str	r3, [r2, #0]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	009b      	lsls	r3, r3, #2
 8001c72:	4a15      	ldr	r2, [pc, #84]	; (8001cc8 <prvAddNewTaskToReadyList+0x108>)
 8001c74:	441a      	add	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4610      	mov	r0, r2
 8001c7e:	f7ff fe4c 	bl	800191a <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8001c82:	f000 fd69 	bl	8002758 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8001c86:	4b0d      	ldr	r3, [pc, #52]	; (8001cbc <prvAddNewTaskToReadyList+0xfc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00e      	beq.n	8001cac <prvAddNewTaskToReadyList+0xec>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001c8e:	4b0a      	ldr	r3, [pc, #40]	; (8001cb8 <prvAddNewTaskToReadyList+0xf8>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d207      	bcs.n	8001cac <prvAddNewTaskToReadyList+0xec>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8001c9c:	4b0b      	ldr	r3, [pc, #44]	; (8001ccc <prvAddNewTaskToReadyList+0x10c>)
 8001c9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001ca2:	601a      	str	r2, [r3, #0]
 8001ca4:	f3bf 8f4f 	dsb	sy
 8001ca8:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8001cac:	bf00      	nop
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8001cb4:	2000017c 	.word	0x2000017c
 8001cb8:	2000007c 	.word	0x2000007c
 8001cbc:	20000188 	.word	0x20000188
 8001cc0:	20000198 	.word	0x20000198
 8001cc4:	20000184 	.word	0x20000184
 8001cc8:	20000080 	.word	0x20000080
 8001ccc:	e000ed04 	.word	0xe000ed04

08001cd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b084      	sub	sp, #16
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d01b      	beq.n	8001d1a <vTaskDelay+0x4a>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <vTaskDelay+0x68>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d00a      	beq.n	8001d00 <vTaskDelay+0x30>
        __asm volatile
 8001cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cee:	f383 8811 	msr	BASEPRI, r3
 8001cf2:	f3bf 8f6f 	isb	sy
 8001cf6:	f3bf 8f4f 	dsb	sy
 8001cfa:	60bb      	str	r3, [r7, #8]
    }
 8001cfc:	bf00      	nop
 8001cfe:	e7fe      	b.n	8001cfe <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8001d00:	f000 f87a 	bl	8001df8 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8001d04:	6879      	ldr	r1, [r7, #4]
 8001d06:	2023      	movs	r0, #35	; 0x23
 8001d08:	f001 fd90 	bl	800382c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 fb08 	bl	8002324 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8001d14:	f000 f87e 	bl	8001e14 <xTaskResumeAll>
 8001d18:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d107      	bne.n	8001d30 <vTaskDelay+0x60>
        {
            portYIELD_WITHIN_API();
 8001d20:	4b06      	ldr	r3, [pc, #24]	; (8001d3c <vTaskDelay+0x6c>)
 8001d22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d26:	601a      	str	r2, [r3, #0]
 8001d28:	f3bf 8f4f 	dsb	sy
 8001d2c:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8001d30:	bf00      	nop
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	200001a4 	.word	0x200001a4
 8001d3c:	e000ed04 	.word	0xe000ed04

08001d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8001d46:	4b24      	ldr	r3, [pc, #144]	; (8001dd8 <vTaskStartScheduler+0x98>)
 8001d48:	9301      	str	r3, [sp, #4]
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	9300      	str	r3, [sp, #0]
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2280      	movs	r2, #128	; 0x80
 8001d52:	4922      	ldr	r1, [pc, #136]	; (8001ddc <vTaskStartScheduler+0x9c>)
 8001d54:	4822      	ldr	r0, [pc, #136]	; (8001de0 <vTaskStartScheduler+0xa0>)
 8001d56:	f7ff fe64 	bl	8001a22 <xTaskCreate>
 8001d5a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d124      	bne.n	8001dac <vTaskStartScheduler+0x6c>
        __asm volatile
 8001d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001d66:	f383 8811 	msr	BASEPRI, r3
 8001d6a:	f3bf 8f6f 	isb	sy
 8001d6e:	f3bf 8f4f 	dsb	sy
 8001d72:	60bb      	str	r3, [r7, #8]
    }
 8001d74:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8001d76:	4b1b      	ldr	r3, [pc, #108]	; (8001de4 <vTaskStartScheduler+0xa4>)
 8001d78:	f04f 32ff 	mov.w	r2, #4294967295
 8001d7c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8001d7e:	4b1a      	ldr	r3, [pc, #104]	; (8001de8 <vTaskStartScheduler+0xa8>)
 8001d80:	2201      	movs	r2, #1
 8001d82:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8001d84:	4b19      	ldr	r3, [pc, #100]	; (8001dec <vTaskStartScheduler+0xac>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8001d8a:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <vTaskStartScheduler+0xb0>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <vTaskStartScheduler+0x98>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d102      	bne.n	8001d9c <vTaskStartScheduler+0x5c>
 8001d96:	f002 f921 	bl	8003fdc <SEGGER_SYSVIEW_OnIdle>
 8001d9a:	e004      	b.n	8001da6 <vTaskStartScheduler+0x66>
 8001d9c:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <vTaskStartScheduler+0xb0>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	4618      	mov	r0, r3
 8001da2:	f002 f979 	bl	8004098 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8001da6:	f000 fbb9 	bl	800251c <xPortStartScheduler>
 8001daa:	e00e      	b.n	8001dca <vTaskStartScheduler+0x8a>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db2:	d10a      	bne.n	8001dca <vTaskStartScheduler+0x8a>
        __asm volatile
 8001db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001db8:	f383 8811 	msr	BASEPRI, r3
 8001dbc:	f3bf 8f6f 	isb	sy
 8001dc0:	f3bf 8f4f 	dsb	sy
 8001dc4:	607b      	str	r3, [r7, #4]
    }
 8001dc6:	bf00      	nop
 8001dc8:	e7fe      	b.n	8001dc8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8001dca:	4b0a      	ldr	r3, [pc, #40]	; (8001df4 <vTaskStartScheduler+0xb4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	200001a0 	.word	0x200001a0
 8001ddc:	080045bc 	.word	0x080045bc
 8001de0:	080021c5 	.word	0x080021c5
 8001de4:	2000019c 	.word	0x2000019c
 8001de8:	20000188 	.word	0x20000188
 8001dec:	20000180 	.word	0x20000180
 8001df0:	2000007c 	.word	0x2000007c
 8001df4:	2000000c 	.word	0x2000000c

08001df8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8001dfc:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <vTaskSuspendAll+0x18>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	3301      	adds	r3, #1
 8001e02:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <vTaskSuspendAll+0x18>)
 8001e04:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8001e06:	bf00      	nop
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	200001a4 	.word	0x200001a4

08001e14 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b084      	sub	sp, #16
 8001e18:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8001e22:	4b43      	ldr	r3, [pc, #268]	; (8001f30 <xTaskResumeAll+0x11c>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d10a      	bne.n	8001e40 <xTaskResumeAll+0x2c>
        __asm volatile
 8001e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001e2e:	f383 8811 	msr	BASEPRI, r3
 8001e32:	f3bf 8f6f 	isb	sy
 8001e36:	f3bf 8f4f 	dsb	sy
 8001e3a:	603b      	str	r3, [r7, #0]
    }
 8001e3c:	bf00      	nop
 8001e3e:	e7fe      	b.n	8001e3e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8001e40:	f000 fc5a 	bl	80026f8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8001e44:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <xTaskResumeAll+0x11c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3b01      	subs	r3, #1
 8001e4a:	4a39      	ldr	r2, [pc, #228]	; (8001f30 <xTaskResumeAll+0x11c>)
 8001e4c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001e4e:	4b38      	ldr	r3, [pc, #224]	; (8001f30 <xTaskResumeAll+0x11c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d165      	bne.n	8001f22 <xTaskResumeAll+0x10e>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001e56:	4b37      	ldr	r3, [pc, #220]	; (8001f34 <xTaskResumeAll+0x120>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d061      	beq.n	8001f22 <xTaskResumeAll+0x10e>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001e5e:	e032      	b.n	8001ec6 <xTaskResumeAll+0xb2>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e60:	4b35      	ldr	r3, [pc, #212]	; (8001f38 <xTaskResumeAll+0x124>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	68db      	ldr	r3, [r3, #12]
 8001e66:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	3318      	adds	r3, #24
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f7ff fdaf 	bl	80019d0 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	3304      	adds	r3, #4
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7ff fdaa 	bl	80019d0 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	4618      	mov	r0, r3
 8001e80:	f002 f94c 	bl	800411c <SEGGER_SYSVIEW_OnTaskStartReady>
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	2201      	movs	r2, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	4b2b      	ldr	r3, [pc, #172]	; (8001f3c <xTaskResumeAll+0x128>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	4a2a      	ldr	r2, [pc, #168]	; (8001f3c <xTaskResumeAll+0x128>)
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	009b      	lsls	r3, r3, #2
 8001e9e:	4413      	add	r3, r2
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	4a27      	ldr	r2, [pc, #156]	; (8001f40 <xTaskResumeAll+0x12c>)
 8001ea4:	441a      	add	r2, r3
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3304      	adds	r3, #4
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4610      	mov	r0, r2
 8001eae:	f7ff fd34 	bl	800191a <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <xTaskResumeAll+0x130>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d302      	bcc.n	8001ec6 <xTaskResumeAll+0xb2>
                    {
                        xYieldPending = pdTRUE;
 8001ec0:	4b21      	ldr	r3, [pc, #132]	; (8001f48 <xTaskResumeAll+0x134>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8001ec6:	4b1c      	ldr	r3, [pc, #112]	; (8001f38 <xTaskResumeAll+0x124>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d1c8      	bne.n	8001e60 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <xTaskResumeAll+0xc4>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8001ed4:	f000 fa0c 	bl	80022f0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8001ed8:	4b1c      	ldr	r3, [pc, #112]	; (8001f4c <xTaskResumeAll+0x138>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <xTaskResumeAll+0xf2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8001ee4:	f000 f848 	bl	8001f78 <xTaskIncrementTick>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d002      	beq.n	8001ef4 <xTaskResumeAll+0xe0>
                            {
                                xYieldPending = pdTRUE;
 8001eee:	4b16      	ldr	r3, [pc, #88]	; (8001f48 <xTaskResumeAll+0x134>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f1      	bne.n	8001ee4 <xTaskResumeAll+0xd0>

                        xPendedTicks = 0;
 8001f00:	4b12      	ldr	r3, [pc, #72]	; (8001f4c <xTaskResumeAll+0x138>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8001f06:	4b10      	ldr	r3, [pc, #64]	; (8001f48 <xTaskResumeAll+0x134>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d009      	beq.n	8001f22 <xTaskResumeAll+0x10e>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8001f12:	4b0f      	ldr	r3, [pc, #60]	; (8001f50 <xTaskResumeAll+0x13c>)
 8001f14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f18:	601a      	str	r2, [r3, #0]
 8001f1a:	f3bf 8f4f 	dsb	sy
 8001f1e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8001f22:	f000 fc19 	bl	8002758 <vPortExitCritical>

    return xAlreadyYielded;
 8001f26:	68bb      	ldr	r3, [r7, #8]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	200001a4 	.word	0x200001a4
 8001f34:	2000017c 	.word	0x2000017c
 8001f38:	2000013c 	.word	0x2000013c
 8001f3c:	20000184 	.word	0x20000184
 8001f40:	20000080 	.word	0x20000080
 8001f44:	2000007c 	.word	0x2000007c
 8001f48:	20000190 	.word	0x20000190
 8001f4c:	2000018c 	.word	0x2000018c
 8001f50:	e000ed04 	.word	0xe000ed04

08001f54 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8001f5a:	f000 fc99 	bl	8002890 <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8001f5e:	2300      	movs	r3, #0
 8001f60:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8001f62:	4b04      	ldr	r3, [pc, #16]	; (8001f74 <xTaskGetTickCountFromISR+0x20>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8001f68:	683b      	ldr	r3, [r7, #0]
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3708      	adds	r7, #8
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}
 8001f72:	bf00      	nop
 8001f74:	20000180 	.word	0x20000180

08001f78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b086      	sub	sp, #24
 8001f7c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001f82:	4b50      	ldr	r3, [pc, #320]	; (80020c4 <xTaskIncrementTick+0x14c>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	f040 8092 	bne.w	80020b0 <xTaskIncrementTick+0x138>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001f8c:	4b4e      	ldr	r3, [pc, #312]	; (80020c8 <xTaskIncrementTick+0x150>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	3301      	adds	r3, #1
 8001f92:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8001f94:	4a4c      	ldr	r2, [pc, #304]	; (80020c8 <xTaskIncrementTick+0x150>)
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d120      	bne.n	8001fe2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8001fa0:	4b4a      	ldr	r3, [pc, #296]	; (80020cc <xTaskIncrementTick+0x154>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00a      	beq.n	8001fc0 <xTaskIncrementTick+0x48>
        __asm volatile
 8001faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fae:	f383 8811 	msr	BASEPRI, r3
 8001fb2:	f3bf 8f6f 	isb	sy
 8001fb6:	f3bf 8f4f 	dsb	sy
 8001fba:	603b      	str	r3, [r7, #0]
    }
 8001fbc:	bf00      	nop
 8001fbe:	e7fe      	b.n	8001fbe <xTaskIncrementTick+0x46>
 8001fc0:	4b42      	ldr	r3, [pc, #264]	; (80020cc <xTaskIncrementTick+0x154>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	4b42      	ldr	r3, [pc, #264]	; (80020d0 <xTaskIncrementTick+0x158>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a40      	ldr	r2, [pc, #256]	; (80020cc <xTaskIncrementTick+0x154>)
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	4a40      	ldr	r2, [pc, #256]	; (80020d0 <xTaskIncrementTick+0x158>)
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	6013      	str	r3, [r2, #0]
 8001fd4:	4b3f      	ldr	r3, [pc, #252]	; (80020d4 <xTaskIncrementTick+0x15c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	3301      	adds	r3, #1
 8001fda:	4a3e      	ldr	r2, [pc, #248]	; (80020d4 <xTaskIncrementTick+0x15c>)
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	f000 f987 	bl	80022f0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8001fe2:	4b3d      	ldr	r3, [pc, #244]	; (80020d8 <xTaskIncrementTick+0x160>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d34c      	bcc.n	8002086 <xTaskIncrementTick+0x10e>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001fec:	4b37      	ldr	r3, [pc, #220]	; (80020cc <xTaskIncrementTick+0x154>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d104      	bne.n	8002000 <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001ff6:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <xTaskIncrementTick+0x160>)
 8001ff8:	f04f 32ff 	mov.w	r2, #4294967295
 8001ffc:	601a      	str	r2, [r3, #0]
                    break;
 8001ffe:	e042      	b.n	8002086 <xTaskIncrementTick+0x10e>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002000:	4b32      	ldr	r3, [pc, #200]	; (80020cc <xTaskIncrementTick+0x154>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	68db      	ldr	r3, [r3, #12]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	429a      	cmp	r2, r3
 8002016:	d203      	bcs.n	8002020 <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002018:	4a2f      	ldr	r2, [pc, #188]	; (80020d8 <xTaskIncrementTick+0x160>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800201e:	e032      	b.n	8002086 <xTaskIncrementTick+0x10e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	3304      	adds	r3, #4
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fcd3 	bl	80019d0 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800202e:	2b00      	cmp	r3, #0
 8002030:	d004      	beq.n	800203c <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	3318      	adds	r3, #24
 8002036:	4618      	mov	r0, r3
 8002038:	f7ff fcca 	bl	80019d0 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	4618      	mov	r0, r3
 8002040:	f002 f86c 	bl	800411c <SEGGER_SYSVIEW_OnTaskStartReady>
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002048:	2201      	movs	r2, #1
 800204a:	409a      	lsls	r2, r3
 800204c:	4b23      	ldr	r3, [pc, #140]	; (80020dc <xTaskIncrementTick+0x164>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4313      	orrs	r3, r2
 8002052:	4a22      	ldr	r2, [pc, #136]	; (80020dc <xTaskIncrementTick+0x164>)
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205a:	4613      	mov	r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	4a1f      	ldr	r2, [pc, #124]	; (80020e0 <xTaskIncrementTick+0x168>)
 8002064:	441a      	add	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	3304      	adds	r3, #4
 800206a:	4619      	mov	r1, r3
 800206c:	4610      	mov	r0, r2
 800206e:	f7ff fc54 	bl	800191a <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002072:	68bb      	ldr	r3, [r7, #8]
 8002074:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002076:	4b1b      	ldr	r3, [pc, #108]	; (80020e4 <xTaskIncrementTick+0x16c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	429a      	cmp	r2, r3
 800207e:	d3b5      	bcc.n	8001fec <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8002080:	2301      	movs	r3, #1
 8002082:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002084:	e7b2      	b.n	8001fec <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002086:	4b17      	ldr	r3, [pc, #92]	; (80020e4 <xTaskIncrementTick+0x16c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800208c:	4914      	ldr	r1, [pc, #80]	; (80020e0 <xTaskIncrementTick+0x168>)
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	009b      	lsls	r3, r3, #2
 8002096:	440b      	add	r3, r1
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b01      	cmp	r3, #1
 800209c:	d901      	bls.n	80020a2 <xTaskIncrementTick+0x12a>
                {
                    xSwitchRequired = pdTRUE;
 800209e:	2301      	movs	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 80020a2:	4b11      	ldr	r3, [pc, #68]	; (80020e8 <xTaskIncrementTick+0x170>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d007      	beq.n	80020ba <xTaskIncrementTick+0x142>
                {
                    xSwitchRequired = pdTRUE;
 80020aa:	2301      	movs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
 80020ae:	e004      	b.n	80020ba <xTaskIncrementTick+0x142>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80020b0:	4b0e      	ldr	r3, [pc, #56]	; (80020ec <xTaskIncrementTick+0x174>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3301      	adds	r3, #1
 80020b6:	4a0d      	ldr	r2, [pc, #52]	; (80020ec <xTaskIncrementTick+0x174>)
 80020b8:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80020ba:	697b      	ldr	r3, [r7, #20]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	200001a4 	.word	0x200001a4
 80020c8:	20000180 	.word	0x20000180
 80020cc:	20000134 	.word	0x20000134
 80020d0:	20000138 	.word	0x20000138
 80020d4:	20000194 	.word	0x20000194
 80020d8:	2000019c 	.word	0x2000019c
 80020dc:	20000184 	.word	0x20000184
 80020e0:	20000080 	.word	0x20000080
 80020e4:	2000007c 	.word	0x2000007c
 80020e8:	20000190 	.word	0x20000190
 80020ec:	2000018c 	.word	0x2000018c

080020f0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b086      	sub	sp, #24
 80020f4:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <vTaskSwitchContext+0xbc>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d003      	beq.n	8002106 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80020fe:	4b2c      	ldr	r3, [pc, #176]	; (80021b0 <vTaskSwitchContext+0xc0>)
 8002100:	2201      	movs	r2, #1
 8002102:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002104:	e04d      	b.n	80021a2 <vTaskSwitchContext+0xb2>
        xYieldPending = pdFALSE;
 8002106:	4b2a      	ldr	r3, [pc, #168]	; (80021b0 <vTaskSwitchContext+0xc0>)
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800210c:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <vTaskSwitchContext+0xc4>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	fab3 f383 	clz	r3, r3
 8002118:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800211a:	7afb      	ldrb	r3, [r7, #11]
 800211c:	f1c3 031f 	rsb	r3, r3, #31
 8002120:	617b      	str	r3, [r7, #20]
 8002122:	4925      	ldr	r1, [pc, #148]	; (80021b8 <vTaskSwitchContext+0xc8>)
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	4613      	mov	r3, r2
 8002128:	009b      	lsls	r3, r3, #2
 800212a:	4413      	add	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	440b      	add	r3, r1
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d10a      	bne.n	800214c <vTaskSwitchContext+0x5c>
        __asm volatile
 8002136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800213a:	f383 8811 	msr	BASEPRI, r3
 800213e:	f3bf 8f6f 	isb	sy
 8002142:	f3bf 8f4f 	dsb	sy
 8002146:	607b      	str	r3, [r7, #4]
    }
 8002148:	bf00      	nop
 800214a:	e7fe      	b.n	800214a <vTaskSwitchContext+0x5a>
 800214c:	697a      	ldr	r2, [r7, #20]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	4a18      	ldr	r2, [pc, #96]	; (80021b8 <vTaskSwitchContext+0xc8>)
 8002158:	4413      	add	r3, r2
 800215a:	613b      	str	r3, [r7, #16]
 800215c:	693b      	ldr	r3, [r7, #16]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	685a      	ldr	r2, [r3, #4]
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	3308      	adds	r3, #8
 800216e:	429a      	cmp	r2, r3
 8002170:	d104      	bne.n	800217c <vTaskSwitchContext+0x8c>
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	605a      	str	r2, [r3, #4]
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	68db      	ldr	r3, [r3, #12]
 8002182:	4a0e      	ldr	r2, [pc, #56]	; (80021bc <vTaskSwitchContext+0xcc>)
 8002184:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8002186:	4b0d      	ldr	r3, [pc, #52]	; (80021bc <vTaskSwitchContext+0xcc>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	4b0d      	ldr	r3, [pc, #52]	; (80021c0 <vTaskSwitchContext+0xd0>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	429a      	cmp	r2, r3
 8002190:	d102      	bne.n	8002198 <vTaskSwitchContext+0xa8>
 8002192:	f001 ff23 	bl	8003fdc <SEGGER_SYSVIEW_OnIdle>
}
 8002196:	e004      	b.n	80021a2 <vTaskSwitchContext+0xb2>
        traceTASK_SWITCHED_IN();
 8002198:	4b08      	ldr	r3, [pc, #32]	; (80021bc <vTaskSwitchContext+0xcc>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4618      	mov	r0, r3
 800219e:	f001 ff7b 	bl	8004098 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 80021a2:	bf00      	nop
 80021a4:	3718      	adds	r7, #24
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	200001a4 	.word	0x200001a4
 80021b0:	20000190 	.word	0x20000190
 80021b4:	20000184 	.word	0x20000184
 80021b8:	20000080 	.word	0x20000080
 80021bc:	2000007c 	.word	0x2000007c
 80021c0:	200001a0 	.word	0x200001a0

080021c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b082      	sub	sp, #8
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80021cc:	f000 f852 	bl	8002274 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <prvIdleTask+0x28>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d9f9      	bls.n	80021cc <prvIdleTask+0x8>
                {
                    taskYIELD();
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <prvIdleTask+0x2c>)
 80021da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021de:	601a      	str	r2, [r3, #0]
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80021e8:	e7f0      	b.n	80021cc <prvIdleTask+0x8>
 80021ea:	bf00      	nop
 80021ec:	20000080 	.word	0x20000080
 80021f0:	e000ed04 	.word	0xe000ed04

080021f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80021fa:	2300      	movs	r3, #0
 80021fc:	607b      	str	r3, [r7, #4]
 80021fe:	e00c      	b.n	800221a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	4613      	mov	r3, r2
 8002204:	009b      	lsls	r3, r3, #2
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4a12      	ldr	r2, [pc, #72]	; (8002254 <prvInitialiseTaskLists+0x60>)
 800220c:	4413      	add	r3, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fb58 	bl	80018c4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	3301      	adds	r3, #1
 8002218:	607b      	str	r3, [r7, #4]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2b06      	cmp	r3, #6
 800221e:	d9ef      	bls.n	8002200 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002220:	480d      	ldr	r0, [pc, #52]	; (8002258 <prvInitialiseTaskLists+0x64>)
 8002222:	f7ff fb4f 	bl	80018c4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002226:	480d      	ldr	r0, [pc, #52]	; (800225c <prvInitialiseTaskLists+0x68>)
 8002228:	f7ff fb4c 	bl	80018c4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 800222c:	480c      	ldr	r0, [pc, #48]	; (8002260 <prvInitialiseTaskLists+0x6c>)
 800222e:	f7ff fb49 	bl	80018c4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002232:	480c      	ldr	r0, [pc, #48]	; (8002264 <prvInitialiseTaskLists+0x70>)
 8002234:	f7ff fb46 	bl	80018c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002238:	480b      	ldr	r0, [pc, #44]	; (8002268 <prvInitialiseTaskLists+0x74>)
 800223a:	f7ff fb43 	bl	80018c4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800223e:	4b0b      	ldr	r3, [pc, #44]	; (800226c <prvInitialiseTaskLists+0x78>)
 8002240:	4a05      	ldr	r2, [pc, #20]	; (8002258 <prvInitialiseTaskLists+0x64>)
 8002242:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002244:	4b0a      	ldr	r3, [pc, #40]	; (8002270 <prvInitialiseTaskLists+0x7c>)
 8002246:	4a05      	ldr	r2, [pc, #20]	; (800225c <prvInitialiseTaskLists+0x68>)
 8002248:	601a      	str	r2, [r3, #0]
}
 800224a:	bf00      	nop
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20000080 	.word	0x20000080
 8002258:	2000010c 	.word	0x2000010c
 800225c:	20000120 	.word	0x20000120
 8002260:	2000013c 	.word	0x2000013c
 8002264:	20000150 	.word	0x20000150
 8002268:	20000168 	.word	0x20000168
 800226c:	20000134 	.word	0x20000134
 8002270:	20000138 	.word	0x20000138

08002274 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b082      	sub	sp, #8
 8002278:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800227a:	e019      	b.n	80022b0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 800227c:	f000 fa3c 	bl	80026f8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002280:	4b10      	ldr	r3, [pc, #64]	; (80022c4 <prvCheckTasksWaitingTermination+0x50>)
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3304      	adds	r3, #4
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fb9f 	bl	80019d0 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <prvCheckTasksWaitingTermination+0x54>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	3b01      	subs	r3, #1
 8002298:	4a0b      	ldr	r2, [pc, #44]	; (80022c8 <prvCheckTasksWaitingTermination+0x54>)
 800229a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800229c:	4b0b      	ldr	r3, [pc, #44]	; (80022cc <prvCheckTasksWaitingTermination+0x58>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <prvCheckTasksWaitingTermination+0x58>)
 80022a4:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80022a6:	f000 fa57 	bl	8002758 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f000 f810 	bl	80022d0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80022b0:	4b06      	ldr	r3, [pc, #24]	; (80022cc <prvCheckTasksWaitingTermination+0x58>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d1e1      	bne.n	800227c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80022b8:	bf00      	nop
 80022ba:	bf00      	nop
 80022bc:	3708      	adds	r7, #8
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	20000150 	.word	0x20000150
 80022c8:	2000017c 	.word	0x2000017c
 80022cc:	20000164 	.word	0x20000164

080022d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fbf5 	bl	8002acc <vPortFree>
                vPortFree( pxTCB );
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 fbf2 	bl	8002acc <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80022e8:	bf00      	nop
 80022ea:	3708      	adds	r7, #8
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}

080022f0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80022f4:	4b09      	ldr	r3, [pc, #36]	; (800231c <prvResetNextTaskUnblockTime+0x2c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d104      	bne.n	8002308 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80022fe:	4b08      	ldr	r3, [pc, #32]	; (8002320 <prvResetNextTaskUnblockTime+0x30>)
 8002300:	f04f 32ff 	mov.w	r2, #4294967295
 8002304:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002306:	e005      	b.n	8002314 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002308:	4b04      	ldr	r3, [pc, #16]	; (800231c <prvResetNextTaskUnblockTime+0x2c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a03      	ldr	r2, [pc, #12]	; (8002320 <prvResetNextTaskUnblockTime+0x30>)
 8002312:	6013      	str	r3, [r2, #0]
}
 8002314:	bf00      	nop
 8002316:	46bd      	mov	sp, r7
 8002318:	bc80      	pop	{r7}
 800231a:	4770      	bx	lr
 800231c:	20000134 	.word	0x20000134
 8002320:	2000019c 	.word	0x2000019c

08002324 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 800232e:	4b32      	ldr	r3, [pc, #200]	; (80023f8 <prvAddCurrentTaskToDelayedList+0xd4>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002334:	4b31      	ldr	r3, [pc, #196]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	3304      	adds	r3, #4
 800233a:	4618      	mov	r0, r3
 800233c:	f7ff fb48 	bl	80019d0 <uxListRemove>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10b      	bne.n	800235e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002346:	4b2d      	ldr	r3, [pc, #180]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	2201      	movs	r2, #1
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43da      	mvns	r2, r3
 8002354:	4b2a      	ldr	r3, [pc, #168]	; (8002400 <prvAddCurrentTaskToDelayedList+0xdc>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4013      	ands	r3, r2
 800235a:	4a29      	ldr	r2, [pc, #164]	; (8002400 <prvAddCurrentTaskToDelayedList+0xdc>)
 800235c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002364:	d110      	bne.n	8002388 <prvAddCurrentTaskToDelayedList+0x64>
 8002366:	683b      	ldr	r3, [r7, #0]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d00d      	beq.n	8002388 <prvAddCurrentTaskToDelayedList+0x64>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
 800236c:	4b23      	ldr	r3, [pc, #140]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	211b      	movs	r1, #27
 8002372:	4618      	mov	r0, r3
 8002374:	f001 ff14 	bl	80041a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002378:	4b20      	ldr	r3, [pc, #128]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	3304      	adds	r3, #4
 800237e:	4619      	mov	r1, r3
 8002380:	4820      	ldr	r0, [pc, #128]	; (8002404 <prvAddCurrentTaskToDelayedList+0xe0>)
 8002382:	f7ff faca 	bl	800191a <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8002386:	e032      	b.n	80023ee <prvAddCurrentTaskToDelayedList+0xca>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002390:	4b1a      	ldr	r3, [pc, #104]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	68ba      	ldr	r2, [r7, #8]
 8002396:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	429a      	cmp	r2, r3
 800239e:	d20f      	bcs.n	80023c0 <prvAddCurrentTaskToDelayedList+0x9c>
					traceMOVED_TASK_TO_OVERFLOW_DELAYED_LIST();
 80023a0:	4b16      	ldr	r3, [pc, #88]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2104      	movs	r1, #4
 80023a6:	4618      	mov	r0, r3
 80023a8:	f001 fefa 	bl	80041a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023ac:	4b16      	ldr	r3, [pc, #88]	; (8002408 <prvAddCurrentTaskToDelayedList+0xe4>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	4b12      	ldr	r3, [pc, #72]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	3304      	adds	r3, #4
 80023b6:	4619      	mov	r1, r3
 80023b8:	4610      	mov	r0, r2
 80023ba:	f7ff fad1 	bl	8001960 <vListInsert>
}
 80023be:	e016      	b.n	80023ee <prvAddCurrentTaskToDelayedList+0xca>
					traceMOVED_TASK_TO_DELAYED_LIST();
 80023c0:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2104      	movs	r1, #4
 80023c6:	4618      	mov	r0, r3
 80023c8:	f001 feea 	bl	80041a0 <SEGGER_SYSVIEW_OnTaskStopReady>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80023cc:	4b0f      	ldr	r3, [pc, #60]	; (800240c <prvAddCurrentTaskToDelayedList+0xe8>)
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	4b0a      	ldr	r3, [pc, #40]	; (80023fc <prvAddCurrentTaskToDelayedList+0xd8>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	3304      	adds	r3, #4
 80023d6:	4619      	mov	r1, r3
 80023d8:	4610      	mov	r0, r2
 80023da:	f7ff fac1 	bl	8001960 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 80023de:	4b0c      	ldr	r3, [pc, #48]	; (8002410 <prvAddCurrentTaskToDelayedList+0xec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	68ba      	ldr	r2, [r7, #8]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d202      	bcs.n	80023ee <prvAddCurrentTaskToDelayedList+0xca>
                        xNextTaskUnblockTime = xTimeToWake;
 80023e8:	4a09      	ldr	r2, [pc, #36]	; (8002410 <prvAddCurrentTaskToDelayedList+0xec>)
 80023ea:	68bb      	ldr	r3, [r7, #8]
 80023ec:	6013      	str	r3, [r2, #0]
}
 80023ee:	bf00      	nop
 80023f0:	3710      	adds	r7, #16
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}
 80023f6:	bf00      	nop
 80023f8:	20000180 	.word	0x20000180
 80023fc:	2000007c 	.word	0x2000007c
 8002400:	20000184 	.word	0x20000184
 8002404:	20000168 	.word	0x20000168
 8002408:	20000138 	.word	0x20000138
 800240c:	20000134 	.word	0x20000134
 8002410:	2000019c 	.word	0x2000019c

08002414 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	3b04      	subs	r3, #4
 8002424:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800242c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	3b04      	subs	r3, #4
 8002432:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	f023 0201 	bic.w	r2, r3, #1
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	3b04      	subs	r3, #4
 8002442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002444:	4a08      	ldr	r2, [pc, #32]	; (8002468 <pxPortInitialiseStack+0x54>)
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3b14      	subs	r3, #20
 800244e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8002450:	687a      	ldr	r2, [r7, #4]
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	3b20      	subs	r3, #32
 800245a:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800245c:	68fb      	ldr	r3, [r7, #12]
}
 800245e:	4618      	mov	r0, r3
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	bc80      	pop	{r7}
 8002466:	4770      	bx	lr
 8002468:	0800246d 	.word	0x0800246d

0800246c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8002472:	2300      	movs	r3, #0
 8002474:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002476:	4b12      	ldr	r3, [pc, #72]	; (80024c0 <prvTaskExitError+0x54>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247e:	d00a      	beq.n	8002496 <prvTaskExitError+0x2a>
        __asm volatile
 8002480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002484:	f383 8811 	msr	BASEPRI, r3
 8002488:	f3bf 8f6f 	isb	sy
 800248c:	f3bf 8f4f 	dsb	sy
 8002490:	60fb      	str	r3, [r7, #12]
    }
 8002492:	bf00      	nop
 8002494:	e7fe      	b.n	8002494 <prvTaskExitError+0x28>
        __asm volatile
 8002496:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249a:	f383 8811 	msr	BASEPRI, r3
 800249e:	f3bf 8f6f 	isb	sy
 80024a2:	f3bf 8f4f 	dsb	sy
 80024a6:	60bb      	str	r3, [r7, #8]
    }
 80024a8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80024aa:	bf00      	nop
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0fc      	beq.n	80024ac <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80024b2:	bf00      	nop
 80024b4:	bf00      	nop
 80024b6:	3714      	adds	r7, #20
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bc80      	pop	{r7}
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	20000010 	.word	0x20000010
	...

080024d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80024d0:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <pxCurrentTCBConst2>)
 80024d2:	6819      	ldr	r1, [r3, #0]
 80024d4:	6808      	ldr	r0, [r1, #0]
 80024d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80024da:	f380 8809 	msr	PSP, r0
 80024de:	f3bf 8f6f 	isb	sy
 80024e2:	f04f 0000 	mov.w	r0, #0
 80024e6:	f380 8811 	msr	BASEPRI, r0
 80024ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80024ee:	4770      	bx	lr

080024f0 <pxCurrentTCBConst2>:
 80024f0:	2000007c 	.word	0x2000007c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop

080024f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80024f8:	4806      	ldr	r0, [pc, #24]	; (8002514 <prvPortStartFirstTask+0x1c>)
 80024fa:	6800      	ldr	r0, [r0, #0]
 80024fc:	6800      	ldr	r0, [r0, #0]
 80024fe:	f380 8808 	msr	MSP, r0
 8002502:	b662      	cpsie	i
 8002504:	b661      	cpsie	f
 8002506:	f3bf 8f4f 	dsb	sy
 800250a:	f3bf 8f6f 	isb	sy
 800250e:	df00      	svc	0
 8002510:	bf00      	nop
 8002512:	0000      	.short	0x0000
 8002514:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002518:	bf00      	nop
 800251a:	bf00      	nop

0800251c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002522:	4b32      	ldr	r3, [pc, #200]	; (80025ec <xPortStartScheduler+0xd0>)
 8002524:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	b2db      	uxtb	r3, r3
 800252c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	22ff      	movs	r2, #255	; 0xff
 8002532:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	b2db      	uxtb	r3, r3
 800253a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800253c:	78fb      	ldrb	r3, [r7, #3]
 800253e:	b2db      	uxtb	r3, r3
 8002540:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002544:	b2da      	uxtb	r2, r3
 8002546:	4b2a      	ldr	r3, [pc, #168]	; (80025f0 <xPortStartScheduler+0xd4>)
 8002548:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800254a:	4b2a      	ldr	r3, [pc, #168]	; (80025f4 <xPortStartScheduler+0xd8>)
 800254c:	2207      	movs	r2, #7
 800254e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002550:	e009      	b.n	8002566 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8002552:	4b28      	ldr	r3, [pc, #160]	; (80025f4 <xPortStartScheduler+0xd8>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	3b01      	subs	r3, #1
 8002558:	4a26      	ldr	r2, [pc, #152]	; (80025f4 <xPortStartScheduler+0xd8>)
 800255a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	005b      	lsls	r3, r3, #1
 8002562:	b2db      	uxtb	r3, r3
 8002564:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256e:	2b80      	cmp	r3, #128	; 0x80
 8002570:	d0ef      	beq.n	8002552 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <xPortStartScheduler+0xd8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	d00a      	beq.n	8002594 <xPortStartScheduler+0x78>
        __asm volatile
 800257e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002582:	f383 8811 	msr	BASEPRI, r3
 8002586:	f3bf 8f6f 	isb	sy
 800258a:	f3bf 8f4f 	dsb	sy
 800258e:	60bb      	str	r3, [r7, #8]
    }
 8002590:	bf00      	nop
 8002592:	e7fe      	b.n	8002592 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002594:	4b17      	ldr	r3, [pc, #92]	; (80025f4 <xPortStartScheduler+0xd8>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	021b      	lsls	r3, r3, #8
 800259a:	4a16      	ldr	r2, [pc, #88]	; (80025f4 <xPortStartScheduler+0xd8>)
 800259c:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800259e:	4b15      	ldr	r3, [pc, #84]	; (80025f4 <xPortStartScheduler+0xd8>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80025a6:	4a13      	ldr	r2, [pc, #76]	; (80025f4 <xPortStartScheduler+0xd8>)
 80025a8:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	b2da      	uxtb	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80025b2:	4b11      	ldr	r3, [pc, #68]	; (80025f8 <xPortStartScheduler+0xdc>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a10      	ldr	r2, [pc, #64]	; (80025f8 <xPortStartScheduler+0xdc>)
 80025b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025bc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80025be:	4b0e      	ldr	r3, [pc, #56]	; (80025f8 <xPortStartScheduler+0xdc>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a0d      	ldr	r2, [pc, #52]	; (80025f8 <xPortStartScheduler+0xdc>)
 80025c4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80025c8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80025ca:	f000 f93f 	bl	800284c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80025ce:	4b0b      	ldr	r3, [pc, #44]	; (80025fc <xPortStartScheduler+0xe0>)
 80025d0:	2200      	movs	r2, #0
 80025d2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80025d4:	f7ff ff90 	bl	80024f8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80025d8:	f7ff fd8a 	bl	80020f0 <vTaskSwitchContext>
    prvTaskExitError();
 80025dc:	f7ff ff46 	bl	800246c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3710      	adds	r7, #16
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	e000e400 	.word	0xe000e400
 80025f0:	200001a8 	.word	0x200001a8
 80025f4:	200001ac 	.word	0x200001ac
 80025f8:	e000ed20 	.word	0xe000ed20
 80025fc:	20000010 	.word	0x20000010

08002600 <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8002600:	b480      	push	{r7}
 8002602:	b087      	sub	sp, #28
 8002604:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M3_r0p1_ID );
 8002606:	4b36      	ldr	r3, [pc, #216]	; (80026e0 <vInitPrioGroupValue+0xe0>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a36      	ldr	r2, [pc, #216]	; (80026e4 <vInitPrioGroupValue+0xe4>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d10a      	bne.n	8002626 <vInitPrioGroupValue+0x26>
        __asm volatile
 8002610:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002614:	f383 8811 	msr	BASEPRI, r3
 8002618:	f3bf 8f6f 	isb	sy
 800261c:	f3bf 8f4f 	dsb	sy
 8002620:	613b      	str	r3, [r7, #16]
    }
 8002622:	bf00      	nop
 8002624:	e7fe      	b.n	8002624 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M3_r0p0_ID );
 8002626:	4b2e      	ldr	r3, [pc, #184]	; (80026e0 <vInitPrioGroupValue+0xe0>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a2f      	ldr	r2, [pc, #188]	; (80026e8 <vInitPrioGroupValue+0xe8>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d10a      	bne.n	8002646 <vInitPrioGroupValue+0x46>
        __asm volatile
 8002630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002634:	f383 8811 	msr	BASEPRI, r3
 8002638:	f3bf 8f6f 	isb	sy
 800263c:	f3bf 8f4f 	dsb	sy
 8002640:	60fb      	str	r3, [r7, #12]
    }
 8002642:	bf00      	nop
 8002644:	e7fe      	b.n	8002644 <vInitPrioGroupValue+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002646:	4b29      	ldr	r3, [pc, #164]	; (80026ec <vInitPrioGroupValue+0xec>)
 8002648:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800264a:	697b      	ldr	r3, [r7, #20]
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	b2db      	uxtb	r3, r3
 8002650:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	781b      	ldrb	r3, [r3, #0]
 800265c:	b2db      	uxtb	r3, r3
 800265e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002660:	78fb      	ldrb	r3, [r7, #3]
 8002662:	b2db      	uxtb	r3, r3
 8002664:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002668:	b2da      	uxtb	r2, r3
 800266a:	4b21      	ldr	r3, [pc, #132]	; (80026f0 <vInitPrioGroupValue+0xf0>)
 800266c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800266e:	4b21      	ldr	r3, [pc, #132]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 8002670:	2207      	movs	r2, #7
 8002672:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002674:	e009      	b.n	800268a <vInitPrioGroupValue+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002676:	4b1f      	ldr	r3, [pc, #124]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	3b01      	subs	r3, #1
 800267c:	4a1d      	ldr	r2, [pc, #116]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 800267e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	b2db      	uxtb	r3, r3
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800268a:	78fb      	ldrb	r3, [r7, #3]
 800268c:	b2db      	uxtb	r3, r3
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b80      	cmp	r3, #128	; 0x80
 8002694:	d0ef      	beq.n	8002676 <vInitPrioGroupValue+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002696:	4b17      	ldr	r3, [pc, #92]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f1c3 0307 	rsb	r3, r3, #7
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d00a      	beq.n	80026b8 <vInitPrioGroupValue+0xb8>
        __asm volatile
 80026a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a6:	f383 8811 	msr	BASEPRI, r3
 80026aa:	f3bf 8f6f 	isb	sy
 80026ae:	f3bf 8f4f 	dsb	sy
 80026b2:	60bb      	str	r3, [r7, #8]
    }
 80026b4:	bf00      	nop
 80026b6:	e7fe      	b.n	80026b6 <vInitPrioGroupValue+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80026b8:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	021b      	lsls	r3, r3, #8
 80026be:	4a0d      	ldr	r2, [pc, #52]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 80026c0:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ca:	4a0a      	ldr	r2, [pc, #40]	; (80026f4 <vInitPrioGroupValue+0xf4>)
 80026cc:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80026d6:	bf00      	nop
 80026d8:	371c      	adds	r7, #28
 80026da:	46bd      	mov	sp, r7
 80026dc:	bc80      	pop	{r7}
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00
 80026e4:	0410c271 	.word	0x0410c271
 80026e8:	0410c270 	.word	0x0410c270
 80026ec:	e000e400 	.word	0xe000e400
 80026f0:	200001a8 	.word	0x200001a8
 80026f4:	200001ac 	.word	0x200001ac

080026f8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
        __asm volatile
 80026fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002702:	f383 8811 	msr	BASEPRI, r3
 8002706:	f3bf 8f6f 	isb	sy
 800270a:	f3bf 8f4f 	dsb	sy
 800270e:	607b      	str	r3, [r7, #4]
    }
 8002710:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002712:	4b0f      	ldr	r3, [pc, #60]	; (8002750 <vPortEnterCritical+0x58>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	3301      	adds	r3, #1
 8002718:	4a0d      	ldr	r2, [pc, #52]	; (8002750 <vPortEnterCritical+0x58>)
 800271a:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <vPortEnterCritical+0x58>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d10f      	bne.n	8002744 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002724:	4b0b      	ldr	r3, [pc, #44]	; (8002754 <vPortEnterCritical+0x5c>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00a      	beq.n	8002744 <vPortEnterCritical+0x4c>
        __asm volatile
 800272e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002732:	f383 8811 	msr	BASEPRI, r3
 8002736:	f3bf 8f6f 	isb	sy
 800273a:	f3bf 8f4f 	dsb	sy
 800273e:	603b      	str	r3, [r7, #0]
    }
 8002740:	bf00      	nop
 8002742:	e7fe      	b.n	8002742 <vPortEnterCritical+0x4a>
    }
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	bc80      	pop	{r7}
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	20000010 	.word	0x20000010
 8002754:	e000ed04 	.word	0xe000ed04

08002758 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002758:	b480      	push	{r7}
 800275a:	b083      	sub	sp, #12
 800275c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800275e:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <vPortExitCritical+0x4c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d10a      	bne.n	800277c <vPortExitCritical+0x24>
        __asm volatile
 8002766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800276a:	f383 8811 	msr	BASEPRI, r3
 800276e:	f3bf 8f6f 	isb	sy
 8002772:	f3bf 8f4f 	dsb	sy
 8002776:	607b      	str	r3, [r7, #4]
    }
 8002778:	bf00      	nop
 800277a:	e7fe      	b.n	800277a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800277c:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <vPortExitCritical+0x4c>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <vPortExitCritical+0x4c>)
 8002784:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002786:	4b07      	ldr	r3, [pc, #28]	; (80027a4 <vPortExitCritical+0x4c>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d105      	bne.n	800279a <vPortExitCritical+0x42>
 800278e:	2300      	movs	r3, #0
 8002790:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002798:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr
 80027a4:	20000010 	.word	0x20000010
	...

080027b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80027b0:	f3ef 8009 	mrs	r0, PSP
 80027b4:	f3bf 8f6f 	isb	sy
 80027b8:	4b0d      	ldr	r3, [pc, #52]	; (80027f0 <pxCurrentTCBConst>)
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027c0:	6010      	str	r0, [r2, #0]
 80027c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80027c6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80027ca:	f380 8811 	msr	BASEPRI, r0
 80027ce:	f7ff fc8f 	bl	80020f0 <vTaskSwitchContext>
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f380 8811 	msr	BASEPRI, r0
 80027da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80027de:	6819      	ldr	r1, [r3, #0]
 80027e0:	6808      	ldr	r0, [r1, #0]
 80027e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80027e6:	f380 8809 	msr	PSP, r0
 80027ea:	f3bf 8f6f 	isb	sy
 80027ee:	4770      	bx	lr

080027f0 <pxCurrentTCBConst>:
 80027f0:	2000007c 	.word	0x2000007c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80027f4:	bf00      	nop
 80027f6:	bf00      	nop

080027f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b082      	sub	sp, #8
 80027fc:	af00      	add	r7, sp, #0
        __asm volatile
 80027fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002802:	f383 8811 	msr	BASEPRI, r3
 8002806:	f3bf 8f6f 	isb	sy
 800280a:	f3bf 8f4f 	dsb	sy
 800280e:	607b      	str	r3, [r7, #4]
    }
 8002810:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8002812:	f001 fb69 	bl	8003ee8 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002816:	f7ff fbaf 	bl	8001f78 <xTaskIncrementTick>
 800281a:	4603      	mov	r3, r0
 800281c:	2b00      	cmp	r3, #0
 800281e:	d006      	beq.n	800282e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8002820:	f001 fbc0 	bl	8003fa4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002824:	4b08      	ldr	r3, [pc, #32]	; (8002848 <SysTick_Handler+0x50>)
 8002826:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800282a:	601a      	str	r2, [r3, #0]
 800282c:	e001      	b.n	8002832 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800282e:	f001 fb9d 	bl	8003f6c <SEGGER_SYSVIEW_RecordExitISR>
 8002832:	2300      	movs	r3, #0
 8002834:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	f383 8811 	msr	BASEPRI, r3
    }
 800283c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800283e:	bf00      	nop
 8002840:	3708      	adds	r7, #8
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	e000ed04 	.word	0xe000ed04

0800284c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800284c:	b480      	push	{r7}
 800284e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002850:	4b0a      	ldr	r3, [pc, #40]	; (800287c <vPortSetupTimerInterrupt+0x30>)
 8002852:	2200      	movs	r2, #0
 8002854:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <vPortSetupTimerInterrupt+0x34>)
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <vPortSetupTimerInterrupt+0x38>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a09      	ldr	r2, [pc, #36]	; (8002888 <vPortSetupTimerInterrupt+0x3c>)
 8002862:	fba2 2303 	umull	r2, r3, r2, r3
 8002866:	099b      	lsrs	r3, r3, #6
 8002868:	4a08      	ldr	r2, [pc, #32]	; (800288c <vPortSetupTimerInterrupt+0x40>)
 800286a:	3b01      	subs	r3, #1
 800286c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800286e:	4b03      	ldr	r3, [pc, #12]	; (800287c <vPortSetupTimerInterrupt+0x30>)
 8002870:	2207      	movs	r2, #7
 8002872:	601a      	str	r2, [r3, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	bc80      	pop	{r7}
 800287a:	4770      	bx	lr
 800287c:	e000e010 	.word	0xe000e010
 8002880:	e000e018 	.word	0xe000e018
 8002884:	20000000 	.word	0x20000000
 8002888:	10624dd3 	.word	0x10624dd3
 800288c:	e000e014 	.word	0xe000e014

08002890 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8002890:	b480      	push	{r7}
 8002892:	b085      	sub	sp, #20
 8002894:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8002896:	f3ef 8305 	mrs	r3, IPSR
 800289a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	2b0f      	cmp	r3, #15
 80028a0:	d914      	bls.n	80028cc <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80028a2:	4a16      	ldr	r2, [pc, #88]	; (80028fc <vPortValidateInterruptPriority+0x6c>)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	4413      	add	r3, r2
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <vPortValidateInterruptPriority+0x70>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	7afa      	ldrb	r2, [r7, #11]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d20a      	bcs.n	80028cc <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 80028b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028ba:	f383 8811 	msr	BASEPRI, r3
 80028be:	f3bf 8f6f 	isb	sy
 80028c2:	f3bf 8f4f 	dsb	sy
 80028c6:	607b      	str	r3, [r7, #4]
    }
 80028c8:	bf00      	nop
 80028ca:	e7fe      	b.n	80028ca <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80028cc:	4b0d      	ldr	r3, [pc, #52]	; (8002904 <vPortValidateInterruptPriority+0x74>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80028d4:	4b0c      	ldr	r3, [pc, #48]	; (8002908 <vPortValidateInterruptPriority+0x78>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	429a      	cmp	r2, r3
 80028da:	d90a      	bls.n	80028f2 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	603b      	str	r3, [r7, #0]
    }
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <vPortValidateInterruptPriority+0x60>
    }
 80028f2:	bf00      	nop
 80028f4:	3714      	adds	r7, #20
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr
 80028fc:	e000e3f0 	.word	0xe000e3f0
 8002900:	200001a8 	.word	0x200001a8
 8002904:	e000ed0c 	.word	0xe000ed0c
 8002908:	200001ac 	.word	0x200001ac

0800290c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002914:	2300      	movs	r3, #0
 8002916:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002918:	f7ff fa6e 	bl	8001df8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800291c:	4b65      	ldr	r3, [pc, #404]	; (8002ab4 <pvPortMalloc+0x1a8>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002924:	f000 f934 	bl	8002b90 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002928:	4b63      	ldr	r3, [pc, #396]	; (8002ab8 <pvPortMalloc+0x1ac>)
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	4013      	ands	r3, r2
 8002930:	2b00      	cmp	r3, #0
 8002932:	f040 80a7 	bne.w	8002a84 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d02d      	beq.n	8002998 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800293c:	2208      	movs	r2, #8
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d227      	bcs.n	8002998 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002948:	2208      	movs	r2, #8
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	f003 0307 	and.w	r3, r3, #7
 8002956:	2b00      	cmp	r3, #0
 8002958:	d021      	beq.n	800299e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f023 0307 	bic.w	r3, r3, #7
 8002960:	3308      	adds	r3, #8
 8002962:	687a      	ldr	r2, [r7, #4]
 8002964:	429a      	cmp	r2, r3
 8002966:	d214      	bcs.n	8002992 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	f023 0307 	bic.w	r3, r3, #7
 800296e:	3308      	adds	r3, #8
 8002970:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	2b00      	cmp	r3, #0
 800297a:	d010      	beq.n	800299e <pvPortMalloc+0x92>
        __asm volatile
 800297c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002980:	f383 8811 	msr	BASEPRI, r3
 8002984:	f3bf 8f6f 	isb	sy
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	617b      	str	r3, [r7, #20]
    }
 800298e:	bf00      	nop
 8002990:	e7fe      	b.n	8002990 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002996:	e002      	b.n	800299e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8002998:	2300      	movs	r3, #0
 800299a:	607b      	str	r3, [r7, #4]
 800299c:	e000      	b.n	80029a0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800299e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d06e      	beq.n	8002a84 <pvPortMalloc+0x178>
 80029a6:	4b45      	ldr	r3, [pc, #276]	; (8002abc <pvPortMalloc+0x1b0>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	d869      	bhi.n	8002a84 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80029b0:	4b43      	ldr	r3, [pc, #268]	; (8002ac0 <pvPortMalloc+0x1b4>)
 80029b2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80029b4:	4b42      	ldr	r3, [pc, #264]	; (8002ac0 <pvPortMalloc+0x1b4>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029ba:	e004      	b.n	80029c6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 80029bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029be:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80029c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80029c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c8:	685b      	ldr	r3, [r3, #4]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d903      	bls.n	80029d8 <pvPortMalloc+0xcc>
 80029d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d1f1      	bne.n	80029bc <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80029d8:	4b36      	ldr	r3, [pc, #216]	; (8002ab4 <pvPortMalloc+0x1a8>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029de:	429a      	cmp	r2, r3
 80029e0:	d050      	beq.n	8002a84 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2208      	movs	r2, #8
 80029e8:	4413      	add	r3, r2
 80029ea:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80029ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	6a3b      	ldr	r3, [r7, #32]
 80029f2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	685a      	ldr	r2, [r3, #4]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad2      	subs	r2, r2, r3
 80029fc:	2308      	movs	r3, #8
 80029fe:	005b      	lsls	r3, r3, #1
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d91f      	bls.n	8002a44 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4413      	add	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	f003 0307 	and.w	r3, r3, #7
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00a      	beq.n	8002a2c <pvPortMalloc+0x120>
        __asm volatile
 8002a16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a1a:	f383 8811 	msr	BASEPRI, r3
 8002a1e:	f3bf 8f6f 	isb	sy
 8002a22:	f3bf 8f4f 	dsb	sy
 8002a26:	613b      	str	r3, [r7, #16]
    }
 8002a28:	bf00      	nop
 8002a2a:	e7fe      	b.n	8002a2a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	1ad2      	subs	r2, r2, r3
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002a3e:	69b8      	ldr	r0, [r7, #24]
 8002a40:	f000 f908 	bl	8002c54 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	4a1b      	ldr	r2, [pc, #108]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002a52:	4b1a      	ldr	r3, [pc, #104]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <pvPortMalloc+0x1b8>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d203      	bcs.n	8002a66 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002a5e:	4b17      	ldr	r3, [pc, #92]	; (8002abc <pvPortMalloc+0x1b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	4a18      	ldr	r2, [pc, #96]	; (8002ac4 <pvPortMalloc+0x1b8>)
 8002a64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a68:	685a      	ldr	r2, [r3, #4]
 8002a6a:	4b13      	ldr	r3, [pc, #76]	; (8002ab8 <pvPortMalloc+0x1ac>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	431a      	orrs	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	2200      	movs	r2, #0
 8002a78:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002a7a:	4b13      	ldr	r3, [pc, #76]	; (8002ac8 <pvPortMalloc+0x1bc>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <pvPortMalloc+0x1bc>)
 8002a82:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002a84:	f7ff f9c6 	bl	8001e14 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d00a      	beq.n	8002aa8 <pvPortMalloc+0x19c>
        __asm volatile
 8002a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a96:	f383 8811 	msr	BASEPRI, r3
 8002a9a:	f3bf 8f6f 	isb	sy
 8002a9e:	f3bf 8f4f 	dsb	sy
 8002aa2:	60fb      	str	r3, [r7, #12]
    }
 8002aa4:	bf00      	nop
 8002aa6:	e7fe      	b.n	8002aa6 <pvPortMalloc+0x19a>
    return pvReturn;
 8002aa8:	69fb      	ldr	r3, [r7, #28]
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3728      	adds	r7, #40	; 0x28
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20001540 	.word	0x20001540
 8002ab8:	20001554 	.word	0x20001554
 8002abc:	20001544 	.word	0x20001544
 8002ac0:	20001538 	.word	0x20001538
 8002ac4:	20001548 	.word	0x20001548
 8002ac8:	2000154c 	.word	0x2000154c

08002acc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d04d      	beq.n	8002b7a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	425b      	negs	r3, r3
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002ae8:	697b      	ldr	r3, [r7, #20]
 8002aea:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	685a      	ldr	r2, [r3, #4]
 8002af0:	4b24      	ldr	r3, [pc, #144]	; (8002b84 <vPortFree+0xb8>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4013      	ands	r3, r2
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <vPortFree+0x44>
        __asm volatile
 8002afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002afe:	f383 8811 	msr	BASEPRI, r3
 8002b02:	f3bf 8f6f 	isb	sy
 8002b06:	f3bf 8f4f 	dsb	sy
 8002b0a:	60fb      	str	r3, [r7, #12]
    }
 8002b0c:	bf00      	nop
 8002b0e:	e7fe      	b.n	8002b0e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00a      	beq.n	8002b2e <vPortFree+0x62>
        __asm volatile
 8002b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b1c:	f383 8811 	msr	BASEPRI, r3
 8002b20:	f3bf 8f6f 	isb	sy
 8002b24:	f3bf 8f4f 	dsb	sy
 8002b28:	60bb      	str	r3, [r7, #8]
    }
 8002b2a:	bf00      	nop
 8002b2c:	e7fe      	b.n	8002b2c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002b2e:	693b      	ldr	r3, [r7, #16]
 8002b30:	685a      	ldr	r2, [r3, #4]
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <vPortFree+0xb8>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4013      	ands	r3, r2
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d01e      	beq.n	8002b7a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d11a      	bne.n	8002b7a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	685a      	ldr	r2, [r3, #4]
 8002b48:	4b0e      	ldr	r3, [pc, #56]	; (8002b84 <vPortFree+0xb8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	43db      	mvns	r3, r3
 8002b4e:	401a      	ands	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002b54:	f7ff f950 	bl	8001df8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	685a      	ldr	r2, [r3, #4]
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <vPortFree+0xbc>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4413      	add	r3, r2
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <vPortFree+0xbc>)
 8002b64:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002b66:	6938      	ldr	r0, [r7, #16]
 8002b68:	f000 f874 	bl	8002c54 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002b6c:	4b07      	ldr	r3, [pc, #28]	; (8002b8c <vPortFree+0xc0>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	3301      	adds	r3, #1
 8002b72:	4a06      	ldr	r2, [pc, #24]	; (8002b8c <vPortFree+0xc0>)
 8002b74:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002b76:	f7ff f94d 	bl	8001e14 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	20001554 	.word	0x20001554
 8002b88:	20001544 	.word	0x20001544
 8002b8c:	20001550 	.word	0x20001550

08002b90 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002b96:	f241 3388 	movw	r3, #5000	; 0x1388
 8002b9a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002b9c:	4b27      	ldr	r3, [pc, #156]	; (8002c3c <prvHeapInit+0xac>)
 8002b9e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00c      	beq.n	8002bc4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	3307      	adds	r3, #7
 8002bae:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	f023 0307 	bic.w	r3, r3, #7
 8002bb6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002bb8:	68ba      	ldr	r2, [r7, #8]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	4a1f      	ldr	r2, [pc, #124]	; (8002c3c <prvHeapInit+0xac>)
 8002bc0:	4413      	add	r3, r2
 8002bc2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <prvHeapInit+0xb0>)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002bce:	4b1c      	ldr	r3, [pc, #112]	; (8002c40 <prvHeapInit+0xb0>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	68ba      	ldr	r2, [r7, #8]
 8002bd8:	4413      	add	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002bdc:	2208      	movs	r2, #8
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1a9b      	subs	r3, r3, r2
 8002be2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f023 0307 	bic.w	r3, r3, #7
 8002bea:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	4a15      	ldr	r2, [pc, #84]	; (8002c44 <prvHeapInit+0xb4>)
 8002bf0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002bf2:	4b14      	ldr	r3, [pc, #80]	; (8002c44 <prvHeapInit+0xb4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <prvHeapInit+0xb4>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	68fa      	ldr	r2, [r7, #12]
 8002c0a:	1ad2      	subs	r2, r2, r3
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <prvHeapInit+0xb4>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <prvHeapInit+0xb8>)
 8002c1e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <prvHeapInit+0xbc>)
 8002c26:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <prvHeapInit+0xc0>)
 8002c2a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c2e:	601a      	str	r2, [r3, #0]
}
 8002c30:	bf00      	nop
 8002c32:	3714      	adds	r7, #20
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bc80      	pop	{r7}
 8002c38:	4770      	bx	lr
 8002c3a:	bf00      	nop
 8002c3c:	200001b0 	.word	0x200001b0
 8002c40:	20001538 	.word	0x20001538
 8002c44:	20001540 	.word	0x20001540
 8002c48:	20001548 	.word	0x20001548
 8002c4c:	20001544 	.word	0x20001544
 8002c50:	20001554 	.word	0x20001554

08002c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002c54:	b480      	push	{r7}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002c5c:	4b27      	ldr	r3, [pc, #156]	; (8002cfc <prvInsertBlockIntoFreeList+0xa8>)
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	e002      	b.n	8002c68 <prvInsertBlockIntoFreeList+0x14>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	429a      	cmp	r2, r3
 8002c70:	d8f7      	bhi.n	8002c62 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	687a      	ldr	r2, [r7, #4]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d108      	bne.n	8002c96 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	685b      	ldr	r3, [r3, #4]
 8002c9e:	68ba      	ldr	r2, [r7, #8]
 8002ca0:	441a      	add	r2, r3
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d118      	bne.n	8002cdc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b14      	ldr	r3, [pc, #80]	; (8002d00 <prvInsertBlockIntoFreeList+0xac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d00d      	beq.n	8002cd2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685a      	ldr	r2, [r3, #4]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	441a      	add	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681a      	ldr	r2, [r3, #0]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	601a      	str	r2, [r3, #0]
 8002cd0:	e008      	b.n	8002ce4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002cd2:	4b0b      	ldr	r3, [pc, #44]	; (8002d00 <prvInsertBlockIntoFreeList+0xac>)
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	601a      	str	r2, [r3, #0]
 8002cda:	e003      	b.n	8002ce4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d002      	beq.n	8002cf2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	687a      	ldr	r2, [r7, #4]
 8002cf0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002cf2:	bf00      	nop
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr
 8002cfc:	20001538 	.word	0x20001538
 8002d00:	20001540 	.word	0x20001540

08002d04 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8002d08:	4803      	ldr	r0, [pc, #12]	; (8002d18 <_cbSendSystemDesc+0x14>)
 8002d0a:	f001 f897 	bl	8003e3c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8002d0e:	4803      	ldr	r0, [pc, #12]	; (8002d1c <_cbSendSystemDesc+0x18>)
 8002d10:	f001 f894 	bl	8003e3c <SEGGER_SYSVIEW_SendSysDesc>
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	080045c4 	.word	0x080045c4
 8002d1c:	08004600 	.word	0x08004600

08002d20 <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d26:	6818      	ldr	r0, [r3, #0]
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <SEGGER_SYSVIEW_Conf+0x20>)
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <SEGGER_SYSVIEW_Conf+0x24>)
 8002d2e:	4a06      	ldr	r2, [pc, #24]	; (8002d48 <SEGGER_SYSVIEW_Conf+0x28>)
 8002d30:	f000 fd0c 	bl	800374c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8002d34:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8002d38:	f000 fd4c 	bl	80037d4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	20000000 	.word	0x20000000
 8002d44:	08002d05 	.word	0x08002d05
 8002d48:	080046a0 	.word	0x080046a0

08002d4c <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8002d4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8002d52:	2300      	movs	r3, #0
 8002d54:	607b      	str	r3, [r7, #4]
 8002d56:	e033      	b.n	8002dc0 <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8002d58:	491e      	ldr	r1, [pc, #120]	; (8002dd4 <_cbSendTaskList+0x88>)
 8002d5a:	687a      	ldr	r2, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	6818      	ldr	r0, [r3, #0]
 8002d68:	491a      	ldr	r1, [pc, #104]	; (8002dd4 <_cbSendTaskList+0x88>)
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3304      	adds	r3, #4
 8002d78:	6819      	ldr	r1, [r3, #0]
 8002d7a:	4c16      	ldr	r4, [pc, #88]	; (8002dd4 <_cbSendTaskList+0x88>)
 8002d7c:	687a      	ldr	r2, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4423      	add	r3, r4
 8002d88:	3308      	adds	r3, #8
 8002d8a:	681c      	ldr	r4, [r3, #0]
 8002d8c:	4d11      	ldr	r5, [pc, #68]	; (8002dd4 <_cbSendTaskList+0x88>)
 8002d8e:	687a      	ldr	r2, [r7, #4]
 8002d90:	4613      	mov	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	442b      	add	r3, r5
 8002d9a:	330c      	adds	r3, #12
 8002d9c:	681d      	ldr	r5, [r3, #0]
 8002d9e:	4e0d      	ldr	r6, [pc, #52]	; (8002dd4 <_cbSendTaskList+0x88>)
 8002da0:	687a      	ldr	r2, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4433      	add	r3, r6
 8002dac:	3310      	adds	r3, #16
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	9300      	str	r3, [sp, #0]
 8002db2:	462b      	mov	r3, r5
 8002db4:	4622      	mov	r2, r4
 8002db6:	f000 f8bd 	bl	8002f34 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	607b      	str	r3, [r7, #4]
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <_cbSendTaskList+0x8c>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d3c6      	bcc.n	8002d58 <_cbSendTaskList+0xc>
  }
}
 8002dca:	bf00      	nop
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002dd4:	20001558 	.word	0x20001558
 8002dd8:	200015f8 	.word	0x200015f8

08002ddc <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8002ddc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8002de4:	f7ff f8b6 	bl	8001f54 <xTaskGetTickCountFromISR>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2200      	movs	r2, #0
 8002dec:	469a      	mov	sl, r3
 8002dee:	4693      	mov	fp, r2
 8002df0:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8002df4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	f04f 0a00 	mov.w	sl, #0
 8002e00:	f04f 0b00 	mov.w	fp, #0
 8002e04:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8002e08:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8002e0c:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8002e10:	4652      	mov	r2, sl
 8002e12:	465b      	mov	r3, fp
 8002e14:	1a14      	subs	r4, r2, r0
 8002e16:	eb63 0501 	sbc.w	r5, r3, r1
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	f04f 0300 	mov.w	r3, #0
 8002e22:	00ab      	lsls	r3, r5, #2
 8002e24:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8002e28:	00a2      	lsls	r2, r4, #2
 8002e2a:	4614      	mov	r4, r2
 8002e2c:	461d      	mov	r5, r3
 8002e2e:	eb14 0800 	adds.w	r8, r4, r0
 8002e32:	eb45 0901 	adc.w	r9, r5, r1
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	f04f 0300 	mov.w	r3, #0
 8002e3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e4a:	4690      	mov	r8, r2
 8002e4c:	4699      	mov	r9, r3
 8002e4e:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8002e52:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8002e56:	4610      	mov	r0, r2
 8002e58:	4619      	mov	r1, r3
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08002e64 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b086      	sub	sp, #24
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	60b9      	str	r1, [r7, #8]
 8002e6e:	607a      	str	r2, [r7, #4]
 8002e70:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8002e72:	2205      	movs	r2, #5
 8002e74:	492b      	ldr	r1, [pc, #172]	; (8002f24 <SYSVIEW_AddTask+0xc0>)
 8002e76:	68b8      	ldr	r0, [r7, #8]
 8002e78:	f001 fb4e 	bl	8004518 <memcmp>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d04b      	beq.n	8002f1a <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8002e82:	4b29      	ldr	r3, [pc, #164]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2b07      	cmp	r3, #7
 8002e88:	d903      	bls.n	8002e92 <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8002e8a:	4828      	ldr	r0, [pc, #160]	; (8002f2c <SYSVIEW_AddTask+0xc8>)
 8002e8c:	f001 fac4 	bl	8004418 <SEGGER_SYSVIEW_Warn>
    return;
 8002e90:	e044      	b.n	8002f1c <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	4926      	ldr	r1, [pc, #152]	; (8002f30 <SYSVIEW_AddTask+0xcc>)
 8002e98:	4613      	mov	r3, r2
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	4413      	add	r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	68fa      	ldr	r2, [r7, #12]
 8002ea4:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8002ea6:	4b20      	ldr	r3, [pc, #128]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	4921      	ldr	r1, [pc, #132]	; (8002f30 <SYSVIEW_AddTask+0xcc>)
 8002eac:	4613      	mov	r3, r2
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	4413      	add	r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	3304      	adds	r3, #4
 8002eb8:	68ba      	ldr	r2, [r7, #8]
 8002eba:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8002ebc:	4b1a      	ldr	r3, [pc, #104]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	491b      	ldr	r1, [pc, #108]	; (8002f30 <SYSVIEW_AddTask+0xcc>)
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	009b      	lsls	r3, r3, #2
 8002eca:	440b      	add	r3, r1
 8002ecc:	3308      	adds	r3, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8002ed2:	4b15      	ldr	r3, [pc, #84]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	4916      	ldr	r1, [pc, #88]	; (8002f30 <SYSVIEW_AddTask+0xcc>)
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	330c      	adds	r3, #12
 8002ee4:	683a      	ldr	r2, [r7, #0]
 8002ee6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	4910      	ldr	r1, [pc, #64]	; (8002f30 <SYSVIEW_AddTask+0xcc>)
 8002eee:	4613      	mov	r3, r2
 8002ef0:	009b      	lsls	r3, r3, #2
 8002ef2:	4413      	add	r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	3310      	adds	r3, #16
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8002efe:	4b0a      	ldr	r3, [pc, #40]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	3301      	adds	r3, #1
 8002f04:	4a08      	ldr	r2, [pc, #32]	; (8002f28 <SYSVIEW_AddTask+0xc4>)
 8002f06:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8002f08:	69bb      	ldr	r3, [r7, #24]
 8002f0a:	9300      	str	r3, [sp, #0]
 8002f0c:	683b      	ldr	r3, [r7, #0]
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	68b9      	ldr	r1, [r7, #8]
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f000 f80e 	bl	8002f34 <SYSVIEW_SendTaskInfo>
 8002f18:	e000      	b.n	8002f1c <SYSVIEW_AddTask+0xb8>
    return;
 8002f1a:	bf00      	nop

}
 8002f1c:	3710      	adds	r7, #16
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	08004610 	.word	0x08004610
 8002f28:	200015f8 	.word	0x200015f8
 8002f2c:	08004618 	.word	0x08004618
 8002f30:	20001558 	.word	0x20001558

08002f34 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b08a      	sub	sp, #40	; 0x28
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	60f8      	str	r0, [r7, #12]
 8002f3c:	60b9      	str	r1, [r7, #8]
 8002f3e:	607a      	str	r2, [r7, #4]
 8002f40:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8002f42:	f107 0314 	add.w	r3, r7, #20
 8002f46:	2214      	movs	r2, #20
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f001 fb02 	bl	8004554 <memset>
  TaskInfo.TaskID     = TaskID;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8002f5c:	683b      	ldr	r3, [r7, #0]
 8002f5e:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8002f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f62:	627b      	str	r3, [r7, #36]	; 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8002f64:	f107 0314 	add.w	r3, r7, #20
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f000 fe6f 	bl	8003c4c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8002f6e:	bf00      	nop
 8002f70:	3728      	adds	r7, #40	; 0x28
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}
	...

08002f78 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8002f7e:	4b21      	ldr	r3, [pc, #132]	; (8003004 <_DoInit+0x8c>)
 8002f80:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2203      	movs	r2, #3
 8002f86:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2203      	movs	r2, #3
 8002f8c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a1d      	ldr	r2, [pc, #116]	; (8003008 <_DoInit+0x90>)
 8002f92:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	4a1d      	ldr	r2, [pc, #116]	; (800300c <_DoInit+0x94>)
 8002f98:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002fa0:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	629a      	str	r2, [r3, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	2200      	movs	r2, #0
 8002fac:	625a      	str	r2, [r3, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	62da      	str	r2, [r3, #44]	; 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a14      	ldr	r2, [pc, #80]	; (8003008 <_DoInit+0x90>)
 8002fb8:	661a      	str	r2, [r3, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a14      	ldr	r2, [pc, #80]	; (8003010 <_DoInit+0x98>)
 8002fbe:	665a      	str	r2, [r3, #100]	; 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2210      	movs	r2, #16
 8002fc4:	669a      	str	r2, [r3, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	671a      	str	r2, [r3, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	66da      	str	r2, [r3, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	675a      	str	r2, [r3, #116]	; 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	3307      	adds	r3, #7
 8002fdc:	4a0d      	ldr	r2, [pc, #52]	; (8003014 <_DoInit+0x9c>)
 8002fde:	6810      	ldr	r0, [r2, #0]
 8002fe0:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a0c      	ldr	r2, [pc, #48]	; (8003018 <_DoInit+0xa0>)
 8002fe6:	6810      	ldr	r0, [r2, #0]
 8002fe8:	6018      	str	r0, [r3, #0]
 8002fea:	8891      	ldrh	r1, [r2, #4]
 8002fec:	7992      	ldrb	r2, [r2, #6]
 8002fee:	8099      	strh	r1, [r3, #4]
 8002ff0:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2220      	movs	r2, #32
 8002ff6:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
 8002ff8:	bf00      	nop
 8002ffa:	370c      	adds	r7, #12
 8002ffc:	46bd      	mov	sp, r7
 8002ffe:	bc80      	pop	{r7}
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	200015fc 	.word	0x200015fc
 8003008:	08004668 	.word	0x08004668
 800300c:	200016a4 	.word	0x200016a4
 8003010:	20001aa4 	.word	0x20001aa4
 8003014:	08004674 	.word	0x08004674
 8003018:	08004678 	.word	0x08004678

0800301c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800301c:	b580      	push	{r7, lr}
 800301e:	b08c      	sub	sp, #48	; 0x30
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8003028:	4b3e      	ldr	r3, [pc, #248]	; (8003124 <SEGGER_RTT_ReadNoLock+0x108>)
 800302a:	623b      	str	r3, [r7, #32]
 800302c:	6a3b      	ldr	r3, [r7, #32]
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d101      	bne.n	800303a <SEGGER_RTT_ReadNoLock+0x1e>
 8003036:	f7ff ff9f 	bl	8002f78 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	4613      	mov	r3, r2
 800303e:	005b      	lsls	r3, r3, #1
 8003040:	4413      	add	r3, r2
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	3360      	adds	r3, #96	; 0x60
 8003046:	4a37      	ldr	r2, [pc, #220]	; (8003124 <SEGGER_RTT_ReadNoLock+0x108>)
 8003048:	4413      	add	r3, r2
 800304a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	627b      	str	r3, [r7, #36]	; 0x24
  RdOff = pRing->RdOff;
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	691b      	ldr	r3, [r3, #16]
 8003054:	62bb      	str	r3, [r7, #40]	; 0x28
  WrOff = pRing->WrOff;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	68db      	ldr	r3, [r3, #12]
 800305a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800305c:	2300      	movs	r3, #0
 800305e:	62fb      	str	r3, [r7, #44]	; 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8003060:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003062:	69bb      	ldr	r3, [r7, #24]
 8003064:	429a      	cmp	r2, r3
 8003066:	d92b      	bls.n	80030c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	689a      	ldr	r2, [r3, #8]
 800306c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4293      	cmp	r3, r2
 8003078:	bf28      	it	cs
 800307a:	4613      	movcs	r3, r2
 800307c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003084:	4413      	add	r3, r2
 8003086:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	6939      	ldr	r1, [r7, #16]
 800308c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800308e:	f001 fa53 	bl	8004538 <memcpy>
    NumBytesRead += NumBytesRem;
 8003092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	4413      	add	r3, r2
 8003098:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 800309a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	4413      	add	r3, r2
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80030aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	4413      	add	r3, r2
 80030b0:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d101      	bne.n	80030c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80030bc:	2300      	movs	r3, #0
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80030c8:	697a      	ldr	r2, [r7, #20]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	4293      	cmp	r3, r2
 80030ce:	bf28      	it	cs
 80030d0:	4613      	movcs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80030d4:	697b      	ldr	r3, [r7, #20]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d019      	beq.n	800310e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	685a      	ldr	r2, [r3, #4]
 80030de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030e0:	4413      	add	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80030e4:	697a      	ldr	r2, [r7, #20]
 80030e6:	6939      	ldr	r1, [r7, #16]
 80030e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80030ea:	f001 fa25 	bl	8004538 <memcpy>
    NumBytesRead += NumBytesRem;
 80030ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	4413      	add	r3, r2
 80030f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    pBuffer      += NumBytesRem;
 80030f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	4413      	add	r3, r2
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
    BufferSize   -= NumBytesRem;
 80030fe:	687a      	ldr	r2, [r7, #4]
 8003100:	697b      	ldr	r3, [r7, #20]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8003106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	4413      	add	r3, r2
 800310c:	62bb      	str	r3, [r7, #40]	; 0x28
#endif
  }
  if (NumBytesRead) {
 800310e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003118:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800311a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800311c:	4618      	mov	r0, r3
 800311e:	3730      	adds	r7, #48	; 0x30
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	200015fc 	.word	0x200015fc

08003128 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
 8003134:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8003136:	4b3c      	ldr	r3, [pc, #240]	; (8003228 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003138:	61bb      	str	r3, [r7, #24]
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b00      	cmp	r3, #0
 8003142:	d101      	bne.n	8003148 <SEGGER_RTT_AllocUpBuffer+0x20>
 8003144:	f7ff ff18 	bl	8002f78 <_DoInit>
  SEGGER_RTT_LOCK();
 8003148:	f3ef 8311 	mrs	r3, BASEPRI
 800314c:	f04f 0120 	mov.w	r1, #32
 8003150:	f381 8811 	msr	BASEPRI, r1
 8003154:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8003156:	4b34      	ldr	r3, [pc, #208]	; (8003228 <SEGGER_RTT_AllocUpBuffer+0x100>)
 8003158:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800315a:	2300      	movs	r3, #0
 800315c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800315e:	6939      	ldr	r1, [r7, #16]
 8003160:	69fb      	ldr	r3, [r7, #28]
 8003162:	1c5a      	adds	r2, r3, #1
 8003164:	4613      	mov	r3, r2
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	4413      	add	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	440b      	add	r3, r1
 800316e:	3304      	adds	r3, #4
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d008      	beq.n	8003188 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8003176:	69fb      	ldr	r3, [r7, #28]
 8003178:	3301      	adds	r3, #1
 800317a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	691b      	ldr	r3, [r3, #16]
 8003180:	69fa      	ldr	r2, [r7, #28]
 8003182:	429a      	cmp	r2, r3
 8003184:	dbeb      	blt.n	800315e <SEGGER_RTT_AllocUpBuffer+0x36>
 8003186:	e000      	b.n	800318a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8003188:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	691b      	ldr	r3, [r3, #16]
 800318e:	69fa      	ldr	r2, [r7, #28]
 8003190:	429a      	cmp	r2, r3
 8003192:	da3d      	bge.n	8003210 <SEGGER_RTT_AllocUpBuffer+0xe8>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8003194:	6939      	ldr	r1, [r7, #16]
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	1c5a      	adds	r2, r3, #1
 800319a:	4613      	mov	r3, r2
 800319c:	005b      	lsls	r3, r3, #1
 800319e:	4413      	add	r3, r2
 80031a0:	00db      	lsls	r3, r3, #3
 80031a2:	440b      	add	r3, r1
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80031a8:	6939      	ldr	r1, [r7, #16]
 80031aa:	69fb      	ldr	r3, [r7, #28]
 80031ac:	1c5a      	adds	r2, r3, #1
 80031ae:	4613      	mov	r3, r2
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	4413      	add	r3, r2
 80031b4:	00db      	lsls	r3, r3, #3
 80031b6:	440b      	add	r3, r1
 80031b8:	3304      	adds	r3, #4
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80031be:	6939      	ldr	r1, [r7, #16]
 80031c0:	69fa      	ldr	r2, [r7, #28]
 80031c2:	4613      	mov	r3, r2
 80031c4:	005b      	lsls	r3, r3, #1
 80031c6:	4413      	add	r3, r2
 80031c8:	00db      	lsls	r3, r3, #3
 80031ca:	440b      	add	r3, r1
 80031cc:	3320      	adds	r3, #32
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80031d2:	6939      	ldr	r1, [r7, #16]
 80031d4:	69fa      	ldr	r2, [r7, #28]
 80031d6:	4613      	mov	r3, r2
 80031d8:	005b      	lsls	r3, r3, #1
 80031da:	4413      	add	r3, r2
 80031dc:	00db      	lsls	r3, r3, #3
 80031de:	440b      	add	r3, r1
 80031e0:	3328      	adds	r3, #40	; 0x28
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80031e6:	6939      	ldr	r1, [r7, #16]
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	4613      	mov	r3, r2
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	4413      	add	r3, r2
 80031f0:	00db      	lsls	r3, r3, #3
 80031f2:	440b      	add	r3, r1
 80031f4:	3324      	adds	r3, #36	; 0x24
 80031f6:	2200      	movs	r2, #0
 80031f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80031fa:	6939      	ldr	r1, [r7, #16]
 80031fc:	69fa      	ldr	r2, [r7, #28]
 80031fe:	4613      	mov	r3, r2
 8003200:	005b      	lsls	r3, r3, #1
 8003202:	4413      	add	r3, r2
 8003204:	00db      	lsls	r3, r3, #3
 8003206:	440b      	add	r3, r1
 8003208:	332c      	adds	r3, #44	; 0x2c
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	601a      	str	r2, [r3, #0]
 800320e:	e002      	b.n	8003216 <SEGGER_RTT_AllocUpBuffer+0xee>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
  } else {
    BufferIndex = -1;
 8003210:	f04f 33ff 	mov.w	r3, #4294967295
 8003214:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800321c:	69fb      	ldr	r3, [r7, #28]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3720      	adds	r7, #32
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200015fc 	.word	0x200015fc

0800322c <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af00      	add	r7, sp, #0
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	60b9      	str	r1, [r7, #8]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800323a:	4b32      	ldr	r3, [pc, #200]	; (8003304 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800323c:	61bb      	str	r3, [r7, #24]
 800323e:	69bb      	ldr	r3, [r7, #24]
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2b00      	cmp	r3, #0
 8003246:	d101      	bne.n	800324c <SEGGER_RTT_ConfigDownBuffer+0x20>
 8003248:	f7ff fe96 	bl	8002f78 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <SEGGER_RTT_ConfigDownBuffer+0xd8>)
 800324e:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	461a      	mov	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	4293      	cmp	r3, r2
 800325a:	d24b      	bcs.n	80032f4 <SEGGER_RTT_ConfigDownBuffer+0xc8>
    SEGGER_RTT_LOCK();
 800325c:	f3ef 8311 	mrs	r3, BASEPRI
 8003260:	f04f 0120 	mov.w	r1, #32
 8003264:	f381 8811 	msr	BASEPRI, r1
 8003268:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d031      	beq.n	80032d4 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8003270:	6979      	ldr	r1, [r7, #20]
 8003272:	68fa      	ldr	r2, [r7, #12]
 8003274:	4613      	mov	r3, r2
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	4413      	add	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	440b      	add	r3, r1
 800327e:	3360      	adds	r3, #96	; 0x60
 8003280:	68ba      	ldr	r2, [r7, #8]
 8003282:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8003284:	6979      	ldr	r1, [r7, #20]
 8003286:	68fa      	ldr	r2, [r7, #12]
 8003288:	4613      	mov	r3, r2
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	4413      	add	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	440b      	add	r3, r1
 8003292:	3364      	adds	r3, #100	; 0x64
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8003298:	6979      	ldr	r1, [r7, #20]
 800329a:	68fa      	ldr	r2, [r7, #12]
 800329c:	4613      	mov	r3, r2
 800329e:	005b      	lsls	r3, r3, #1
 80032a0:	4413      	add	r3, r2
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	440b      	add	r3, r1
 80032a6:	3368      	adds	r3, #104	; 0x68
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80032ac:	6979      	ldr	r1, [r7, #20]
 80032ae:	68fa      	ldr	r2, [r7, #12]
 80032b0:	4613      	mov	r3, r2
 80032b2:	005b      	lsls	r3, r3, #1
 80032b4:	4413      	add	r3, r2
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	440b      	add	r3, r1
 80032ba:	3370      	adds	r3, #112	; 0x70
 80032bc:	2200      	movs	r2, #0
 80032be:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80032c0:	6979      	ldr	r1, [r7, #20]
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4613      	mov	r3, r2
 80032c6:	005b      	lsls	r3, r3, #1
 80032c8:	4413      	add	r3, r2
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	440b      	add	r3, r1
 80032ce:	336c      	adds	r3, #108	; 0x6c
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80032d4:	6979      	ldr	r1, [r7, #20]
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	4613      	mov	r3, r2
 80032da:	005b      	lsls	r3, r3, #1
 80032dc:	4413      	add	r3, r2
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	440b      	add	r3, r1
 80032e2:	3374      	adds	r3, #116	; 0x74
 80032e4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80032e6:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    SEGGER_RTT_UNLOCK();
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80032ee:	2300      	movs	r3, #0
 80032f0:	61fb      	str	r3, [r7, #28]
 80032f2:	e002      	b.n	80032fa <SEGGER_RTT_ConfigDownBuffer+0xce>
  } else {
    r = -1;
 80032f4:	f04f 33ff 	mov.w	r3, #4294967295
 80032f8:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80032fa:	69fb      	ldr	r3, [r7, #28]
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200015fc 	.word	0x200015fc

08003308 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8003308:	b480      	push	{r7}
 800330a:	b087      	sub	sp, #28
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8003314:	2300      	movs	r3, #0
 8003316:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003318:	e002      	b.n	8003320 <_EncodeStr+0x18>
    Len++;
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3301      	adds	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8003320:	68ba      	ldr	r2, [r7, #8]
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	4413      	add	r3, r2
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1f6      	bne.n	800331a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 800332c:	693a      	ldr	r2, [r7, #16]
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	429a      	cmp	r2, r3
 8003332:	d901      	bls.n	8003338 <_EncodeStr+0x30>
    Len = Limit;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	2bfe      	cmp	r3, #254	; 0xfe
 800333c:	d806      	bhi.n	800334c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	60fa      	str	r2, [r7, #12]
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	e011      	b.n	8003370 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1c5a      	adds	r2, r3, #1
 8003350:	60fa      	str	r2, [r7, #12]
 8003352:	22ff      	movs	r2, #255	; 0xff
 8003354:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	1c5a      	adds	r2, r3, #1
 800335a:	60fa      	str	r2, [r7, #12]
 800335c:	693a      	ldr	r2, [r7, #16]
 800335e:	b2d2      	uxtb	r2, r2
 8003360:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	0a19      	lsrs	r1, r3, #8
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	60fa      	str	r2, [r7, #12]
 800336c:	b2ca      	uxtb	r2, r1
 800336e:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8003370:	2300      	movs	r3, #0
 8003372:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8003374:	e00a      	b.n	800338c <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8003376:	68ba      	ldr	r2, [r7, #8]
 8003378:	1c53      	adds	r3, r2, #1
 800337a:	60bb      	str	r3, [r7, #8]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1c59      	adds	r1, r3, #1
 8003380:	60f9      	str	r1, [r7, #12]
 8003382:	7812      	ldrb	r2, [r2, #0]
 8003384:	701a      	strb	r2, [r3, #0]
    n++;
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	3301      	adds	r3, #1
 800338a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	429a      	cmp	r2, r3
 8003392:	d3f0      	bcc.n	8003376 <_EncodeStr+0x6e>
  }
  return pPayload;
 8003394:	68fb      	ldr	r3, [r7, #12]
}
 8003396:	4618      	mov	r0, r3
 8003398:	371c      	adds	r7, #28
 800339a:	46bd      	mov	sp, r7
 800339c:	bc80      	pop	{r7}
 800339e:	4770      	bx	lr

080033a0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	370c      	adds	r7, #12
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bc80      	pop	{r7}
 80033b4:	4770      	bx	lr
	...

080033b8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80033be:	4b36      	ldr	r3, [pc, #216]	; (8003498 <_HandleIncomingPacket+0xe0>)
 80033c0:	7e1b      	ldrb	r3, [r3, #24]
 80033c2:	4618      	mov	r0, r3
 80033c4:	1cfb      	adds	r3, r7, #3
 80033c6:	2201      	movs	r2, #1
 80033c8:	4619      	mov	r1, r3
 80033ca:	f7ff fe27 	bl	800301c <SEGGER_RTT_ReadNoLock>
 80033ce:	4603      	mov	r3, r0
 80033d0:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	dd54      	ble.n	8003482 <_HandleIncomingPacket+0xca>
    switch (Cmd) {
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	2b80      	cmp	r3, #128	; 0x80
 80033dc:	d032      	beq.n	8003444 <_HandleIncomingPacket+0x8c>
 80033de:	2b80      	cmp	r3, #128	; 0x80
 80033e0:	dc42      	bgt.n	8003468 <_HandleIncomingPacket+0xb0>
 80033e2:	2b07      	cmp	r3, #7
 80033e4:	dc16      	bgt.n	8003414 <_HandleIncomingPacket+0x5c>
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	dd3e      	ble.n	8003468 <_HandleIncomingPacket+0xb0>
 80033ea:	3b01      	subs	r3, #1
 80033ec:	2b06      	cmp	r3, #6
 80033ee:	d83b      	bhi.n	8003468 <_HandleIncomingPacket+0xb0>
 80033f0:	a201      	add	r2, pc, #4	; (adr r2, 80033f8 <_HandleIncomingPacket+0x40>)
 80033f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033f6:	bf00      	nop
 80033f8:	0800341b 	.word	0x0800341b
 80033fc:	08003421 	.word	0x08003421
 8003400:	08003427 	.word	0x08003427
 8003404:	0800342d 	.word	0x0800342d
 8003408:	08003433 	.word	0x08003433
 800340c:	08003439 	.word	0x08003439
 8003410:	0800343f 	.word	0x0800343f
 8003414:	2b7f      	cmp	r3, #127	; 0x7f
 8003416:	d036      	beq.n	8003486 <_HandleIncomingPacket+0xce>
 8003418:	e026      	b.n	8003468 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800341a:	f000 fa9d 	bl	8003958 <SEGGER_SYSVIEW_Start>
      break;
 800341e:	e037      	b.n	8003490 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8003420:	f000 fb54 	bl	8003acc <SEGGER_SYSVIEW_Stop>
      break;
 8003424:	e034      	b.n	8003490 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8003426:	f000 fd2d 	bl	8003e84 <SEGGER_SYSVIEW_RecordSystime>
      break;
 800342a:	e031      	b.n	8003490 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800342c:	f000 fcf2 	bl	8003e14 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8003430:	e02e      	b.n	8003490 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8003432:	f000 fb71 	bl	8003b18 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8003436:	e02b      	b.n	8003490 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8003438:	f000 ffb0 	bl	800439c <SEGGER_SYSVIEW_SendNumModules>
      break;
 800343c:	e028      	b.n	8003490 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800343e:	f000 ff8f 	bl	8004360 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8003442:	e025      	b.n	8003490 <_HandleIncomingPacket+0xd8>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003444:	4b14      	ldr	r3, [pc, #80]	; (8003498 <_HandleIncomingPacket+0xe0>)
 8003446:	7e1b      	ldrb	r3, [r3, #24]
 8003448:	4618      	mov	r0, r3
 800344a:	1cfb      	adds	r3, r7, #3
 800344c:	2201      	movs	r2, #1
 800344e:	4619      	mov	r1, r3
 8003450:	f7ff fde4 	bl	800301c <SEGGER_RTT_ReadNoLock>
 8003454:	4603      	mov	r3, r0
 8003456:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	dd15      	ble.n	800348a <_HandleIncomingPacket+0xd2>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800345e:	78fb      	ldrb	r3, [r7, #3]
 8003460:	4618      	mov	r0, r3
 8003462:	f000 fefd 	bl	8004260 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8003466:	e010      	b.n	800348a <_HandleIncomingPacket+0xd2>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	b25b      	sxtb	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	da0e      	bge.n	800348e <_HandleIncomingPacket+0xd6>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8003470:	4b09      	ldr	r3, [pc, #36]	; (8003498 <_HandleIncomingPacket+0xe0>)
 8003472:	7e1b      	ldrb	r3, [r3, #24]
 8003474:	4618      	mov	r0, r3
 8003476:	1cfb      	adds	r3, r7, #3
 8003478:	2201      	movs	r2, #1
 800347a:	4619      	mov	r1, r3
 800347c:	f7ff fdce 	bl	800301c <SEGGER_RTT_ReadNoLock>
      }
      break;
 8003480:	e005      	b.n	800348e <_HandleIncomingPacket+0xd6>
    }
  }
 8003482:	bf00      	nop
 8003484:	e004      	b.n	8003490 <_HandleIncomingPacket+0xd8>
      break;
 8003486:	bf00      	nop
 8003488:	e002      	b.n	8003490 <_HandleIncomingPacket+0xd8>
      break;
 800348a:	bf00      	nop
 800348c:	e000      	b.n	8003490 <_HandleIncomingPacket+0xd8>
      break;
 800348e:	bf00      	nop
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}
 8003498:	20002abc 	.word	0x20002abc

0800349c <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800349c:	b580      	push	{r7, lr}
 800349e:	b08c      	sub	sp, #48	; 0x30
 80034a0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80034a2:	2301      	movs	r3, #1
 80034a4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80034a6:	1d3b      	adds	r3, r7, #4
 80034a8:	3301      	adds	r3, #1
 80034aa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80034ac:	69fb      	ldr	r3, [r7, #28]
 80034ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034b0:	4b31      	ldr	r3, [pc, #196]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 80034b2:	695b      	ldr	r3, [r3, #20]
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b6:	e00b      	b.n	80034d0 <_TrySendOverflowPacket+0x34>
 80034b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ba:	b2da      	uxtb	r2, r3
 80034bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034be:	1c59      	adds	r1, r3, #1
 80034c0:	62f9      	str	r1, [r7, #44]	; 0x2c
 80034c2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80034c6:	b2d2      	uxtb	r2, r2
 80034c8:	701a      	strb	r2, [r3, #0]
 80034ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034cc:	09db      	lsrs	r3, r3, #7
 80034ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034d2:	2b7f      	cmp	r3, #127	; 0x7f
 80034d4:	d8f0      	bhi.n	80034b8 <_TrySendOverflowPacket+0x1c>
 80034d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	701a      	strb	r2, [r3, #0]
 80034e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034e4:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80034e6:	4b25      	ldr	r3, [pc, #148]	; (800357c <_TrySendOverflowPacket+0xe0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80034ec:	4b22      	ldr	r3, [pc, #136]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	1ad3      	subs	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	627b      	str	r3, [r7, #36]	; 0x24
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	623b      	str	r3, [r7, #32]
 80034fe:	e00b      	b.n	8003518 <_TrySendOverflowPacket+0x7c>
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	1c59      	adds	r1, r3, #1
 8003508:	6279      	str	r1, [r7, #36]	; 0x24
 800350a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800350e:	b2d2      	uxtb	r2, r2
 8003510:	701a      	strb	r2, [r3, #0]
 8003512:	6a3b      	ldr	r3, [r7, #32]
 8003514:	09db      	lsrs	r3, r3, #7
 8003516:	623b      	str	r3, [r7, #32]
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	2b7f      	cmp	r3, #127	; 0x7f
 800351c:	d8f0      	bhi.n	8003500 <_TrySendOverflowPacket+0x64>
 800351e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	627a      	str	r2, [r7, #36]	; 0x24
 8003524:	6a3a      	ldr	r2, [r7, #32]
 8003526:	b2d2      	uxtb	r2, r2
 8003528:	701a      	strb	r2, [r3, #0]
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 800352e:	4b12      	ldr	r3, [pc, #72]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 8003530:	785b      	ldrb	r3, [r3, #1]
 8003532:	4618      	mov	r0, r3
 8003534:	1d3b      	adds	r3, r7, #4
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	461a      	mov	r2, r3
 800353c:	1d3b      	adds	r3, r7, #4
 800353e:	4619      	mov	r1, r3
 8003540:	f7fc fe06 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8003544:	4603      	mov	r3, r0
 8003546:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d009      	beq.n	8003562 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800354e:	4a0a      	ldr	r2, [pc, #40]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 8003550:	69bb      	ldr	r3, [r7, #24]
 8003552:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8003554:	4b08      	ldr	r3, [pc, #32]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	3b01      	subs	r3, #1
 800355a:	b2da      	uxtb	r2, r3
 800355c:	4b06      	ldr	r3, [pc, #24]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	e004      	b.n	800356c <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8003562:	4b05      	ldr	r3, [pc, #20]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	3301      	adds	r3, #1
 8003568:	4a03      	ldr	r2, [pc, #12]	; (8003578 <_TrySendOverflowPacket+0xdc>)
 800356a:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800356c:	693b      	ldr	r3, [r7, #16]
}
 800356e:	4618      	mov	r0, r3
 8003570:	3730      	adds	r7, #48	; 0x30
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	20002abc 	.word	0x20002abc
 800357c:	e0001004 	.word	0xe0001004

08003580 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800358c:	4b6c      	ldr	r3, [pc, #432]	; (8003740 <_SendPacket+0x1c0>)
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d010      	beq.n	80035b6 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8003594:	4b6a      	ldr	r3, [pc, #424]	; (8003740 <_SendPacket+0x1c0>)
 8003596:	781b      	ldrb	r3, [r3, #0]
 8003598:	2b00      	cmp	r3, #0
 800359a:	f000 80a3 	beq.w	80036e4 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800359e:	4b68      	ldr	r3, [pc, #416]	; (8003740 <_SendPacket+0x1c0>)
 80035a0:	781b      	ldrb	r3, [r3, #0]
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d109      	bne.n	80035ba <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80035a6:	f7ff ff79 	bl	800349c <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80035aa:	4b65      	ldr	r3, [pc, #404]	; (8003740 <_SendPacket+0x1c0>)
 80035ac:	781b      	ldrb	r3, [r3, #0]
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	f040 809a 	bne.w	80036e8 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80035b4:	e001      	b.n	80035ba <_SendPacket+0x3a>
    goto Send;
 80035b6:	bf00      	nop
 80035b8:	e000      	b.n	80035bc <_SendPacket+0x3c>
Send:
 80035ba:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2b1f      	cmp	r3, #31
 80035c0:	d809      	bhi.n	80035d6 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80035c2:	4b5f      	ldr	r3, [pc, #380]	; (8003740 <_SendPacket+0x1c0>)
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	fa22 f303 	lsr.w	r3, r2, r3
 80035cc:	f003 0301 	and.w	r3, r3, #1
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	f040 808b 	bne.w	80036ec <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b17      	cmp	r3, #23
 80035da:	d807      	bhi.n	80035ec <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	3b01      	subs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	b2da      	uxtb	r2, r3
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	701a      	strb	r2, [r3, #0]
 80035ea:	e03d      	b.n	8003668 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80035ec:	68ba      	ldr	r2, [r7, #8]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	2b7f      	cmp	r3, #127	; 0x7f
 80035f8:	d912      	bls.n	8003620 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	09da      	lsrs	r2, r3, #7
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	3b01      	subs	r3, #1
 8003602:	60fb      	str	r3, [r7, #12]
 8003604:	b2d2      	uxtb	r2, r2
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	68fa      	ldr	r2, [r7, #12]
 8003610:	3a01      	subs	r2, #1
 8003612:	60fa      	str	r2, [r7, #12]
 8003614:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003618:	b2da      	uxtb	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	701a      	strb	r2, [r3, #0]
 800361e:	e006      	b.n	800362e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	3b01      	subs	r3, #1
 8003624:	60fb      	str	r3, [r7, #12]
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	2b7f      	cmp	r3, #127	; 0x7f
 8003632:	d912      	bls.n	800365a <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	09da      	lsrs	r2, r3, #7
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	3b01      	subs	r3, #1
 800363c:	60fb      	str	r3, [r7, #12]
 800363e:	b2d2      	uxtb	r2, r2
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	b2db      	uxtb	r3, r3
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	3a01      	subs	r2, #1
 800364c:	60fa      	str	r2, [r7, #12]
 800364e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003652:	b2da      	uxtb	r2, r3
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	701a      	strb	r2, [r3, #0]
 8003658:	e006      	b.n	8003668 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	3b01      	subs	r3, #1
 800365e:	60fb      	str	r3, [r7, #12]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	b2da      	uxtb	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003668:	4b36      	ldr	r3, [pc, #216]	; (8003744 <_SendPacket+0x1c4>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800366e:	4b34      	ldr	r3, [pc, #208]	; (8003740 <_SendPacket+0x1c0>)
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	69ba      	ldr	r2, [r7, #24]
 8003674:	1ad3      	subs	r3, r2, r3
 8003676:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	627b      	str	r3, [r7, #36]	; 0x24
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	623b      	str	r3, [r7, #32]
 8003680:	e00b      	b.n	800369a <_SendPacket+0x11a>
 8003682:	6a3b      	ldr	r3, [r7, #32]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003688:	1c59      	adds	r1, r3, #1
 800368a:	6279      	str	r1, [r7, #36]	; 0x24
 800368c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003690:	b2d2      	uxtb	r2, r2
 8003692:	701a      	strb	r2, [r3, #0]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	09db      	lsrs	r3, r3, #7
 8003698:	623b      	str	r3, [r7, #32]
 800369a:	6a3b      	ldr	r3, [r7, #32]
 800369c:	2b7f      	cmp	r3, #127	; 0x7f
 800369e:	d8f0      	bhi.n	8003682 <_SendPacket+0x102>
 80036a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036a2:	1c5a      	adds	r2, r3, #1
 80036a4:	627a      	str	r2, [r7, #36]	; 0x24
 80036a6:	6a3a      	ldr	r2, [r7, #32]
 80036a8:	b2d2      	uxtb	r2, r2
 80036aa:	701a      	strb	r2, [r3, #0]
 80036ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ae:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80036b0:	4b23      	ldr	r3, [pc, #140]	; (8003740 <_SendPacket+0x1c0>)
 80036b2:	785b      	ldrb	r3, [r3, #1]
 80036b4:	4618      	mov	r0, r3
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	1ad3      	subs	r3, r2, r3
 80036bc:	461a      	mov	r2, r3
 80036be:	68f9      	ldr	r1, [r7, #12]
 80036c0:	f7fc fd46 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80036c4:	4603      	mov	r3, r0
 80036c6:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80036ce:	4a1c      	ldr	r2, [pc, #112]	; (8003740 <_SendPacket+0x1c0>)
 80036d0:	69bb      	ldr	r3, [r7, #24]
 80036d2:	60d3      	str	r3, [r2, #12]
 80036d4:	e00b      	b.n	80036ee <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80036d6:	4b1a      	ldr	r3, [pc, #104]	; (8003740 <_SendPacket+0x1c0>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b18      	ldr	r3, [pc, #96]	; (8003740 <_SendPacket+0x1c0>)
 80036e0:	701a      	strb	r2, [r3, #0]
 80036e2:	e004      	b.n	80036ee <_SendPacket+0x16e>
    goto SendDone;
 80036e4:	bf00      	nop
 80036e6:	e002      	b.n	80036ee <_SendPacket+0x16e>
      goto SendDone;
 80036e8:	bf00      	nop
 80036ea:	e000      	b.n	80036ee <_SendPacket+0x16e>
      goto SendDone;
 80036ec:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80036ee:	4b14      	ldr	r3, [pc, #80]	; (8003740 <_SendPacket+0x1c0>)
 80036f0:	7e1b      	ldrb	r3, [r3, #24]
 80036f2:	4619      	mov	r1, r3
 80036f4:	4a14      	ldr	r2, [pc, #80]	; (8003748 <_SendPacket+0x1c8>)
 80036f6:	460b      	mov	r3, r1
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	440b      	add	r3, r1
 80036fc:	00db      	lsls	r3, r3, #3
 80036fe:	4413      	add	r3, r2
 8003700:	336c      	adds	r3, #108	; 0x6c
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	4b0e      	ldr	r3, [pc, #56]	; (8003740 <_SendPacket+0x1c0>)
 8003706:	7e1b      	ldrb	r3, [r3, #24]
 8003708:	4618      	mov	r0, r3
 800370a:	490f      	ldr	r1, [pc, #60]	; (8003748 <_SendPacket+0x1c8>)
 800370c:	4603      	mov	r3, r0
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4403      	add	r3, r0
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	3370      	adds	r3, #112	; 0x70
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	429a      	cmp	r2, r3
 800371c:	d00b      	beq.n	8003736 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800371e:	4b08      	ldr	r3, [pc, #32]	; (8003740 <_SendPacket+0x1c0>)
 8003720:	789b      	ldrb	r3, [r3, #2]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d107      	bne.n	8003736 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <_SendPacket+0x1c0>)
 8003728:	2201      	movs	r2, #1
 800372a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800372c:	f7ff fe44 	bl	80033b8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8003730:	4b03      	ldr	r3, [pc, #12]	; (8003740 <_SendPacket+0x1c0>)
 8003732:	2200      	movs	r2, #0
 8003734:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8003736:	bf00      	nop
 8003738:	3728      	adds	r7, #40	; 0x28
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	20002abc 	.word	0x20002abc
 8003744:	e0001004 	.word	0xe0001004
 8003748:	200015fc 	.word	0x200015fc

0800374c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800374c:	b580      	push	{r7, lr}
 800374e:	b086      	sub	sp, #24
 8003750:	af02      	add	r7, sp, #8
 8003752:	60f8      	str	r0, [r7, #12]
 8003754:	60b9      	str	r1, [r7, #8]
 8003756:	607a      	str	r2, [r7, #4]
 8003758:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800375a:	2300      	movs	r3, #0
 800375c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003760:	4917      	ldr	r1, [pc, #92]	; (80037c0 <SEGGER_SYSVIEW_Init+0x74>)
 8003762:	4818      	ldr	r0, [pc, #96]	; (80037c4 <SEGGER_SYSVIEW_Init+0x78>)
 8003764:	f7ff fce0 	bl	8003128 <SEGGER_RTT_AllocUpBuffer>
 8003768:	4603      	mov	r3, r0
 800376a:	b2da      	uxtb	r2, r3
 800376c:	4b16      	ldr	r3, [pc, #88]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800376e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8003770:	4b15      	ldr	r3, [pc, #84]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8003772:	785a      	ldrb	r2, [r3, #1]
 8003774:	4b14      	ldr	r3, [pc, #80]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8003776:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8003778:	4b13      	ldr	r3, [pc, #76]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800377a:	7e1b      	ldrb	r3, [r3, #24]
 800377c:	4618      	mov	r0, r3
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2308      	movs	r3, #8
 8003784:	4a11      	ldr	r2, [pc, #68]	; (80037cc <SEGGER_SYSVIEW_Init+0x80>)
 8003786:	490f      	ldr	r1, [pc, #60]	; (80037c4 <SEGGER_SYSVIEW_Init+0x78>)
 8003788:	f7ff fd50 	bl	800322c <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800378c:	4b0e      	ldr	r3, [pc, #56]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800378e:	2200      	movs	r2, #0
 8003790:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8003792:	4b0f      	ldr	r3, [pc, #60]	; (80037d0 <SEGGER_SYSVIEW_Init+0x84>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a0c      	ldr	r2, [pc, #48]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 8003798:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800379a:	4a0b      	ldr	r2, [pc, #44]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80037a0:	4a09      	ldr	r2, [pc, #36]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80037a6:	4a08      	ldr	r2, [pc, #32]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80037ac:	4a06      	ldr	r2, [pc, #24]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	6253      	str	r3, [r2, #36]	; 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80037b2:	4b05      	ldr	r3, [pc, #20]	; (80037c8 <SEGGER_SYSVIEW_Init+0x7c>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80037b8:	bf00      	nop
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	20001ab4 	.word	0x20001ab4
 80037c4:	08004680 	.word	0x08004680
 80037c8:	20002abc 	.word	0x20002abc
 80037cc:	20002ab4 	.word	0x20002ab4
 80037d0:	e0001004 	.word	0xe0001004

080037d4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 80037d4:	b480      	push	{r7}
 80037d6:	b083      	sub	sp, #12
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 80037dc:	4a03      	ldr	r2, [pc, #12]	; (80037ec <SEGGER_SYSVIEW_SetRAMBase+0x18>)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6113      	str	r3, [r2, #16]
}
 80037e2:	bf00      	nop
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bc80      	pop	{r7}
 80037ea:	4770      	bx	lr
 80037ec:	20002abc 	.word	0x20002abc

080037f0 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b084      	sub	sp, #16
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80037f8:	f3ef 8311 	mrs	r3, BASEPRI
 80037fc:	f04f 0120 	mov.w	r1, #32
 8003800:	f381 8811 	msr	BASEPRI, r1
 8003804:	60fb      	str	r3, [r7, #12]
 8003806:	4808      	ldr	r0, [pc, #32]	; (8003828 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8003808:	f7ff fdca 	bl	80033a0 <_PreparePacket>
 800380c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	68b9      	ldr	r1, [r7, #8]
 8003812:	68b8      	ldr	r0, [r7, #8]
 8003814:	f7ff feb4 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	f383 8811 	msr	BASEPRI, r3
}
 800381e:	bf00      	nop
 8003820:	3710      	adds	r7, #16
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20002aec 	.word	0x20002aec

0800382c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b088      	sub	sp, #32
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003836:	f3ef 8311 	mrs	r3, BASEPRI
 800383a:	f04f 0120 	mov.w	r1, #32
 800383e:	f381 8811 	msr	BASEPRI, r1
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	4816      	ldr	r0, [pc, #88]	; (80038a0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8003846:	f7ff fdab 	bl	80033a0 <_PreparePacket>
 800384a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	61fb      	str	r3, [r7, #28]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	e00b      	b.n	8003872 <SEGGER_SYSVIEW_RecordU32+0x46>
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	b2da      	uxtb	r2, r3
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	1c59      	adds	r1, r3, #1
 8003862:	61f9      	str	r1, [r7, #28]
 8003864:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	09db      	lsrs	r3, r3, #7
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b7f      	cmp	r3, #127	; 0x7f
 8003876:	d8f0      	bhi.n	800385a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	1c5a      	adds	r2, r3, #1
 800387c:	61fa      	str	r2, [r7, #28]
 800387e:	69ba      	ldr	r2, [r7, #24]
 8003880:	b2d2      	uxtb	r2, r2
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8003888:	687a      	ldr	r2, [r7, #4]
 800388a:	68f9      	ldr	r1, [r7, #12]
 800388c:	6938      	ldr	r0, [r7, #16]
 800388e:	f7ff fe77 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	f383 8811 	msr	BASEPRI, r3
}
 8003898:	bf00      	nop
 800389a:	3720      	adds	r7, #32
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}
 80038a0:	20002aec 	.word	0x20002aec

080038a4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08c      	sub	sp, #48	; 0x30
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	60f8      	str	r0, [r7, #12]
 80038ac:	60b9      	str	r1, [r7, #8]
 80038ae:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80038b0:	f3ef 8311 	mrs	r3, BASEPRI
 80038b4:	f04f 0120 	mov.w	r1, #32
 80038b8:	f381 8811 	msr	BASEPRI, r1
 80038bc:	61fb      	str	r3, [r7, #28]
 80038be:	4825      	ldr	r0, [pc, #148]	; (8003954 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80038c0:	f7ff fd6e 	bl	80033a0 <_PreparePacket>
 80038c4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80038d2:	e00b      	b.n	80038ec <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80038d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d6:	b2da      	uxtb	r2, r3
 80038d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038da:	1c59      	adds	r1, r3, #1
 80038dc:	62f9      	str	r1, [r7, #44]	; 0x2c
 80038de:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80038e2:	b2d2      	uxtb	r2, r2
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038e8:	09db      	lsrs	r3, r3, #7
 80038ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80038ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038ee:	2b7f      	cmp	r3, #127	; 0x7f
 80038f0:	d8f0      	bhi.n	80038d4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80038fa:	b2d2      	uxtb	r2, r2
 80038fc:	701a      	strb	r2, [r3, #0]
 80038fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003900:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	627b      	str	r3, [r7, #36]	; 0x24
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	623b      	str	r3, [r7, #32]
 800390a:	e00b      	b.n	8003924 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800390c:	6a3b      	ldr	r3, [r7, #32]
 800390e:	b2da      	uxtb	r2, r3
 8003910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	6279      	str	r1, [r7, #36]	; 0x24
 8003916:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800391a:	b2d2      	uxtb	r2, r2
 800391c:	701a      	strb	r2, [r3, #0]
 800391e:	6a3b      	ldr	r3, [r7, #32]
 8003920:	09db      	lsrs	r3, r3, #7
 8003922:	623b      	str	r3, [r7, #32]
 8003924:	6a3b      	ldr	r3, [r7, #32]
 8003926:	2b7f      	cmp	r3, #127	; 0x7f
 8003928:	d8f0      	bhi.n	800390c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800392a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392c:	1c5a      	adds	r2, r3, #1
 800392e:	627a      	str	r2, [r7, #36]	; 0x24
 8003930:	6a3a      	ldr	r2, [r7, #32]
 8003932:	b2d2      	uxtb	r2, r2
 8003934:	701a      	strb	r2, [r3, #0]
 8003936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003938:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	6979      	ldr	r1, [r7, #20]
 800393e:	69b8      	ldr	r0, [r7, #24]
 8003940:	f7ff fe1e 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003944:	69fb      	ldr	r3, [r7, #28]
 8003946:	f383 8811 	msr	BASEPRI, r3
}
 800394a:	bf00      	nop
 800394c:	3730      	adds	r7, #48	; 0x30
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20002aec 	.word	0x20002aec

08003958 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8003958:	b580      	push	{r7, lr}
 800395a:	b08c      	sub	sp, #48	; 0x30
 800395c:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800395e:	4b58      	ldr	r3, [pc, #352]	; (8003ac0 <SEGGER_SYSVIEW_Start+0x168>)
 8003960:	2201      	movs	r2, #1
 8003962:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8003964:	f3ef 8311 	mrs	r3, BASEPRI
 8003968:	f04f 0120 	mov.w	r1, #32
 800396c:	f381 8811 	msr	BASEPRI, r1
 8003970:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8003972:	4b53      	ldr	r3, [pc, #332]	; (8003ac0 <SEGGER_SYSVIEW_Start+0x168>)
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	220a      	movs	r2, #10
 8003978:	4952      	ldr	r1, [pc, #328]	; (8003ac4 <SEGGER_SYSVIEW_Start+0x16c>)
 800397a:	4618      	mov	r0, r3
 800397c:	f7fc fbe8 	bl	8000150 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8003986:	200a      	movs	r0, #10
 8003988:	f7ff ff32 	bl	80037f0 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800398c:	f3ef 8311 	mrs	r3, BASEPRI
 8003990:	f04f 0120 	mov.w	r1, #32
 8003994:	f381 8811 	msr	BASEPRI, r1
 8003998:	60bb      	str	r3, [r7, #8]
 800399a:	484b      	ldr	r0, [pc, #300]	; (8003ac8 <SEGGER_SYSVIEW_Start+0x170>)
 800399c:	f7ff fd00 	bl	80033a0 <_PreparePacket>
 80039a0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039aa:	4b45      	ldr	r3, [pc, #276]	; (8003ac0 <SEGGER_SYSVIEW_Start+0x168>)
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	62bb      	str	r3, [r7, #40]	; 0x28
 80039b0:	e00b      	b.n	80039ca <SEGGER_SYSVIEW_Start+0x72>
 80039b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039b4:	b2da      	uxtb	r2, r3
 80039b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039b8:	1c59      	adds	r1, r3, #1
 80039ba:	62f9      	str	r1, [r7, #44]	; 0x2c
 80039bc:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c6:	09db      	lsrs	r3, r3, #7
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	2b7f      	cmp	r3, #127	; 0x7f
 80039ce:	d8f0      	bhi.n	80039b2 <SEGGER_SYSVIEW_Start+0x5a>
 80039d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d2:	1c5a      	adds	r2, r3, #1
 80039d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80039d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80039d8:	b2d2      	uxtb	r2, r2
 80039da:	701a      	strb	r2, [r3, #0]
 80039dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	627b      	str	r3, [r7, #36]	; 0x24
 80039e4:	4b36      	ldr	r3, [pc, #216]	; (8003ac0 <SEGGER_SYSVIEW_Start+0x168>)
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	623b      	str	r3, [r7, #32]
 80039ea:	e00b      	b.n	8003a04 <SEGGER_SYSVIEW_Start+0xac>
 80039ec:	6a3b      	ldr	r3, [r7, #32]
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f2:	1c59      	adds	r1, r3, #1
 80039f4:	6279      	str	r1, [r7, #36]	; 0x24
 80039f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	701a      	strb	r2, [r3, #0]
 80039fe:	6a3b      	ldr	r3, [r7, #32]
 8003a00:	09db      	lsrs	r3, r3, #7
 8003a02:	623b      	str	r3, [r7, #32]
 8003a04:	6a3b      	ldr	r3, [r7, #32]
 8003a06:	2b7f      	cmp	r3, #127	; 0x7f
 8003a08:	d8f0      	bhi.n	80039ec <SEGGER_SYSVIEW_Start+0x94>
 8003a0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a0c:	1c5a      	adds	r2, r3, #1
 8003a0e:	627a      	str	r2, [r7, #36]	; 0x24
 8003a10:	6a3a      	ldr	r2, [r7, #32]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]
 8003a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a18:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	61fb      	str	r3, [r7, #28]
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <SEGGER_SYSVIEW_Start+0x168>)
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	61bb      	str	r3, [r7, #24]
 8003a24:	e00b      	b.n	8003a3e <SEGGER_SYSVIEW_Start+0xe6>
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	1c59      	adds	r1, r3, #1
 8003a2e:	61f9      	str	r1, [r7, #28]
 8003a30:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a34:	b2d2      	uxtb	r2, r2
 8003a36:	701a      	strb	r2, [r3, #0]
 8003a38:	69bb      	ldr	r3, [r7, #24]
 8003a3a:	09db      	lsrs	r3, r3, #7
 8003a3c:	61bb      	str	r3, [r7, #24]
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	2b7f      	cmp	r3, #127	; 0x7f
 8003a42:	d8f0      	bhi.n	8003a26 <SEGGER_SYSVIEW_Start+0xce>
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	61fa      	str	r2, [r7, #28]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	617b      	str	r3, [r7, #20]
 8003a58:	2300      	movs	r3, #0
 8003a5a:	613b      	str	r3, [r7, #16]
 8003a5c:	e00b      	b.n	8003a76 <SEGGER_SYSVIEW_Start+0x11e>
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	b2da      	uxtb	r2, r3
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	1c59      	adds	r1, r3, #1
 8003a66:	6179      	str	r1, [r7, #20]
 8003a68:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	701a      	strb	r2, [r3, #0]
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	09db      	lsrs	r3, r3, #7
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	2b7f      	cmp	r3, #127	; 0x7f
 8003a7a:	d8f0      	bhi.n	8003a5e <SEGGER_SYSVIEW_Start+0x106>
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	1c5a      	adds	r2, r3, #1
 8003a80:	617a      	str	r2, [r7, #20]
 8003a82:	693a      	ldr	r2, [r7, #16]
 8003a84:	b2d2      	uxtb	r2, r2
 8003a86:	701a      	strb	r2, [r3, #0]
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003a8c:	2218      	movs	r2, #24
 8003a8e:	6839      	ldr	r1, [r7, #0]
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f7ff fd75 	bl	8003580 <_SendPacket>
      RECORD_END();
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003a9c:	4b08      	ldr	r3, [pc, #32]	; (8003ac0 <SEGGER_SYSVIEW_Start+0x168>)
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8003aa4:	4b06      	ldr	r3, [pc, #24]	; (8003ac0 <SEGGER_SYSVIEW_Start+0x168>)
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8003aaa:	f000 f9eb 	bl	8003e84 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8003aae:	f000 f9b1 	bl	8003e14 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8003ab2:	f000 fc73 	bl	800439c <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8003ab6:	bf00      	nop
 8003ab8:	3730      	adds	r7, #48	; 0x30
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
 8003abe:	bf00      	nop
 8003ac0:	20002abc 	.word	0x20002abc
 8003ac4:	080046a8 	.word	0x080046a8
 8003ac8:	20002aec 	.word	0x20002aec

08003acc <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003ad2:	f3ef 8311 	mrs	r3, BASEPRI
 8003ad6:	f04f 0120 	mov.w	r1, #32
 8003ada:	f381 8811 	msr	BASEPRI, r1
 8003ade:	607b      	str	r3, [r7, #4]
 8003ae0:	480b      	ldr	r0, [pc, #44]	; (8003b10 <SEGGER_SYSVIEW_Stop+0x44>)
 8003ae2:	f7ff fc5d 	bl	80033a0 <_PreparePacket>
 8003ae6:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <SEGGER_SYSVIEW_Stop+0x48>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d007      	beq.n	8003b00 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8003af0:	220b      	movs	r2, #11
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	6838      	ldr	r0, [r7, #0]
 8003af6:	f7ff fd43 	bl	8003580 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <SEGGER_SYSVIEW_Stop+0x48>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f383 8811 	msr	BASEPRI, r3
}
 8003b06:	bf00      	nop
 8003b08:	3708      	adds	r7, #8
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	bd80      	pop	{r7, pc}
 8003b0e:	bf00      	nop
 8003b10:	20002aec 	.word	0x20002aec
 8003b14:	20002abc 	.word	0x20002abc

08003b18 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b08c      	sub	sp, #48	; 0x30
 8003b1c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8003b1e:	f3ef 8311 	mrs	r3, BASEPRI
 8003b22:	f04f 0120 	mov.w	r1, #32
 8003b26:	f381 8811 	msr	BASEPRI, r1
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	4845      	ldr	r0, [pc, #276]	; (8003c44 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8003b2e:	f7ff fc37 	bl	80033a0 <_PreparePacket>
 8003b32:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b3c:	4b42      	ldr	r3, [pc, #264]	; (8003c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b42:	e00b      	b.n	8003b5c <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	b2da      	uxtb	r2, r3
 8003b48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b4a:	1c59      	adds	r1, r3, #1
 8003b4c:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003b4e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	701a      	strb	r2, [r3, #0]
 8003b56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b58:	09db      	lsrs	r3, r3, #7
 8003b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5e:	2b7f      	cmp	r3, #127	; 0x7f
 8003b60:	d8f0      	bhi.n	8003b44 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8003b62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b64:	1c5a      	adds	r2, r3, #1
 8003b66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b6a:	b2d2      	uxtb	r2, r2
 8003b6c:	701a      	strb	r2, [r3, #0]
 8003b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b70:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	627b      	str	r3, [r7, #36]	; 0x24
 8003b76:	4b34      	ldr	r3, [pc, #208]	; (8003c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003b78:	689b      	ldr	r3, [r3, #8]
 8003b7a:	623b      	str	r3, [r7, #32]
 8003b7c:	e00b      	b.n	8003b96 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	b2da      	uxtb	r2, r3
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	1c59      	adds	r1, r3, #1
 8003b86:	6279      	str	r1, [r7, #36]	; 0x24
 8003b88:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003b8c:	b2d2      	uxtb	r2, r2
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	6a3b      	ldr	r3, [r7, #32]
 8003b92:	09db      	lsrs	r3, r3, #7
 8003b94:	623b      	str	r3, [r7, #32]
 8003b96:	6a3b      	ldr	r3, [r7, #32]
 8003b98:	2b7f      	cmp	r3, #127	; 0x7f
 8003b9a:	d8f0      	bhi.n	8003b7e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b9e:	1c5a      	adds	r2, r3, #1
 8003ba0:	627a      	str	r2, [r7, #36]	; 0x24
 8003ba2:	6a3a      	ldr	r2, [r7, #32]
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	701a      	strb	r2, [r3, #0]
 8003ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003baa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	61fb      	str	r3, [r7, #28]
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003bb2:	691b      	ldr	r3, [r3, #16]
 8003bb4:	61bb      	str	r3, [r7, #24]
 8003bb6:	e00b      	b.n	8003bd0 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	b2da      	uxtb	r2, r3
 8003bbc:	69fb      	ldr	r3, [r7, #28]
 8003bbe:	1c59      	adds	r1, r3, #1
 8003bc0:	61f9      	str	r1, [r7, #28]
 8003bc2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bc6:	b2d2      	uxtb	r2, r2
 8003bc8:	701a      	strb	r2, [r3, #0]
 8003bca:	69bb      	ldr	r3, [r7, #24]
 8003bcc:	09db      	lsrs	r3, r3, #7
 8003bce:	61bb      	str	r3, [r7, #24]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	2b7f      	cmp	r3, #127	; 0x7f
 8003bd4:	d8f0      	bhi.n	8003bb8 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	1c5a      	adds	r2, r3, #1
 8003bda:	61fa      	str	r2, [r7, #28]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	2300      	movs	r3, #0
 8003bec:	613b      	str	r3, [r7, #16]
 8003bee:	e00b      	b.n	8003c08 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	b2da      	uxtb	r2, r3
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	1c59      	adds	r1, r3, #1
 8003bf8:	6179      	str	r1, [r7, #20]
 8003bfa:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	701a      	strb	r2, [r3, #0]
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	09db      	lsrs	r3, r3, #7
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c0c:	d8f0      	bhi.n	8003bf0 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8003c0e:	697b      	ldr	r3, [r7, #20]
 8003c10:	1c5a      	adds	r2, r3, #1
 8003c12:	617a      	str	r2, [r7, #20]
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	b2d2      	uxtb	r2, r2
 8003c18:	701a      	strb	r2, [r3, #0]
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8003c1e:	2218      	movs	r2, #24
 8003c20:	6879      	ldr	r1, [r7, #4]
 8003c22:	68b8      	ldr	r0, [r7, #8]
 8003c24:	f7ff fcac 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d002      	beq.n	8003c3c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8003c36:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8003c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3a:	4798      	blx	r3
  }
}
 8003c3c:	bf00      	nop
 8003c3e:	3730      	adds	r7, #48	; 0x30
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}
 8003c44:	20002aec 	.word	0x20002aec
 8003c48:	20002abc 	.word	0x20002abc

08003c4c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b092      	sub	sp, #72	; 0x48
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8003c54:	f3ef 8311 	mrs	r3, BASEPRI
 8003c58:	f04f 0120 	mov.w	r1, #32
 8003c5c:	f381 8811 	msr	BASEPRI, r1
 8003c60:	617b      	str	r3, [r7, #20]
 8003c62:	486a      	ldr	r0, [pc, #424]	; (8003e0c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8003c64:	f7ff fb9c 	bl	80033a0 <_PreparePacket>
 8003c68:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	647b      	str	r3, [r7, #68]	; 0x44
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	4b66      	ldr	r3, [pc, #408]	; (8003e10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003c78:	691b      	ldr	r3, [r3, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	643b      	str	r3, [r7, #64]	; 0x40
 8003c7e:	e00b      	b.n	8003c98 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8003c80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c82:	b2da      	uxtb	r2, r3
 8003c84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c86:	1c59      	adds	r1, r3, #1
 8003c88:	6479      	str	r1, [r7, #68]	; 0x44
 8003c8a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c94:	09db      	lsrs	r3, r3, #7
 8003c96:	643b      	str	r3, [r7, #64]	; 0x40
 8003c98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c9a:	2b7f      	cmp	r3, #127	; 0x7f
 8003c9c:	d8f0      	bhi.n	8003c80 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8003c9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ca0:	1c5a      	adds	r2, r3, #1
 8003ca2:	647a      	str	r2, [r7, #68]	; 0x44
 8003ca4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ca6:	b2d2      	uxtb	r2, r2
 8003ca8:	701a      	strb	r2, [r3, #0]
 8003caa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003cac:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cb8:	e00b      	b.n	8003cd2 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8003cba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cbc:	b2da      	uxtb	r2, r3
 8003cbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc0:	1c59      	adds	r1, r3, #1
 8003cc2:	63f9      	str	r1, [r7, #60]	; 0x3c
 8003cc4:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003cc8:	b2d2      	uxtb	r2, r2
 8003cca:	701a      	strb	r2, [r3, #0]
 8003ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cce:	09db      	lsrs	r3, r3, #7
 8003cd0:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd4:	2b7f      	cmp	r3, #127	; 0x7f
 8003cd6:	d8f0      	bhi.n	8003cba <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8003cd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cda:	1c5a      	adds	r2, r3, #1
 8003cdc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cde:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ce0:	b2d2      	uxtb	r2, r2
 8003ce2:	701a      	strb	r2, [r3, #0]
 8003ce4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ce6:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2220      	movs	r2, #32
 8003cee:	4619      	mov	r1, r3
 8003cf0:	68f8      	ldr	r0, [r7, #12]
 8003cf2:	f7ff fb09 	bl	8003308 <_EncodeStr>
 8003cf6:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8003cf8:	2209      	movs	r2, #9
 8003cfa:	68f9      	ldr	r1, [r7, #12]
 8003cfc:	6938      	ldr	r0, [r7, #16]
 8003cfe:	f7ff fc3f 	bl	8003580 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	4b40      	ldr	r3, [pc, #256]	; (8003e10 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	1ad3      	subs	r3, r2, r3
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
 8003d16:	e00b      	b.n	8003d30 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8003d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d1a:	b2da      	uxtb	r2, r3
 8003d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d1e:	1c59      	adds	r1, r3, #1
 8003d20:	6379      	str	r1, [r7, #52]	; 0x34
 8003d22:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d26:	b2d2      	uxtb	r2, r2
 8003d28:	701a      	strb	r2, [r3, #0]
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	09db      	lsrs	r3, r3, #7
 8003d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	2b7f      	cmp	r3, #127	; 0x7f
 8003d34:	d8f0      	bhi.n	8003d18 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8003d36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	637a      	str	r2, [r7, #52]	; 0x34
 8003d3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d3e:	b2d2      	uxtb	r2, r2
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d50:	e00b      	b.n	8003d6a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8003d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d54:	b2da      	uxtb	r2, r3
 8003d56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d58:	1c59      	adds	r1, r3, #1
 8003d5a:	62f9      	str	r1, [r7, #44]	; 0x2c
 8003d5c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	701a      	strb	r2, [r3, #0]
 8003d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d66:	09db      	lsrs	r3, r3, #7
 8003d68:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	2b7f      	cmp	r3, #127	; 0x7f
 8003d6e:	d8f0      	bhi.n	8003d52 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8003d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d72:	1c5a      	adds	r2, r3, #1
 8003d74:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d78:	b2d2      	uxtb	r2, r2
 8003d7a:	701a      	strb	r2, [r3, #0]
 8003d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	627b      	str	r3, [r7, #36]	; 0x24
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	e00b      	b.n	8003da4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8003d8c:	6a3b      	ldr	r3, [r7, #32]
 8003d8e:	b2da      	uxtb	r2, r3
 8003d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d92:	1c59      	adds	r1, r3, #1
 8003d94:	6279      	str	r1, [r7, #36]	; 0x24
 8003d96:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003d9a:	b2d2      	uxtb	r2, r2
 8003d9c:	701a      	strb	r2, [r3, #0]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	09db      	lsrs	r3, r3, #7
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	2b7f      	cmp	r3, #127	; 0x7f
 8003da8:	d8f0      	bhi.n	8003d8c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8003daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dac:	1c5a      	adds	r2, r3, #1
 8003dae:	627a      	str	r2, [r7, #36]	; 0x24
 8003db0:	6a3a      	ldr	r2, [r7, #32]
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	61fb      	str	r3, [r7, #28]
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61bb      	str	r3, [r7, #24]
 8003dc2:	e00b      	b.n	8003ddc <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	b2da      	uxtb	r2, r3
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	1c59      	adds	r1, r3, #1
 8003dcc:	61f9      	str	r1, [r7, #28]
 8003dce:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	09db      	lsrs	r3, r3, #7
 8003dda:	61bb      	str	r3, [r7, #24]
 8003ddc:	69bb      	ldr	r3, [r7, #24]
 8003dde:	2b7f      	cmp	r3, #127	; 0x7f
 8003de0:	d8f0      	bhi.n	8003dc4 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8003de2:	69fb      	ldr	r3, [r7, #28]
 8003de4:	1c5a      	adds	r2, r3, #1
 8003de6:	61fa      	str	r2, [r7, #28]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	b2d2      	uxtb	r2, r2
 8003dec:	701a      	strb	r2, [r3, #0]
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8003df2:	2215      	movs	r2, #21
 8003df4:	68f9      	ldr	r1, [r7, #12]
 8003df6:	6938      	ldr	r0, [r7, #16]
 8003df8:	f7ff fbc2 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	f383 8811 	msr	BASEPRI, r3
}
 8003e02:	bf00      	nop
 8003e04:	3748      	adds	r7, #72	; 0x48
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
 8003e0a:	bf00      	nop
 8003e0c:	20002aec 	.word	0x20002aec
 8003e10:	20002abc 	.word	0x20002abc

08003e14 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8003e18:	4b07      	ldr	r3, [pc, #28]	; (8003e38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d008      	beq.n	8003e32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8003e20:	4b05      	ldr	r3, [pc, #20]	; (8003e38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e22:	6a1b      	ldr	r3, [r3, #32]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d003      	beq.n	8003e32 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8003e2a:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	4798      	blx	r3
  }
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20002abc 	.word	0x20002abc

08003e3c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e44:	f3ef 8311 	mrs	r3, BASEPRI
 8003e48:	f04f 0120 	mov.w	r1, #32
 8003e4c:	f381 8811 	msr	BASEPRI, r1
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	480b      	ldr	r0, [pc, #44]	; (8003e80 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 8003e54:	f7ff faa4 	bl	80033a0 <_PreparePacket>
 8003e58:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8003e5a:	2280      	movs	r2, #128	; 0x80
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	6938      	ldr	r0, [r7, #16]
 8003e60:	f7ff fa52 	bl	8003308 <_EncodeStr>
 8003e64:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 8003e66:	220e      	movs	r2, #14
 8003e68:	68f9      	ldr	r1, [r7, #12]
 8003e6a:	6938      	ldr	r0, [r7, #16]
 8003e6c:	f7ff fb88 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003e70:	697b      	ldr	r3, [r7, #20]
 8003e72:	f383 8811 	msr	BASEPRI, r3
}
 8003e76:	bf00      	nop
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	20002aec 	.word	0x20002aec

08003e84 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8003e84:	b590      	push	{r4, r7, lr}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e8c:	6a1b      	ldr	r3, [r3, #32]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d01a      	beq.n	8003ec8 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d015      	beq.n	8003ec8 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8003e9c:	4b10      	ldr	r3, [pc, #64]	; (8003ee0 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8003e9e:	6a1b      	ldr	r3, [r3, #32]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4798      	blx	r3
 8003ea4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003ea8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8003eaa:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003eae:	f04f 0200 	mov.w	r2, #0
 8003eb2:	f04f 0300 	mov.w	r3, #0
 8003eb6:	000a      	movs	r2, r1
 8003eb8:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8003eba:	4613      	mov	r3, r2
 8003ebc:	461a      	mov	r2, r3
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	200d      	movs	r0, #13
 8003ec2:	f7ff fcef 	bl	80038a4 <SEGGER_SYSVIEW_RecordU32x2>
 8003ec6:	e006      	b.n	8003ed6 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8003ec8:	4b06      	ldr	r3, [pc, #24]	; (8003ee4 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	200c      	movs	r0, #12
 8003ed0:	f7ff fcac 	bl	800382c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8003ed4:	bf00      	nop
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd90      	pop	{r4, r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	20002abc 	.word	0x20002abc
 8003ee4:	e0001004 	.word	0xe0001004

08003ee8 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b086      	sub	sp, #24
 8003eec:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8003eee:	f3ef 8311 	mrs	r3, BASEPRI
 8003ef2:	f04f 0120 	mov.w	r1, #32
 8003ef6:	f381 8811 	msr	BASEPRI, r1
 8003efa:	60fb      	str	r3, [r7, #12]
 8003efc:	4819      	ldr	r0, [pc, #100]	; (8003f64 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8003efe:	f7ff fa4f 	bl	80033a0 <_PreparePacket>
 8003f02:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8003f08:	4b17      	ldr	r3, [pc, #92]	; (8003f68 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f10:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	613b      	str	r3, [r7, #16]
 8003f1a:	e00b      	b.n	8003f34 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	b2da      	uxtb	r2, r3
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	1c59      	adds	r1, r3, #1
 8003f24:	6179      	str	r1, [r7, #20]
 8003f26:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8003f2a:	b2d2      	uxtb	r2, r2
 8003f2c:	701a      	strb	r2, [r3, #0]
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	09db      	lsrs	r3, r3, #7
 8003f32:	613b      	str	r3, [r7, #16]
 8003f34:	693b      	ldr	r3, [r7, #16]
 8003f36:	2b7f      	cmp	r3, #127	; 0x7f
 8003f38:	d8f0      	bhi.n	8003f1c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	617a      	str	r2, [r7, #20]
 8003f40:	693a      	ldr	r2, [r7, #16]
 8003f42:	b2d2      	uxtb	r2, r2
 8003f44:	701a      	strb	r2, [r3, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8003f4a:	2202      	movs	r2, #2
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	68b8      	ldr	r0, [r7, #8]
 8003f50:	f7ff fb16 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f383 8811 	msr	BASEPRI, r3
}
 8003f5a:	bf00      	nop
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	20002aec 	.word	0x20002aec
 8003f68:	e000ed04 	.word	0xe000ed04

08003f6c <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003f72:	f3ef 8311 	mrs	r3, BASEPRI
 8003f76:	f04f 0120 	mov.w	r1, #32
 8003f7a:	f381 8811 	msr	BASEPRI, r1
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	4807      	ldr	r0, [pc, #28]	; (8003fa0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8003f82:	f7ff fa0d 	bl	80033a0 <_PreparePacket>
 8003f86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8003f88:	2203      	movs	r2, #3
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	6838      	ldr	r0, [r7, #0]
 8003f8e:	f7ff faf7 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	f383 8811 	msr	BASEPRI, r3
}
 8003f98:	bf00      	nop
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20002aec 	.word	0x20002aec

08003fa4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003faa:	f3ef 8311 	mrs	r3, BASEPRI
 8003fae:	f04f 0120 	mov.w	r1, #32
 8003fb2:	f381 8811 	msr	BASEPRI, r1
 8003fb6:	607b      	str	r3, [r7, #4]
 8003fb8:	4807      	ldr	r0, [pc, #28]	; (8003fd8 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8003fba:	f7ff f9f1 	bl	80033a0 <_PreparePacket>
 8003fbe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8003fc0:	2212      	movs	r2, #18
 8003fc2:	6839      	ldr	r1, [r7, #0]
 8003fc4:	6838      	ldr	r0, [r7, #0]
 8003fc6:	f7ff fadb 	bl	8003580 <_SendPacket>
  RECORD_END();
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	f383 8811 	msr	BASEPRI, r3
}
 8003fd0:	bf00      	nop
 8003fd2:	3708      	adds	r7, #8
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	bd80      	pop	{r7, pc}
 8003fd8:	20002aec 	.word	0x20002aec

08003fdc <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b082      	sub	sp, #8
 8003fe0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8003fe2:	f3ef 8311 	mrs	r3, BASEPRI
 8003fe6:	f04f 0120 	mov.w	r1, #32
 8003fea:	f381 8811 	msr	BASEPRI, r1
 8003fee:	607b      	str	r3, [r7, #4]
 8003ff0:	4807      	ldr	r0, [pc, #28]	; (8004010 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8003ff2:	f7ff f9d5 	bl	80033a0 <_PreparePacket>
 8003ff6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8003ff8:	2211      	movs	r2, #17
 8003ffa:	6839      	ldr	r1, [r7, #0]
 8003ffc:	6838      	ldr	r0, [r7, #0]
 8003ffe:	f7ff fabf 	bl	8003580 <_SendPacket>
  RECORD_END();
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f383 8811 	msr	BASEPRI, r3
}
 8004008:	bf00      	nop
 800400a:	3708      	adds	r7, #8
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}
 8004010:	20002aec 	.word	0x20002aec

08004014 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800401c:	f3ef 8311 	mrs	r3, BASEPRI
 8004020:	f04f 0120 	mov.w	r1, #32
 8004024:	f381 8811 	msr	BASEPRI, r1
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	4819      	ldr	r0, [pc, #100]	; (8004090 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800402c:	f7ff f9b8 	bl	80033a0 <_PreparePacket>
 8004030:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8004036:	4b17      	ldr	r3, [pc, #92]	; (8004094 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8004038:	691b      	ldr	r3, [r3, #16]
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	61fb      	str	r3, [r7, #28]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	61bb      	str	r3, [r7, #24]
 8004048:	e00b      	b.n	8004062 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	69fb      	ldr	r3, [r7, #28]
 8004050:	1c59      	adds	r1, r3, #1
 8004052:	61f9      	str	r1, [r7, #28]
 8004054:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	09db      	lsrs	r3, r3, #7
 8004060:	61bb      	str	r3, [r7, #24]
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b7f      	cmp	r3, #127	; 0x7f
 8004066:	d8f0      	bhi.n	800404a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	1c5a      	adds	r2, r3, #1
 800406c:	61fa      	str	r2, [r7, #28]
 800406e:	69ba      	ldr	r2, [r7, #24]
 8004070:	b2d2      	uxtb	r2, r2
 8004072:	701a      	strb	r2, [r3, #0]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8004078:	2208      	movs	r2, #8
 800407a:	68f9      	ldr	r1, [r7, #12]
 800407c:	6938      	ldr	r0, [r7, #16]
 800407e:	f7ff fa7f 	bl	8003580 <_SendPacket>
  RECORD_END();
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f383 8811 	msr	BASEPRI, r3
}
 8004088:	bf00      	nop
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}
 8004090:	20002aec 	.word	0x20002aec
 8004094:	20002abc 	.word	0x20002abc

08004098 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8004098:	b580      	push	{r7, lr}
 800409a:	b088      	sub	sp, #32
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80040a0:	f3ef 8311 	mrs	r3, BASEPRI
 80040a4:	f04f 0120 	mov.w	r1, #32
 80040a8:	f381 8811 	msr	BASEPRI, r1
 80040ac:	617b      	str	r3, [r7, #20]
 80040ae:	4819      	ldr	r0, [pc, #100]	; (8004114 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 80040b0:	f7ff f976 	bl	80033a0 <_PreparePacket>
 80040b4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80040b6:	693b      	ldr	r3, [r7, #16]
 80040b8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	e00b      	b.n	80040e6 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 80040ce:	69bb      	ldr	r3, [r7, #24]
 80040d0:	b2da      	uxtb	r2, r3
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	1c59      	adds	r1, r3, #1
 80040d6:	61f9      	str	r1, [r7, #28]
 80040d8:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80040dc:	b2d2      	uxtb	r2, r2
 80040de:	701a      	strb	r2, [r3, #0]
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	09db      	lsrs	r3, r3, #7
 80040e4:	61bb      	str	r3, [r7, #24]
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b7f      	cmp	r3, #127	; 0x7f
 80040ea:	d8f0      	bhi.n	80040ce <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 80040ec:	69fb      	ldr	r3, [r7, #28]
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	61fa      	str	r2, [r7, #28]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
 80040f8:	69fb      	ldr	r3, [r7, #28]
 80040fa:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 80040fc:	2204      	movs	r2, #4
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	6938      	ldr	r0, [r7, #16]
 8004102:	f7ff fa3d 	bl	8003580 <_SendPacket>
  RECORD_END();
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	f383 8811 	msr	BASEPRI, r3
}
 800410c:	bf00      	nop
 800410e:	3720      	adds	r7, #32
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}
 8004114:	20002aec 	.word	0x20002aec
 8004118:	20002abc 	.word	0x20002abc

0800411c <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800411c:	b580      	push	{r7, lr}
 800411e:	b088      	sub	sp, #32
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004124:	f3ef 8311 	mrs	r3, BASEPRI
 8004128:	f04f 0120 	mov.w	r1, #32
 800412c:	f381 8811 	msr	BASEPRI, r1
 8004130:	617b      	str	r3, [r7, #20]
 8004132:	4819      	ldr	r0, [pc, #100]	; (8004198 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8004134:	f7ff f934 	bl	80033a0 <_PreparePacket>
 8004138:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800413e:	4b17      	ldr	r3, [pc, #92]	; (800419c <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	1ad3      	subs	r3, r2, r3
 8004146:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	61fb      	str	r3, [r7, #28]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	61bb      	str	r3, [r7, #24]
 8004150:	e00b      	b.n	800416a <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	1c59      	adds	r1, r3, #1
 800415a:	61f9      	str	r1, [r7, #28]
 800415c:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004160:	b2d2      	uxtb	r2, r2
 8004162:	701a      	strb	r2, [r3, #0]
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	09db      	lsrs	r3, r3, #7
 8004168:	61bb      	str	r3, [r7, #24]
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	2b7f      	cmp	r3, #127	; 0x7f
 800416e:	d8f0      	bhi.n	8004152 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8004170:	69fb      	ldr	r3, [r7, #28]
 8004172:	1c5a      	adds	r2, r3, #1
 8004174:	61fa      	str	r2, [r7, #28]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
 800417c:	69fb      	ldr	r3, [r7, #28]
 800417e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8004180:	2206      	movs	r2, #6
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	6938      	ldr	r0, [r7, #16]
 8004186:	f7ff f9fb 	bl	8003580 <_SendPacket>
  RECORD_END();
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f383 8811 	msr	BASEPRI, r3
}
 8004190:	bf00      	nop
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	20002aec 	.word	0x20002aec
 800419c:	20002abc 	.word	0x20002abc

080041a0 <SEGGER_SYSVIEW_OnTaskStopReady>:
*
*  Parameters
*    TaskId - Task ID of task that completed execution.
*    Cause  - Reason for task to stop (i.e. Idle/Sleep)
*/
void SEGGER_SYSVIEW_OnTaskStopReady(U32 TaskId, unsigned int Cause) {
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b08a      	sub	sp, #40	; 0x28
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80041aa:	f3ef 8311 	mrs	r3, BASEPRI
 80041ae:	f04f 0120 	mov.w	r1, #32
 80041b2:	f381 8811 	msr	BASEPRI, r1
 80041b6:	617b      	str	r3, [r7, #20]
 80041b8:	4827      	ldr	r0, [pc, #156]	; (8004258 <SEGGER_SYSVIEW_OnTaskStopReady+0xb8>)
 80041ba:	f7ff f8f1 	bl	80033a0 <_PreparePacket>
 80041be:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <SEGGER_SYSVIEW_OnTaskStopReady+0xbc>)
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	1ad3      	subs	r3, r2, r3
 80041cc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	627b      	str	r3, [r7, #36]	; 0x24
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	e00b      	b.n	80041f0 <SEGGER_SYSVIEW_OnTaskStopReady+0x50>
 80041d8:	6a3b      	ldr	r3, [r7, #32]
 80041da:	b2da      	uxtb	r2, r3
 80041dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041de:	1c59      	adds	r1, r3, #1
 80041e0:	6279      	str	r1, [r7, #36]	; 0x24
 80041e2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80041e6:	b2d2      	uxtb	r2, r2
 80041e8:	701a      	strb	r2, [r3, #0]
 80041ea:	6a3b      	ldr	r3, [r7, #32]
 80041ec:	09db      	lsrs	r3, r3, #7
 80041ee:	623b      	str	r3, [r7, #32]
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	2b7f      	cmp	r3, #127	; 0x7f
 80041f4:	d8f0      	bhi.n	80041d8 <SEGGER_SYSVIEW_OnTaskStopReady+0x38>
 80041f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f8:	1c5a      	adds	r2, r3, #1
 80041fa:	627a      	str	r2, [r7, #36]	; 0x24
 80041fc:	6a3a      	ldr	r2, [r7, #32]
 80041fe:	b2d2      	uxtb	r2, r2
 8004200:	701a      	strb	r2, [r3, #0]
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Cause);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	61fb      	str	r3, [r7, #28]
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	61bb      	str	r3, [r7, #24]
 800420e:	e00b      	b.n	8004228 <SEGGER_SYSVIEW_OnTaskStopReady+0x88>
 8004210:	69bb      	ldr	r3, [r7, #24]
 8004212:	b2da      	uxtb	r2, r3
 8004214:	69fb      	ldr	r3, [r7, #28]
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	61f9      	str	r1, [r7, #28]
 800421a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	701a      	strb	r2, [r3, #0]
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	09db      	lsrs	r3, r3, #7
 8004226:	61bb      	str	r3, [r7, #24]
 8004228:	69bb      	ldr	r3, [r7, #24]
 800422a:	2b7f      	cmp	r3, #127	; 0x7f
 800422c:	d8f0      	bhi.n	8004210 <SEGGER_SYSVIEW_OnTaskStopReady+0x70>
 800422e:	69fb      	ldr	r3, [r7, #28]
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	61fa      	str	r2, [r7, #28]
 8004234:	69ba      	ldr	r2, [r7, #24]
 8004236:	b2d2      	uxtb	r2, r2
 8004238:	701a      	strb	r2, [r3, #0]
 800423a:	69fb      	ldr	r3, [r7, #28]
 800423c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_STOP_READY);
 800423e:	2207      	movs	r2, #7
 8004240:	68f9      	ldr	r1, [r7, #12]
 8004242:	6938      	ldr	r0, [r7, #16]
 8004244:	f7ff f99c 	bl	8003580 <_SendPacket>
  RECORD_END();
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f383 8811 	msr	BASEPRI, r3
}
 800424e:	bf00      	nop
 8004250:	3728      	adds	r7, #40	; 0x28
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}
 8004256:	bf00      	nop
 8004258:	20002aec 	.word	0x20002aec
 800425c:	20002abc 	.word	0x20002abc

08004260 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8004260:	b580      	push	{r7, lr}
 8004262:	b08c      	sub	sp, #48	; 0x30
 8004264:	af00      	add	r7, sp, #0
 8004266:	4603      	mov	r3, r0
 8004268:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800426a:	4b3b      	ldr	r3, [pc, #236]	; (8004358 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d06d      	beq.n	800434e <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8004272:	4b39      	ldr	r3, [pc, #228]	; (8004358 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (n = 0; n < ModuleId; n++) {
 8004278:	2300      	movs	r3, #0
 800427a:	62bb      	str	r3, [r7, #40]	; 0x28
 800427c:	e008      	b.n	8004290 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800427e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (pModule == 0) {
 8004284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004286:	2b00      	cmp	r3, #0
 8004288:	d007      	beq.n	800429a <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	3301      	adds	r3, #1
 800428e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004290:	79fb      	ldrb	r3, [r7, #7]
 8004292:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004294:	429a      	cmp	r2, r3
 8004296:	d3f2      	bcc.n	800427e <SEGGER_SYSVIEW_SendModule+0x1e>
 8004298:	e000      	b.n	800429c <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800429a:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800429c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d055      	beq.n	800434e <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80042a2:	f3ef 8311 	mrs	r3, BASEPRI
 80042a6:	f04f 0120 	mov.w	r1, #32
 80042aa:	f381 8811 	msr	BASEPRI, r1
 80042ae:	617b      	str	r3, [r7, #20]
 80042b0:	482a      	ldr	r0, [pc, #168]	; (800435c <SEGGER_SYSVIEW_SendModule+0xfc>)
 80042b2:	f7ff f875 	bl	80033a0 <_PreparePacket>
 80042b6:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
 80042c0:	79fb      	ldrb	r3, [r7, #7]
 80042c2:	623b      	str	r3, [r7, #32]
 80042c4:	e00b      	b.n	80042de <SEGGER_SYSVIEW_SendModule+0x7e>
 80042c6:	6a3b      	ldr	r3, [r7, #32]
 80042c8:	b2da      	uxtb	r2, r3
 80042ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042cc:	1c59      	adds	r1, r3, #1
 80042ce:	6279      	str	r1, [r7, #36]	; 0x24
 80042d0:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80042d4:	b2d2      	uxtb	r2, r2
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	6a3b      	ldr	r3, [r7, #32]
 80042da:	09db      	lsrs	r3, r3, #7
 80042dc:	623b      	str	r3, [r7, #32]
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	2b7f      	cmp	r3, #127	; 0x7f
 80042e2:	d8f0      	bhi.n	80042c6 <SEGGER_SYSVIEW_SendModule+0x66>
 80042e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e6:	1c5a      	adds	r2, r3, #1
 80042e8:	627a      	str	r2, [r7, #36]	; 0x24
 80042ea:	6a3a      	ldr	r2, [r7, #32]
 80042ec:	b2d2      	uxtb	r2, r2
 80042ee:	701a      	strb	r2, [r3, #0]
 80042f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f2:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	61fb      	str	r3, [r7, #28]
 80042f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	e00b      	b.n	8004318 <SEGGER_SYSVIEW_SendModule+0xb8>
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	b2da      	uxtb	r2, r3
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	1c59      	adds	r1, r3, #1
 8004308:	61f9      	str	r1, [r7, #28]
 800430a:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800430e:	b2d2      	uxtb	r2, r2
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	09db      	lsrs	r3, r3, #7
 8004316:	61bb      	str	r3, [r7, #24]
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	2b7f      	cmp	r3, #127	; 0x7f
 800431c:	d8f0      	bhi.n	8004300 <SEGGER_SYSVIEW_SendModule+0xa0>
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	1c5a      	adds	r2, r3, #1
 8004322:	61fa      	str	r2, [r7, #28]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	b2d2      	uxtb	r2, r2
 8004328:	701a      	strb	r2, [r3, #0]
 800432a:	69fb      	ldr	r3, [r7, #28]
 800432c:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800432e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	4619      	mov	r1, r3
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7fe ffe6 	bl	8003308 <_EncodeStr>
 800433c:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800433e:	2216      	movs	r2, #22
 8004340:	68f9      	ldr	r1, [r7, #12]
 8004342:	6938      	ldr	r0, [r7, #16]
 8004344:	f7ff f91c 	bl	8003580 <_SendPacket>
      RECORD_END();
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 800434e:	bf00      	nop
 8004350:	3730      	adds	r7, #48	; 0x30
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20002ae4 	.word	0x20002ae4
 800435c:	20002aec 	.word	0x20002aec

08004360 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8004366:	4b0c      	ldr	r3, [pc, #48]	; (8004398 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00f      	beq.n	800438e <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800436e:	4b0a      	ldr	r3, [pc, #40]	; (8004398 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	68db      	ldr	r3, [r3, #12]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d002      	beq.n	8004382 <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d1f2      	bne.n	8004374 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800438e:	bf00      	nop
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	20002ae4 	.word	0x20002ae4

0800439c <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 80043a2:	f3ef 8311 	mrs	r3, BASEPRI
 80043a6:	f04f 0120 	mov.w	r1, #32
 80043aa:	f381 8811 	msr	BASEPRI, r1
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	4817      	ldr	r0, [pc, #92]	; (8004410 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80043b2:	f7fe fff5 	bl	80033a0 <_PreparePacket>
 80043b6:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	617b      	str	r3, [r7, #20]
 80043c0:	4b14      	ldr	r3, [pc, #80]	; (8004414 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e00b      	b.n	80043e0 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	b2da      	uxtb	r2, r3
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	1c59      	adds	r1, r3, #1
 80043d0:	6179      	str	r1, [r7, #20]
 80043d2:	f062 027f 	orn	r2, r2, #127	; 0x7f
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	701a      	strb	r2, [r3, #0]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	09db      	lsrs	r3, r3, #7
 80043de:	613b      	str	r3, [r7, #16]
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	2b7f      	cmp	r3, #127	; 0x7f
 80043e4:	d8f0      	bhi.n	80043c8 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	1c5a      	adds	r2, r3, #1
 80043ea:	617a      	str	r2, [r7, #20]
 80043ec:	693a      	ldr	r2, [r7, #16]
 80043ee:	b2d2      	uxtb	r2, r2
 80043f0:	701a      	strb	r2, [r3, #0]
 80043f2:	697b      	ldr	r3, [r7, #20]
 80043f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80043f6:	221b      	movs	r2, #27
 80043f8:	6879      	ldr	r1, [r7, #4]
 80043fa:	68b8      	ldr	r0, [r7, #8]
 80043fc:	f7ff f8c0 	bl	8003580 <_SendPacket>
  RECORD_END();
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f383 8811 	msr	BASEPRI, r3
}
 8004406:	bf00      	nop
 8004408:	3718      	adds	r7, #24
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
 800440e:	bf00      	nop
 8004410:	20002aec 	.word	0x20002aec
 8004414:	20002ae8 	.word	0x20002ae8

08004418 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8004418:	b580      	push	{r7, lr}
 800441a:	b08a      	sub	sp, #40	; 0x28
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004420:	f3ef 8311 	mrs	r3, BASEPRI
 8004424:	f04f 0120 	mov.w	r1, #32
 8004428:	f381 8811 	msr	BASEPRI, r1
 800442c:	617b      	str	r3, [r7, #20]
 800442e:	4827      	ldr	r0, [pc, #156]	; (80044cc <SEGGER_SYSVIEW_Warn+0xb4>)
 8004430:	f7fe ffb6 	bl	80033a0 <_PreparePacket>
 8004434:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8004436:	2280      	movs	r2, #128	; 0x80
 8004438:	6879      	ldr	r1, [r7, #4]
 800443a:	6938      	ldr	r0, [r7, #16]
 800443c:	f7fe ff64 	bl	8003308 <_EncodeStr>
 8004440:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	627b      	str	r3, [r7, #36]	; 0x24
 8004446:	2301      	movs	r3, #1
 8004448:	623b      	str	r3, [r7, #32]
 800444a:	e00b      	b.n	8004464 <SEGGER_SYSVIEW_Warn+0x4c>
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	1c59      	adds	r1, r3, #1
 8004454:	6279      	str	r1, [r7, #36]	; 0x24
 8004456:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	701a      	strb	r2, [r3, #0]
 800445e:	6a3b      	ldr	r3, [r7, #32]
 8004460:	09db      	lsrs	r3, r3, #7
 8004462:	623b      	str	r3, [r7, #32]
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	2b7f      	cmp	r3, #127	; 0x7f
 8004468:	d8f0      	bhi.n	800444c <SEGGER_SYSVIEW_Warn+0x34>
 800446a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446c:	1c5a      	adds	r2, r3, #1
 800446e:	627a      	str	r2, [r7, #36]	; 0x24
 8004470:	6a3a      	ldr	r2, [r7, #32]
 8004472:	b2d2      	uxtb	r2, r2
 8004474:	701a      	strb	r2, [r3, #0]
 8004476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004478:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	2300      	movs	r3, #0
 8004480:	61bb      	str	r3, [r7, #24]
 8004482:	e00b      	b.n	800449c <SEGGER_SYSVIEW_Warn+0x84>
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	b2da      	uxtb	r2, r3
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	1c59      	adds	r1, r3, #1
 800448c:	61f9      	str	r1, [r7, #28]
 800448e:	f062 027f 	orn	r2, r2, #127	; 0x7f
 8004492:	b2d2      	uxtb	r2, r2
 8004494:	701a      	strb	r2, [r3, #0]
 8004496:	69bb      	ldr	r3, [r7, #24]
 8004498:	09db      	lsrs	r3, r3, #7
 800449a:	61bb      	str	r3, [r7, #24]
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2b7f      	cmp	r3, #127	; 0x7f
 80044a0:	d8f0      	bhi.n	8004484 <SEGGER_SYSVIEW_Warn+0x6c>
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	1c5a      	adds	r2, r3, #1
 80044a6:	61fa      	str	r2, [r7, #28]
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80044b2:	221a      	movs	r2, #26
 80044b4:	68f9      	ldr	r1, [r7, #12]
 80044b6:	6938      	ldr	r0, [r7, #16]
 80044b8:	f7ff f862 	bl	8003580 <_SendPacket>
  RECORD_END();
 80044bc:	697b      	ldr	r3, [r7, #20]
 80044be:	f383 8811 	msr	BASEPRI, r3
}
 80044c2:	bf00      	nop
 80044c4:	3728      	adds	r7, #40	; 0x28
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	20002aec 	.word	0x20002aec

080044d0 <__libc_init_array>:
 80044d0:	b570      	push	{r4, r5, r6, lr}
 80044d2:	2600      	movs	r6, #0
 80044d4:	4d0c      	ldr	r5, [pc, #48]	; (8004508 <__libc_init_array+0x38>)
 80044d6:	4c0d      	ldr	r4, [pc, #52]	; (800450c <__libc_init_array+0x3c>)
 80044d8:	1b64      	subs	r4, r4, r5
 80044da:	10a4      	asrs	r4, r4, #2
 80044dc:	42a6      	cmp	r6, r4
 80044de:	d109      	bne.n	80044f4 <__libc_init_array+0x24>
 80044e0:	f000 f840 	bl	8004564 <_init>
 80044e4:	2600      	movs	r6, #0
 80044e6:	4d0a      	ldr	r5, [pc, #40]	; (8004510 <__libc_init_array+0x40>)
 80044e8:	4c0a      	ldr	r4, [pc, #40]	; (8004514 <__libc_init_array+0x44>)
 80044ea:	1b64      	subs	r4, r4, r5
 80044ec:	10a4      	asrs	r4, r4, #2
 80044ee:	42a6      	cmp	r6, r4
 80044f0:	d105      	bne.n	80044fe <__libc_init_array+0x2e>
 80044f2:	bd70      	pop	{r4, r5, r6, pc}
 80044f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80044f8:	4798      	blx	r3
 80044fa:	3601      	adds	r6, #1
 80044fc:	e7ee      	b.n	80044dc <__libc_init_array+0xc>
 80044fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004502:	4798      	blx	r3
 8004504:	3601      	adds	r6, #1
 8004506:	e7f2      	b.n	80044ee <__libc_init_array+0x1e>
 8004508:	080046b4 	.word	0x080046b4
 800450c:	080046b4 	.word	0x080046b4
 8004510:	080046b4 	.word	0x080046b4
 8004514:	080046b8 	.word	0x080046b8

08004518 <memcmp>:
 8004518:	b510      	push	{r4, lr}
 800451a:	3901      	subs	r1, #1
 800451c:	4402      	add	r2, r0
 800451e:	4290      	cmp	r0, r2
 8004520:	d101      	bne.n	8004526 <memcmp+0xe>
 8004522:	2000      	movs	r0, #0
 8004524:	e005      	b.n	8004532 <memcmp+0x1a>
 8004526:	7803      	ldrb	r3, [r0, #0]
 8004528:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800452c:	42a3      	cmp	r3, r4
 800452e:	d001      	beq.n	8004534 <memcmp+0x1c>
 8004530:	1b18      	subs	r0, r3, r4
 8004532:	bd10      	pop	{r4, pc}
 8004534:	3001      	adds	r0, #1
 8004536:	e7f2      	b.n	800451e <memcmp+0x6>

08004538 <memcpy>:
 8004538:	440a      	add	r2, r1
 800453a:	4291      	cmp	r1, r2
 800453c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004540:	d100      	bne.n	8004544 <memcpy+0xc>
 8004542:	4770      	bx	lr
 8004544:	b510      	push	{r4, lr}
 8004546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800454a:	4291      	cmp	r1, r2
 800454c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004550:	d1f9      	bne.n	8004546 <memcpy+0xe>
 8004552:	bd10      	pop	{r4, pc}

08004554 <memset>:
 8004554:	4603      	mov	r3, r0
 8004556:	4402      	add	r2, r0
 8004558:	4293      	cmp	r3, r2
 800455a:	d100      	bne.n	800455e <memset+0xa>
 800455c:	4770      	bx	lr
 800455e:	f803 1b01 	strb.w	r1, [r3], #1
 8004562:	e7f9      	b.n	8004558 <memset+0x4>

08004564 <_init>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr

08004570 <_fini>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr
