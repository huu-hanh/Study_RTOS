
queue_f1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f44  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005054  08005054  00015054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080050d0  080050d0  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  080050d0  080050d0  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  080050d0  080050d0  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080050d0  080050d0  000150d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080050d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016ec  20000078  08005150  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001764  08005150  00021764  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011011  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002957  00000000  00000000  000310b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00033a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ef0  00000000  00000000  00034a08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000194aa  00000000  00000000  000358f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000121e3  00000000  00000000  0004eda2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092b0e  00000000  00000000  00060f85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3a93  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045ec  00000000  00000000  000f3ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000078 	.word	0x20000078
 800012c:	00000000 	.word	0x00000000
 8000130:	0800503c 	.word	0x0800503c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000007c 	.word	0x2000007c
 800014c:	0800503c 	.word	0x0800503c

08000150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000150:	b580      	push	{r7, lr}
 8000152:	b086      	sub	sp, #24
 8000154:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000156:	f000 fc41 	bl	80009dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800015a:	f000 f855 	bl	8000208 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800015e:	f000 f917 	bl	8000390 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000162:	f000 f8c1 	bl	80002e8 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000166:	f000 f8e9 	bl	800033c <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 800016a:	f000 f893 	bl	8000294 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(receiver_handle, "Task_receive", 200, NULL, 1, &receiver_handler);
 800016e:	4b1e      	ldr	r3, [pc, #120]	; (80001e8 <main+0x98>)
 8000170:	9301      	str	r3, [sp, #4]
 8000172:	2301      	movs	r3, #1
 8000174:	9300      	str	r3, [sp, #0]
 8000176:	2300      	movs	r3, #0
 8000178:	22c8      	movs	r2, #200	; 0xc8
 800017a:	491c      	ldr	r1, [pc, #112]	; (80001ec <main+0x9c>)
 800017c:	481c      	ldr	r0, [pc, #112]	; (80001f0 <main+0xa0>)
 800017e:	f003 f8c9 	bl	8003314 <xTaskCreate>
 8000182:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000184:	68fb      	ldr	r3, [r7, #12]
 8000186:	2b01      	cmp	r3, #1
 8000188:	d00a      	beq.n	80001a0 <main+0x50>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 800018a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800018e:	f383 8811 	msr	BASEPRI, r3
 8000192:	f3bf 8f6f 	isb	sy
 8000196:	f3bf 8f4f 	dsb	sy
 800019a:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800019c:	bf00      	nop
 800019e:	e7fe      	b.n	800019e <main+0x4e>

  myQueue = xQueueCreate(10, sizeof(item1));
 80001a0:	2200      	movs	r2, #0
 80001a2:	2132      	movs	r1, #50	; 0x32
 80001a4:	200a      	movs	r0, #10
 80001a6:	f002 fce3 	bl	8002b70 <xQueueGenericCreate>
 80001aa:	4603      	mov	r3, r0
 80001ac:	4a11      	ldr	r2, [pc, #68]	; (80001f4 <main+0xa4>)
 80001ae:	6013      	str	r3, [r2, #0]
  configASSERT(myQueue != NULL);
 80001b0:	4b10      	ldr	r3, [pc, #64]	; (80001f4 <main+0xa4>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d10a      	bne.n	80001ce <main+0x7e>
        __asm volatile
 80001b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80001bc:	f383 8811 	msr	BASEPRI, r3
 80001c0:	f3bf 8f6f 	isb	sy
 80001c4:	f3bf 8f4f 	dsb	sy
 80001c8:	607b      	str	r3, [r7, #4]
    }
 80001ca:	bf00      	nop
 80001cc:	e7fe      	b.n	80001cc <main+0x7c>

  HAL_UART_Receive_IT(&huart3, &data3, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	4909      	ldr	r1, [pc, #36]	; (80001f8 <main+0xa8>)
 80001d2:	480a      	ldr	r0, [pc, #40]	; (80001fc <main+0xac>)
 80001d4:	f001 febf 	bl	8001f56 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart1, &data1, 1);
 80001d8:	2201      	movs	r2, #1
 80001da:	4909      	ldr	r1, [pc, #36]	; (8000200 <main+0xb0>)
 80001dc:	4809      	ldr	r0, [pc, #36]	; (8000204 <main+0xb4>)
 80001de:	f001 feba 	bl	8001f56 <HAL_UART_Receive_IT>

  vTaskStartScheduler();
 80001e2:	f003 f9d1 	bl	8003588 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001e6:	e7fe      	b.n	80001e6 <main+0x96>
 80001e8:	2000016c 	.word	0x2000016c
 80001ec:	08005054 	.word	0x08005054
 80001f0:	08000441 	.word	0x08000441
 80001f4:	20000170 	.word	0x20000170
 80001f8:	2000020f 	.word	0x2000020f
 80001fc:	20000124 	.word	0x20000124
 8000200:	2000020e 	.word	0x2000020e
 8000204:	20000094 	.word	0x20000094

08000208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	b090      	sub	sp, #64	; 0x40
 800020c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800020e:	f107 0318 	add.w	r3, r7, #24
 8000212:	2228      	movs	r2, #40	; 0x28
 8000214:	2100      	movs	r1, #0
 8000216:	4618      	mov	r0, r3
 8000218:	f004 fa9c 	bl	8004754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2200      	movs	r2, #0
 8000220:	601a      	str	r2, [r3, #0]
 8000222:	605a      	str	r2, [r3, #4]
 8000224:	609a      	str	r2, [r3, #8]
 8000226:	60da      	str	r2, [r3, #12]
 8000228:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800022a:	2301      	movs	r3, #1
 800022c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800022e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000232:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000234:	2300      	movs	r3, #0
 8000236:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000238:	2301      	movs	r3, #1
 800023a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800023c:	2302      	movs	r3, #2
 800023e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000240:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000244:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000246:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800024a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	4618      	mov	r0, r3
 8000252:	f000 ff23 	bl	800109c <HAL_RCC_OscConfig>
 8000256:	4603      	mov	r3, r0
 8000258:	2b00      	cmp	r3, #0
 800025a:	d001      	beq.n	8000260 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800025c:	f000 f9a5 	bl	80005aa <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000260:	230f      	movs	r3, #15
 8000262:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000264:	2302      	movs	r3, #2
 8000266:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000268:	2300      	movs	r3, #0
 800026a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800026c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000270:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000272:	2300      	movs	r3, #0
 8000274:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	2102      	movs	r1, #2
 800027a:	4618      	mov	r0, r3
 800027c:	f001 f990 	bl	80015a0 <HAL_RCC_ClockConfig>
 8000280:	4603      	mov	r3, r0
 8000282:	2b00      	cmp	r3, #0
 8000284:	d001      	beq.n	800028a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000286:	f000 f990 	bl	80005aa <Error_Handler>
  }
}
 800028a:	bf00      	nop
 800028c:	3740      	adds	r7, #64	; 0x40
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
	...

08000294 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000298:	4b11      	ldr	r3, [pc, #68]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 800029a:	4a12      	ldr	r2, [pc, #72]	; (80002e4 <MX_USART1_UART_Init+0x50>)
 800029c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800029e:	4b10      	ldr	r3, [pc, #64]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80002a6:	4b0e      	ldr	r3, [pc, #56]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80002b2:	4b0b      	ldr	r3, [pc, #44]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002b4:	2200      	movs	r2, #0
 80002b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002ba:	220c      	movs	r2, #12
 80002bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002be:	4b08      	ldr	r3, [pc, #32]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002c0:	2200      	movs	r2, #0
 80002c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80002ca:	4805      	ldr	r0, [pc, #20]	; (80002e0 <MX_USART1_UART_Init+0x4c>)
 80002cc:	f001 fd70 	bl	8001db0 <HAL_UART_Init>
 80002d0:	4603      	mov	r3, r0
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d001      	beq.n	80002da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80002d6:	f000 f968 	bl	80005aa <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80002da:	bf00      	nop
 80002dc:	bd80      	pop	{r7, pc}
 80002de:	bf00      	nop
 80002e0:	20000094 	.word	0x20000094
 80002e4:	40013800 	.word	0x40013800

080002e8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002ec:	4b11      	ldr	r3, [pc, #68]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002ee:	4a12      	ldr	r2, [pc, #72]	; (8000338 <MX_USART2_UART_Init+0x50>)
 80002f0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 80002f2:	4b10      	ldr	r3, [pc, #64]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002f4:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 80002f8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002fa:	4b0e      	ldr	r3, [pc, #56]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000302:	2200      	movs	r2, #0
 8000304:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000306:	4b0b      	ldr	r3, [pc, #44]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000308:	2200      	movs	r2, #0
 800030a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800030c:	4b09      	ldr	r3, [pc, #36]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800030e:	220c      	movs	r2, #12
 8000310:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000312:	4b08      	ldr	r3, [pc, #32]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000314:	2200      	movs	r2, #0
 8000316:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000318:	4b06      	ldr	r3, [pc, #24]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 800031a:	2200      	movs	r2, #0
 800031c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800031e:	4805      	ldr	r0, [pc, #20]	; (8000334 <MX_USART2_UART_Init+0x4c>)
 8000320:	f001 fd46 	bl	8001db0 <HAL_UART_Init>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d001      	beq.n	800032e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800032a:	f000 f93e 	bl	80005aa <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800032e:	bf00      	nop
 8000330:	bd80      	pop	{r7, pc}
 8000332:	bf00      	nop
 8000334:	200000dc 	.word	0x200000dc
 8000338:	40004400 	.word	0x40004400

0800033c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800033c:	b580      	push	{r7, lr}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000340:	4b11      	ldr	r3, [pc, #68]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 8000342:	4a12      	ldr	r2, [pc, #72]	; (800038c <MX_USART3_UART_Init+0x50>)
 8000344:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 8000348:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800034c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800034e:	4b0e      	ldr	r3, [pc, #56]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 8000350:	2200      	movs	r2, #0
 8000352:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 8000356:	2200      	movs	r2, #0
 8000358:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800035a:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 800035c:	2200      	movs	r2, #0
 800035e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 8000362:	220c      	movs	r2, #12
 8000364:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000366:	4b08      	ldr	r3, [pc, #32]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 8000368:	2200      	movs	r2, #0
 800036a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800036c:	4b06      	ldr	r3, [pc, #24]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000372:	4805      	ldr	r0, [pc, #20]	; (8000388 <MX_USART3_UART_Init+0x4c>)
 8000374:	f001 fd1c 	bl	8001db0 <HAL_UART_Init>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d001      	beq.n	8000382 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800037e:	f000 f914 	bl	80005aa <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	20000124 	.word	0x20000124
 800038c:	40004800 	.word	0x40004800

08000390 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b088      	sub	sp, #32
 8000394:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000396:	f107 0310 	add.w	r3, r7, #16
 800039a:	2200      	movs	r2, #0
 800039c:	601a      	str	r2, [r3, #0]
 800039e:	605a      	str	r2, [r3, #4]
 80003a0:	609a      	str	r2, [r3, #8]
 80003a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003a4:	4b24      	ldr	r3, [pc, #144]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003a6:	699b      	ldr	r3, [r3, #24]
 80003a8:	4a23      	ldr	r2, [pc, #140]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003aa:	f043 0310 	orr.w	r3, r3, #16
 80003ae:	6193      	str	r3, [r2, #24]
 80003b0:	4b21      	ldr	r3, [pc, #132]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003b2:	699b      	ldr	r3, [r3, #24]
 80003b4:	f003 0310 	and.w	r3, r3, #16
 80003b8:	60fb      	str	r3, [r7, #12]
 80003ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003bc:	4b1e      	ldr	r3, [pc, #120]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a1d      	ldr	r2, [pc, #116]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b1b      	ldr	r3, [pc, #108]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0320 	and.w	r3, r3, #32
 80003d0:	60bb      	str	r3, [r7, #8]
 80003d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003d4:	4b18      	ldr	r3, [pc, #96]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a17      	ldr	r2, [pc, #92]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003da:	f043 0304 	orr.w	r3, r3, #4
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b15      	ldr	r3, [pc, #84]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0304 	and.w	r3, r3, #4
 80003e8:	607b      	str	r3, [r7, #4]
 80003ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003ec:	4b12      	ldr	r3, [pc, #72]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a11      	ldr	r2, [pc, #68]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003f2:	f043 0308 	orr.w	r3, r3, #8
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b0f      	ldr	r3, [pc, #60]	; (8000438 <MX_GPIO_Init+0xa8>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0308 	and.w	r3, r3, #8
 8000400:	603b      	str	r3, [r7, #0]
 8000402:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800040a:	480c      	ldr	r0, [pc, #48]	; (800043c <MX_GPIO_Init+0xac>)
 800040c:	f000 fe2e 	bl	800106c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000410:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000414:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000416:	2301      	movs	r3, #1
 8000418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041a:	2300      	movs	r3, #0
 800041c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800041e:	2302      	movs	r3, #2
 8000420:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000422:	f107 0310 	add.w	r3, r7, #16
 8000426:	4619      	mov	r1, r3
 8000428:	4804      	ldr	r0, [pc, #16]	; (800043c <MX_GPIO_Init+0xac>)
 800042a:	f000 fc9b 	bl	8000d64 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800042e:	bf00      	nop
 8000430:	3720      	adds	r7, #32
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	40021000 	.word	0x40021000
 800043c:	40011000 	.word	0x40011000

08000440 <receiver_handle>:

/* USER CODE BEGIN 4 */
uint8_t space;
uint8_t s[10];
void receiver_handle(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
	while(1)
	{
		space = uxQueueSpacesAvailable(myQueue);
 8000444:	4b14      	ldr	r3, [pc, #80]	; (8000498 <receiver_handle+0x58>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4618      	mov	r0, r3
 800044a:	f002 fd99 	bl	8002f80 <uxQueueSpacesAvailable>
 800044e:	4603      	mov	r3, r0
 8000450:	b2da      	uxtb	r2, r3
 8000452:	4b12      	ldr	r3, [pc, #72]	; (800049c <receiver_handle+0x5c>)
 8000454:	701a      	strb	r2, [r3, #0]
		if(xQueueReceive(myQueue, &str, portMAX_DELAY) == pdPASS)
 8000456:	4b10      	ldr	r3, [pc, #64]	; (8000498 <receiver_handle+0x58>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	f04f 32ff 	mov.w	r2, #4294967295
 800045e:	4910      	ldr	r1, [pc, #64]	; (80004a0 <receiver_handle+0x60>)
 8000460:	4618      	mov	r0, r3
 8000462:	f002 fcad 	bl	8002dc0 <xQueueReceive>
 8000466:	4603      	mov	r3, r0
 8000468:	2b01      	cmp	r3, #1
 800046a:	d1eb      	bne.n	8000444 <receiver_handle+0x4>
		{
			sprintf(s, "%d\n", space);
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <receiver_handle+0x5c>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	461a      	mov	r2, r3
 8000472:	490c      	ldr	r1, [pc, #48]	; (80004a4 <receiver_handle+0x64>)
 8000474:	480c      	ldr	r0, [pc, #48]	; (80004a8 <receiver_handle+0x68>)
 8000476:	f004 f975 	bl	8004764 <siprintf>
			HAL_UART_Transmit(&huart2, s, 10, 1000);
 800047a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800047e:	220a      	movs	r2, #10
 8000480:	4909      	ldr	r1, [pc, #36]	; (80004a8 <receiver_handle+0x68>)
 8000482:	480a      	ldr	r0, [pc, #40]	; (80004ac <receiver_handle+0x6c>)
 8000484:	f001 fce4 	bl	8001e50 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, str, 50, 1000);
 8000488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800048c:	2232      	movs	r2, #50	; 0x32
 800048e:	4904      	ldr	r1, [pc, #16]	; (80004a0 <receiver_handle+0x60>)
 8000490:	4806      	ldr	r0, [pc, #24]	; (80004ac <receiver_handle+0x6c>)
 8000492:	f001 fcdd 	bl	8001e50 <HAL_UART_Transmit>
		space = uxQueueSpacesAvailable(myQueue);
 8000496:	e7d5      	b.n	8000444 <receiver_handle+0x4>
 8000498:	20000170 	.word	0x20000170
 800049c:	20000218 	.word	0x20000218
 80004a0:	200001dc 	.word	0x200001dc
 80004a4:	08005064 	.word	0x08005064
 80004a8:	2000021c 	.word	0x2000021c
 80004ac:	200000dc 	.word	0x200000dc

080004b0 <HAL_UART_RxCpltCallback>:
		}
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b082      	sub	sp, #8
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
	if(huart == &huart3)
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4a2b      	ldr	r2, [pc, #172]	; (8000568 <HAL_UART_RxCpltCallback+0xb8>)
 80004bc:	4293      	cmp	r3, r2
 80004be:	d125      	bne.n	800050c <HAL_UART_RxCpltCallback+0x5c>
	{
		if(data3 != '\0')
 80004c0:	4b2a      	ldr	r3, [pc, #168]	; (800056c <HAL_UART_RxCpltCallback+0xbc>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d00d      	beq.n	80004e4 <HAL_UART_RxCpltCallback+0x34>
		{
			if(count3 > 50)
 80004c8:	4b29      	ldr	r3, [pc, #164]	; (8000570 <HAL_UART_RxCpltCallback+0xc0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	2b32      	cmp	r3, #50	; 0x32
 80004ce:	d818      	bhi.n	8000502 <HAL_UART_RxCpltCallback+0x52>
			{

			}
			else
			{
				item3[count3++] = data3;
 80004d0:	4b27      	ldr	r3, [pc, #156]	; (8000570 <HAL_UART_RxCpltCallback+0xc0>)
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	1c5a      	adds	r2, r3, #1
 80004d6:	4926      	ldr	r1, [pc, #152]	; (8000570 <HAL_UART_RxCpltCallback+0xc0>)
 80004d8:	600a      	str	r2, [r1, #0]
 80004da:	4a24      	ldr	r2, [pc, #144]	; (800056c <HAL_UART_RxCpltCallback+0xbc>)
 80004dc:	7811      	ldrb	r1, [r2, #0]
 80004de:	4a25      	ldr	r2, [pc, #148]	; (8000574 <HAL_UART_RxCpltCallback+0xc4>)
 80004e0:	54d1      	strb	r1, [r2, r3]
 80004e2:	e00e      	b.n	8000502 <HAL_UART_RxCpltCallback+0x52>
			}
		}
		else
		{
			xQueueSendFromISR(myQueue, item3, NULL);
 80004e4:	4b24      	ldr	r3, [pc, #144]	; (8000578 <HAL_UART_RxCpltCallback+0xc8>)
 80004e6:	6818      	ldr	r0, [r3, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	2200      	movs	r2, #0
 80004ec:	4921      	ldr	r1, [pc, #132]	; (8000574 <HAL_UART_RxCpltCallback+0xc4>)
 80004ee:	f002 fbbd 	bl	8002c6c <xQueueGenericSendFromISR>
			count3 = 0;
 80004f2:	4b1f      	ldr	r3, [pc, #124]	; (8000570 <HAL_UART_RxCpltCallback+0xc0>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	601a      	str	r2, [r3, #0]
			memset(item3, 0, 50);
 80004f8:	2232      	movs	r2, #50	; 0x32
 80004fa:	2100      	movs	r1, #0
 80004fc:	481d      	ldr	r0, [pc, #116]	; (8000574 <HAL_UART_RxCpltCallback+0xc4>)
 80004fe:	f004 f929 	bl	8004754 <memset>
		}
		HAL_UART_Receive_IT(&huart3, &data3, 1);
 8000502:	2201      	movs	r2, #1
 8000504:	4919      	ldr	r1, [pc, #100]	; (800056c <HAL_UART_RxCpltCallback+0xbc>)
 8000506:	4818      	ldr	r0, [pc, #96]	; (8000568 <HAL_UART_RxCpltCallback+0xb8>)
 8000508:	f001 fd25 	bl	8001f56 <HAL_UART_Receive_IT>
	}
	if(huart == &huart1)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	4a1b      	ldr	r2, [pc, #108]	; (800057c <HAL_UART_RxCpltCallback+0xcc>)
 8000510:	4293      	cmp	r3, r2
 8000512:	d125      	bne.n	8000560 <HAL_UART_RxCpltCallback+0xb0>
	{
		if(data1 != '\0')
 8000514:	4b1a      	ldr	r3, [pc, #104]	; (8000580 <HAL_UART_RxCpltCallback+0xd0>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	2b00      	cmp	r3, #0
 800051a:	d00d      	beq.n	8000538 <HAL_UART_RxCpltCallback+0x88>
		{
			if(count1 > 50)
 800051c:	4b19      	ldr	r3, [pc, #100]	; (8000584 <HAL_UART_RxCpltCallback+0xd4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	2b32      	cmp	r3, #50	; 0x32
 8000522:	d818      	bhi.n	8000556 <HAL_UART_RxCpltCallback+0xa6>
			{

			}
			else
			{
				item1[count1++] = data1;
 8000524:	4b17      	ldr	r3, [pc, #92]	; (8000584 <HAL_UART_RxCpltCallback+0xd4>)
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	1c5a      	adds	r2, r3, #1
 800052a:	4916      	ldr	r1, [pc, #88]	; (8000584 <HAL_UART_RxCpltCallback+0xd4>)
 800052c:	600a      	str	r2, [r1, #0]
 800052e:	4a14      	ldr	r2, [pc, #80]	; (8000580 <HAL_UART_RxCpltCallback+0xd0>)
 8000530:	7811      	ldrb	r1, [r2, #0]
 8000532:	4a15      	ldr	r2, [pc, #84]	; (8000588 <HAL_UART_RxCpltCallback+0xd8>)
 8000534:	54d1      	strb	r1, [r2, r3]
 8000536:	e00e      	b.n	8000556 <HAL_UART_RxCpltCallback+0xa6>
			}
		}
		else
		{
			xQueueSendFromISR(myQueue, item1, NULL);
 8000538:	4b0f      	ldr	r3, [pc, #60]	; (8000578 <HAL_UART_RxCpltCallback+0xc8>)
 800053a:	6818      	ldr	r0, [r3, #0]
 800053c:	2300      	movs	r3, #0
 800053e:	2200      	movs	r2, #0
 8000540:	4911      	ldr	r1, [pc, #68]	; (8000588 <HAL_UART_RxCpltCallback+0xd8>)
 8000542:	f002 fb93 	bl	8002c6c <xQueueGenericSendFromISR>
			count1 = 0;
 8000546:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <HAL_UART_RxCpltCallback+0xd4>)
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
			memset(item1, 0, 50);
 800054c:	2232      	movs	r2, #50	; 0x32
 800054e:	2100      	movs	r1, #0
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <HAL_UART_RxCpltCallback+0xd8>)
 8000552:	f004 f8ff 	bl	8004754 <memset>
		}
		HAL_UART_Receive_IT(&huart1, &data1, 1);
 8000556:	2201      	movs	r2, #1
 8000558:	4909      	ldr	r1, [pc, #36]	; (8000580 <HAL_UART_RxCpltCallback+0xd0>)
 800055a:	4808      	ldr	r0, [pc, #32]	; (800057c <HAL_UART_RxCpltCallback+0xcc>)
 800055c:	f001 fcfb 	bl	8001f56 <HAL_UART_Receive_IT>
	}

}
 8000560:	bf00      	nop
 8000562:	3708      	adds	r7, #8
 8000564:	46bd      	mov	sp, r7
 8000566:	bd80      	pop	{r7, pc}
 8000568:	20000124 	.word	0x20000124
 800056c:	2000020f 	.word	0x2000020f
 8000570:	20000214 	.word	0x20000214
 8000574:	200001a8 	.word	0x200001a8
 8000578:	20000170 	.word	0x20000170
 800057c:	20000094 	.word	0x20000094
 8000580:	2000020e 	.word	0x2000020e
 8000584:	20000210 	.word	0x20000210
 8000588:	20000174 	.word	0x20000174

0800058c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800059c:	d101      	bne.n	80005a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800059e:	f000 fa33 	bl	8000a08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80005a2:	bf00      	nop
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}

080005aa <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80005aa:	b480      	push	{r7}
 80005ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005ae:	b672      	cpsid	i
}
 80005b0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80005b2:	e7fe      	b.n	80005b2 <Error_Handler+0x8>

080005b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80005ba:	4b15      	ldr	r3, [pc, #84]	; (8000610 <HAL_MspInit+0x5c>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	4a14      	ldr	r2, [pc, #80]	; (8000610 <HAL_MspInit+0x5c>)
 80005c0:	f043 0301 	orr.w	r3, r3, #1
 80005c4:	6193      	str	r3, [r2, #24]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <HAL_MspInit+0x5c>)
 80005c8:	699b      	ldr	r3, [r3, #24]
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d2:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <HAL_MspInit+0x5c>)
 80005d4:	69db      	ldr	r3, [r3, #28]
 80005d6:	4a0e      	ldr	r2, [pc, #56]	; (8000610 <HAL_MspInit+0x5c>)
 80005d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005dc:	61d3      	str	r3, [r2, #28]
 80005de:	4b0c      	ldr	r3, [pc, #48]	; (8000610 <HAL_MspInit+0x5c>)
 80005e0:	69db      	ldr	r3, [r3, #28]
 80005e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80005ea:	4b0a      	ldr	r3, [pc, #40]	; (8000614 <HAL_MspInit+0x60>)
 80005ec:	685b      	ldr	r3, [r3, #4]
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80005f6:	60fb      	str	r3, [r7, #12]
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005fe:	60fb      	str	r3, [r7, #12]
 8000600:	4a04      	ldr	r2, [pc, #16]	; (8000614 <HAL_MspInit+0x60>)
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	40021000 	.word	0x40021000
 8000614:	40010000 	.word	0x40010000

08000618 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000620:	f107 0320 	add.w	r3, r7, #32
 8000624:	2200      	movs	r2, #0
 8000626:	601a      	str	r2, [r3, #0]
 8000628:	605a      	str	r2, [r3, #4]
 800062a:	609a      	str	r2, [r3, #8]
 800062c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a5b      	ldr	r2, [pc, #364]	; (80007a0 <HAL_UART_MspInit+0x188>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d13a      	bne.n	80006ae <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000638:	4b5a      	ldr	r3, [pc, #360]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a59      	ldr	r2, [pc, #356]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 800063e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000642:	6193      	str	r3, [r2, #24]
 8000644:	4b57      	ldr	r3, [pc, #348]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800064c:	61fb      	str	r3, [r7, #28]
 800064e:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000650:	4b54      	ldr	r3, [pc, #336]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a53      	ldr	r2, [pc, #332]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 8000656:	f043 0304 	orr.w	r3, r3, #4
 800065a:	6193      	str	r3, [r2, #24]
 800065c:	4b51      	ldr	r3, [pc, #324]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 800065e:	699b      	ldr	r3, [r3, #24]
 8000660:	f003 0304 	and.w	r3, r3, #4
 8000664:	61bb      	str	r3, [r7, #24]
 8000666:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000668:	f44f 7300 	mov.w	r3, #512	; 0x200
 800066c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800066e:	2302      	movs	r3, #2
 8000670:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000672:	2303      	movs	r3, #3
 8000674:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	4619      	mov	r1, r3
 800067c:	484a      	ldr	r0, [pc, #296]	; (80007a8 <HAL_UART_MspInit+0x190>)
 800067e:	f000 fb71 	bl	8000d64 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000682:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4619      	mov	r1, r3
 8000696:	4844      	ldr	r0, [pc, #272]	; (80007a8 <HAL_UART_MspInit+0x190>)
 8000698:	f000 fb64 	bl	8000d64 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800069c:	2200      	movs	r2, #0
 800069e:	2105      	movs	r1, #5
 80006a0:	2025      	movs	r0, #37	; 0x25
 80006a2:	f000 fa82 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006a6:	2025      	movs	r0, #37	; 0x25
 80006a8:	f000 fa9b 	bl	8000be2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80006ac:	e074      	b.n	8000798 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART2)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a3e      	ldr	r2, [pc, #248]	; (80007ac <HAL_UART_MspInit+0x194>)
 80006b4:	4293      	cmp	r3, r2
 80006b6:	d130      	bne.n	800071a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006b8:	4b3a      	ldr	r3, [pc, #232]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 80006ba:	69db      	ldr	r3, [r3, #28]
 80006bc:	4a39      	ldr	r2, [pc, #228]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 80006be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006c2:	61d3      	str	r3, [r2, #28]
 80006c4:	4b37      	ldr	r3, [pc, #220]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 80006c6:	69db      	ldr	r3, [r3, #28]
 80006c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006cc:	617b      	str	r3, [r7, #20]
 80006ce:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d0:	4b34      	ldr	r3, [pc, #208]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	4a33      	ldr	r2, [pc, #204]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 80006d6:	f043 0304 	orr.w	r3, r3, #4
 80006da:	6193      	str	r3, [r2, #24]
 80006dc:	4b31      	ldr	r3, [pc, #196]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	f003 0304 	and.w	r3, r3, #4
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80006e8:	2304      	movs	r3, #4
 80006ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ec:	2302      	movs	r3, #2
 80006ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f0:	2303      	movs	r3, #3
 80006f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f4:	f107 0320 	add.w	r3, r7, #32
 80006f8:	4619      	mov	r1, r3
 80006fa:	482b      	ldr	r0, [pc, #172]	; (80007a8 <HAL_UART_MspInit+0x190>)
 80006fc:	f000 fb32 	bl	8000d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000700:	2308      	movs	r3, #8
 8000702:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000704:	2300      	movs	r3, #0
 8000706:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000708:	2300      	movs	r3, #0
 800070a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070c:	f107 0320 	add.w	r3, r7, #32
 8000710:	4619      	mov	r1, r3
 8000712:	4825      	ldr	r0, [pc, #148]	; (80007a8 <HAL_UART_MspInit+0x190>)
 8000714:	f000 fb26 	bl	8000d64 <HAL_GPIO_Init>
}
 8000718:	e03e      	b.n	8000798 <HAL_UART_MspInit+0x180>
  else if(huart->Instance==USART3)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	4a24      	ldr	r2, [pc, #144]	; (80007b0 <HAL_UART_MspInit+0x198>)
 8000720:	4293      	cmp	r3, r2
 8000722:	d139      	bne.n	8000798 <HAL_UART_MspInit+0x180>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000724:	4b1f      	ldr	r3, [pc, #124]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 8000726:	69db      	ldr	r3, [r3, #28]
 8000728:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 800072a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800072e:	61d3      	str	r3, [r2, #28]
 8000730:	4b1c      	ldr	r3, [pc, #112]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 8000732:	69db      	ldr	r3, [r3, #28]
 8000734:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000738:	60fb      	str	r3, [r7, #12]
 800073a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800073c:	4b19      	ldr	r3, [pc, #100]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 800073e:	699b      	ldr	r3, [r3, #24]
 8000740:	4a18      	ldr	r2, [pc, #96]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 8000742:	f043 0308 	orr.w	r3, r3, #8
 8000746:	6193      	str	r3, [r2, #24]
 8000748:	4b16      	ldr	r3, [pc, #88]	; (80007a4 <HAL_UART_MspInit+0x18c>)
 800074a:	699b      	ldr	r3, [r3, #24]
 800074c:	f003 0308 	and.w	r3, r3, #8
 8000750:	60bb      	str	r3, [r7, #8]
 8000752:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000754:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800075a:	2302      	movs	r3, #2
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800075e:	2303      	movs	r3, #3
 8000760:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 0320 	add.w	r3, r7, #32
 8000766:	4619      	mov	r1, r3
 8000768:	4812      	ldr	r0, [pc, #72]	; (80007b4 <HAL_UART_MspInit+0x19c>)
 800076a:	f000 fafb 	bl	8000d64 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800076e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000772:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000774:	2300      	movs	r3, #0
 8000776:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	f107 0320 	add.w	r3, r7, #32
 8000780:	4619      	mov	r1, r3
 8000782:	480c      	ldr	r0, [pc, #48]	; (80007b4 <HAL_UART_MspInit+0x19c>)
 8000784:	f000 faee 	bl	8000d64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8000788:	2200      	movs	r2, #0
 800078a:	2105      	movs	r1, #5
 800078c:	2027      	movs	r0, #39	; 0x27
 800078e:	f000 fa0c 	bl	8000baa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000792:	2027      	movs	r0, #39	; 0x27
 8000794:	f000 fa25 	bl	8000be2 <HAL_NVIC_EnableIRQ>
}
 8000798:	bf00      	nop
 800079a:	3730      	adds	r7, #48	; 0x30
 800079c:	46bd      	mov	sp, r7
 800079e:	bd80      	pop	{r7, pc}
 80007a0:	40013800 	.word	0x40013800
 80007a4:	40021000 	.word	0x40021000
 80007a8:	40010800 	.word	0x40010800
 80007ac:	40004400 	.word	0x40004400
 80007b0:	40004800 	.word	0x40004800
 80007b4:	40010c00 	.word	0x40010c00

080007b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b08e      	sub	sp, #56	; 0x38
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80007c0:	2300      	movs	r3, #0
 80007c2:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007c8:	2300      	movs	r3, #0
 80007ca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 80007ce:	4b34      	ldr	r3, [pc, #208]	; (80008a0 <HAL_InitTick+0xe8>)
 80007d0:	69db      	ldr	r3, [r3, #28]
 80007d2:	4a33      	ldr	r2, [pc, #204]	; (80008a0 <HAL_InitTick+0xe8>)
 80007d4:	f043 0301 	orr.w	r3, r3, #1
 80007d8:	61d3      	str	r3, [r2, #28]
 80007da:	4b31      	ldr	r3, [pc, #196]	; (80008a0 <HAL_InitTick+0xe8>)
 80007dc:	69db      	ldr	r3, [r3, #28]
 80007de:	f003 0301 	and.w	r3, r3, #1
 80007e2:	60fb      	str	r3, [r7, #12]
 80007e4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e6:	f107 0210 	add.w	r2, r7, #16
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4611      	mov	r1, r2
 80007f0:	4618      	mov	r0, r3
 80007f2:	f001 f845 	bl	8001880 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007f6:	6a3b      	ldr	r3, [r7, #32]
 80007f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d103      	bne.n	8000808 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000800:	f001 f816 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 8000804:	6378      	str	r0, [r7, #52]	; 0x34
 8000806:	e004      	b.n	8000812 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000808:	f001 f812 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 800080c:	4603      	mov	r3, r0
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000814:	4a23      	ldr	r2, [pc, #140]	; (80008a4 <HAL_InitTick+0xec>)
 8000816:	fba2 2303 	umull	r2, r3, r2, r3
 800081a:	0c9b      	lsrs	r3, r3, #18
 800081c:	3b01      	subs	r3, #1
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000820:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <HAL_InitTick+0xf0>)
 8000822:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000826:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <HAL_InitTick+0xf0>)
 800082a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800082e:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000830:	4a1d      	ldr	r2, [pc, #116]	; (80008a8 <HAL_InitTick+0xf0>)
 8000832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000834:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <HAL_InitTick+0xf0>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <HAL_InitTick+0xf0>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <HAL_InitTick+0xf0>)
 8000844:	2200      	movs	r2, #0
 8000846:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000848:	4817      	ldr	r0, [pc, #92]	; (80008a8 <HAL_InitTick+0xf0>)
 800084a:	f001 f867 	bl	800191c <HAL_TIM_Base_Init>
 800084e:	4603      	mov	r3, r0
 8000850:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000854:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000858:	2b00      	cmp	r3, #0
 800085a:	d11b      	bne.n	8000894 <HAL_InitTick+0xdc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800085c:	4812      	ldr	r0, [pc, #72]	; (80008a8 <HAL_InitTick+0xf0>)
 800085e:	f001 f8b5 	bl	80019cc <HAL_TIM_Base_Start_IT>
 8000862:	4603      	mov	r3, r0
 8000864:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000868:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800086c:	2b00      	cmp	r3, #0
 800086e:	d111      	bne.n	8000894 <HAL_InitTick+0xdc>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000870:	201c      	movs	r0, #28
 8000872:	f000 f9b6 	bl	8000be2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	2b0f      	cmp	r3, #15
 800087a:	d808      	bhi.n	800088e <HAL_InitTick+0xd6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800087c:	2200      	movs	r2, #0
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	201c      	movs	r0, #28
 8000882:	f000 f992 	bl	8000baa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000886:	4a09      	ldr	r2, [pc, #36]	; (80008ac <HAL_InitTick+0xf4>)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	e002      	b.n	8000894 <HAL_InitTick+0xdc>
      }
      else
      {
        status = HAL_ERROR;
 800088e:	2301      	movs	r3, #1
 8000890:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000894:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000898:	4618      	mov	r0, r3
 800089a:	3738      	adds	r7, #56	; 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000
 80008a4:	431bde83 	.word	0x431bde83
 80008a8:	20000228 	.word	0x20000228
 80008ac:	20000004 	.word	0x20000004

080008b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b4:	e7fe      	b.n	80008b4 <NMI_Handler+0x4>

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
	...

080008dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80008e0:	4802      	ldr	r0, [pc, #8]	; (80008ec <TIM2_IRQHandler+0x10>)
 80008e2:	f001 f8c5 	bl	8001a70 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80008e6:	bf00      	nop
 80008e8:	bd80      	pop	{r7, pc}
 80008ea:	bf00      	nop
 80008ec:	20000228 	.word	0x20000228

080008f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008f4:	4802      	ldr	r0, [pc, #8]	; (8000900 <USART1_IRQHandler+0x10>)
 80008f6:	f001 fb53 	bl	8001fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000094 	.word	0x20000094

08000904 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <USART3_IRQHandler+0x10>)
 800090a:	f001 fb49 	bl	8001fa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	20000124 	.word	0x20000124

08000918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b086      	sub	sp, #24
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000920:	4a14      	ldr	r2, [pc, #80]	; (8000974 <_sbrk+0x5c>)
 8000922:	4b15      	ldr	r3, [pc, #84]	; (8000978 <_sbrk+0x60>)
 8000924:	1ad3      	subs	r3, r2, r3
 8000926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800092c:	4b13      	ldr	r3, [pc, #76]	; (800097c <_sbrk+0x64>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d102      	bne.n	800093a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <_sbrk+0x64>)
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <_sbrk+0x68>)
 8000938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <_sbrk+0x64>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	4413      	add	r3, r2
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	429a      	cmp	r2, r3
 8000946:	d207      	bcs.n	8000958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000948:	f003 fecc 	bl	80046e4 <__errno>
 800094c:	4603      	mov	r3, r0
 800094e:	220c      	movs	r2, #12
 8000950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000952:	f04f 33ff 	mov.w	r3, #4294967295
 8000956:	e009      	b.n	800096c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000958:	4b08      	ldr	r3, [pc, #32]	; (800097c <_sbrk+0x64>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095e:	4b07      	ldr	r3, [pc, #28]	; (800097c <_sbrk+0x64>)
 8000960:	681a      	ldr	r2, [r3, #0]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	4413      	add	r3, r2
 8000966:	4a05      	ldr	r2, [pc, #20]	; (800097c <_sbrk+0x64>)
 8000968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800096a:	68fb      	ldr	r3, [r7, #12]
}
 800096c:	4618      	mov	r0, r3
 800096e:	3718      	adds	r7, #24
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20005000 	.word	0x20005000
 8000978:	00000400 	.word	0x00000400
 800097c:	20000270 	.word	0x20000270
 8000980:	20001768 	.word	0x20001768

08000984 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000988:	bf00      	nop
 800098a:	46bd      	mov	sp, r7
 800098c:	bc80      	pop	{r7}
 800098e:	4770      	bx	lr

08000990 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000990:	f7ff fff8 	bl	8000984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000994:	480b      	ldr	r0, [pc, #44]	; (80009c4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000996:	490c      	ldr	r1, [pc, #48]	; (80009c8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000998:	4a0c      	ldr	r2, [pc, #48]	; (80009cc <LoopFillZerobss+0x16>)
  movs r3, #0
 800099a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800099c:	e002      	b.n	80009a4 <LoopCopyDataInit>

0800099e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009a0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009a2:	3304      	adds	r3, #4

080009a4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a8:	d3f9      	bcc.n	800099e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009aa:	4a09      	ldr	r2, [pc, #36]	; (80009d0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80009ac:	4c09      	ldr	r4, [pc, #36]	; (80009d4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ae:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009b0:	e001      	b.n	80009b6 <LoopFillZerobss>

080009b2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009b2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b4:	3204      	adds	r2, #4

080009b6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b8:	d3fb      	bcc.n	80009b2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009ba:	f003 fe99 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009be:	f7ff fbc7 	bl	8000150 <main>
  bx lr
 80009c2:	4770      	bx	lr
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80009cc:	080050d8 	.word	0x080050d8
  ldr r2, =_sbss
 80009d0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80009d4:	20001764 	.word	0x20001764

080009d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC1_2_IRQHandler>
	...

080009dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e0:	4b08      	ldr	r3, [pc, #32]	; (8000a04 <HAL_Init+0x28>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a07      	ldr	r2, [pc, #28]	; (8000a04 <HAL_Init+0x28>)
 80009e6:	f043 0310 	orr.w	r3, r3, #16
 80009ea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009ec:	2003      	movs	r0, #3
 80009ee:	f000 f8d1 	bl	8000b94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f2:	200f      	movs	r0, #15
 80009f4:	f7ff fee0 	bl	80007b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009f8:	f7ff fddc 	bl	80005b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40022000 	.word	0x40022000

08000a08 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_IncTick+0x1c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b05      	ldr	r3, [pc, #20]	; (8000a28 <HAL_IncTick+0x20>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a03      	ldr	r2, [pc, #12]	; (8000a28 <HAL_IncTick+0x20>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bc80      	pop	{r7}
 8000a22:	4770      	bx	lr
 8000a24:	20000008 	.word	0x20000008
 8000a28:	20000274 	.word	0x20000274

08000a2c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a30:	4b02      	ldr	r3, [pc, #8]	; (8000a3c <HAL_GetTick+0x10>)
 8000a32:	681b      	ldr	r3, [r3, #0]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bc80      	pop	{r7}
 8000a3a:	4770      	bx	lr
 8000a3c:	20000274 	.word	0x20000274

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	; (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	; (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4906      	ldr	r1, [pc, #24]	; (8000ad8 <__NVIC_EnableIRQ+0x34>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	; (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	; (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	; 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	; 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9c:	6878      	ldr	r0, [r7, #4]
 8000b9e:	f7ff ff4f 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000ba2:	bf00      	nop
 8000ba4:	3708      	adds	r7, #8
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]
 8000bb6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bbc:	f7ff ff64 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000bc0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc2:	687a      	ldr	r2, [r7, #4]
 8000bc4:	68b9      	ldr	r1, [r7, #8]
 8000bc6:	6978      	ldr	r0, [r7, #20]
 8000bc8:	f7ff ffb2 	bl	8000b30 <NVIC_EncodePriority>
 8000bcc:	4602      	mov	r2, r0
 8000bce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd2:	4611      	mov	r1, r2
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f7ff ff81 	bl	8000adc <__NVIC_SetPriority>
}
 8000bda:	bf00      	nop
 8000bdc:	3718      	adds	r7, #24
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}

08000be2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be2:	b580      	push	{r7, lr}
 8000be4:	b082      	sub	sp, #8
 8000be6:	af00      	add	r7, sp, #0
 8000be8:	4603      	mov	r3, r0
 8000bea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff ff57 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000bf6:	bf00      	nop
 8000bf8:	3708      	adds	r7, #8
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}

08000bfe <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bfe:	b480      	push	{r7}
 8000c00:	b085      	sub	sp, #20
 8000c02:	af00      	add	r7, sp, #0
 8000c04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c06:	2300      	movs	r3, #0
 8000c08:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d008      	beq.n	8000c28 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2204      	movs	r2, #4
 8000c1a:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000c24:	2301      	movs	r3, #1
 8000c26:	e020      	b.n	8000c6a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681a      	ldr	r2, [r3, #0]
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	f022 020e 	bic.w	r2, r2, #14
 8000c36:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	f022 0201 	bic.w	r2, r2, #1
 8000c46:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c50:	2101      	movs	r1, #1
 8000c52:	fa01 f202 	lsl.w	r2, r1, r2
 8000c56:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3714      	adds	r7, #20
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bc80      	pop	{r7}
 8000c72:	4770      	bx	lr

08000c74 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d005      	beq.n	8000c98 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	73fb      	strb	r3, [r7, #15]
 8000c96:	e051      	b.n	8000d3c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	681a      	ldr	r2, [r3, #0]
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	f022 020e 	bic.w	r2, r2, #14
 8000ca6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681a      	ldr	r2, [r3, #0]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f022 0201 	bic.w	r2, r2, #1
 8000cb6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a22      	ldr	r2, [pc, #136]	; (8000d48 <HAL_DMA_Abort_IT+0xd4>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d029      	beq.n	8000d16 <HAL_DMA_Abort_IT+0xa2>
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	4a21      	ldr	r2, [pc, #132]	; (8000d4c <HAL_DMA_Abort_IT+0xd8>)
 8000cc8:	4293      	cmp	r3, r2
 8000cca:	d022      	beq.n	8000d12 <HAL_DMA_Abort_IT+0x9e>
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	4a1f      	ldr	r2, [pc, #124]	; (8000d50 <HAL_DMA_Abort_IT+0xdc>)
 8000cd2:	4293      	cmp	r3, r2
 8000cd4:	d01a      	beq.n	8000d0c <HAL_DMA_Abort_IT+0x98>
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1e      	ldr	r2, [pc, #120]	; (8000d54 <HAL_DMA_Abort_IT+0xe0>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d012      	beq.n	8000d06 <HAL_DMA_Abort_IT+0x92>
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a1c      	ldr	r2, [pc, #112]	; (8000d58 <HAL_DMA_Abort_IT+0xe4>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d00a      	beq.n	8000d00 <HAL_DMA_Abort_IT+0x8c>
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a1b      	ldr	r2, [pc, #108]	; (8000d5c <HAL_DMA_Abort_IT+0xe8>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d102      	bne.n	8000cfa <HAL_DMA_Abort_IT+0x86>
 8000cf4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cf8:	e00e      	b.n	8000d18 <HAL_DMA_Abort_IT+0xa4>
 8000cfa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cfe:	e00b      	b.n	8000d18 <HAL_DMA_Abort_IT+0xa4>
 8000d00:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d04:	e008      	b.n	8000d18 <HAL_DMA_Abort_IT+0xa4>
 8000d06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d0a:	e005      	b.n	8000d18 <HAL_DMA_Abort_IT+0xa4>
 8000d0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d10:	e002      	b.n	8000d18 <HAL_DMA_Abort_IT+0xa4>
 8000d12:	2310      	movs	r3, #16
 8000d14:	e000      	b.n	8000d18 <HAL_DMA_Abort_IT+0xa4>
 8000d16:	2301      	movs	r3, #1
 8000d18:	4a11      	ldr	r2, [pc, #68]	; (8000d60 <HAL_DMA_Abort_IT+0xec>)
 8000d1a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	2201      	movs	r2, #1
 8000d20:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2200      	movs	r2, #0
 8000d28:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d003      	beq.n	8000d3c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d38:	6878      	ldr	r0, [r7, #4]
 8000d3a:	4798      	blx	r3
    } 
  }
  return status;
 8000d3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3710      	adds	r7, #16
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020008 	.word	0x40020008
 8000d4c:	4002001c 	.word	0x4002001c
 8000d50:	40020030 	.word	0x40020030
 8000d54:	40020044 	.word	0x40020044
 8000d58:	40020058 	.word	0x40020058
 8000d5c:	4002006c 	.word	0x4002006c
 8000d60:	40020000 	.word	0x40020000

08000d64 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b08b      	sub	sp, #44	; 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
 8000d6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d72:	2300      	movs	r3, #0
 8000d74:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d76:	e169      	b.n	800104c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000d78:	2201      	movs	r2, #1
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	69fa      	ldr	r2, [r7, #28]
 8000d88:	4013      	ands	r3, r2
 8000d8a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	429a      	cmp	r2, r3
 8000d92:	f040 8158 	bne.w	8001046 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	4a9a      	ldr	r2, [pc, #616]	; (8001004 <HAL_GPIO_Init+0x2a0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d05e      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000da0:	4a98      	ldr	r2, [pc, #608]	; (8001004 <HAL_GPIO_Init+0x2a0>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d875      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000da6:	4a98      	ldr	r2, [pc, #608]	; (8001008 <HAL_GPIO_Init+0x2a4>)
 8000da8:	4293      	cmp	r3, r2
 8000daa:	d058      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dac:	4a96      	ldr	r2, [pc, #600]	; (8001008 <HAL_GPIO_Init+0x2a4>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d86f      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000db2:	4a96      	ldr	r2, [pc, #600]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000db4:	4293      	cmp	r3, r2
 8000db6:	d052      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000db8:	4a94      	ldr	r2, [pc, #592]	; (800100c <HAL_GPIO_Init+0x2a8>)
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	d869      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dbe:	4a94      	ldr	r2, [pc, #592]	; (8001010 <HAL_GPIO_Init+0x2ac>)
 8000dc0:	4293      	cmp	r3, r2
 8000dc2:	d04c      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dc4:	4a92      	ldr	r2, [pc, #584]	; (8001010 <HAL_GPIO_Init+0x2ac>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d863      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dca:	4a92      	ldr	r2, [pc, #584]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d046      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
 8000dd0:	4a90      	ldr	r2, [pc, #576]	; (8001014 <HAL_GPIO_Init+0x2b0>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d85d      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dd6:	2b12      	cmp	r3, #18
 8000dd8:	d82a      	bhi.n	8000e30 <HAL_GPIO_Init+0xcc>
 8000dda:	2b12      	cmp	r3, #18
 8000ddc:	d859      	bhi.n	8000e92 <HAL_GPIO_Init+0x12e>
 8000dde:	a201      	add	r2, pc, #4	; (adr r2, 8000de4 <HAL_GPIO_Init+0x80>)
 8000de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de4:	08000e5f 	.word	0x08000e5f
 8000de8:	08000e39 	.word	0x08000e39
 8000dec:	08000e4b 	.word	0x08000e4b
 8000df0:	08000e8d 	.word	0x08000e8d
 8000df4:	08000e93 	.word	0x08000e93
 8000df8:	08000e93 	.word	0x08000e93
 8000dfc:	08000e93 	.word	0x08000e93
 8000e00:	08000e93 	.word	0x08000e93
 8000e04:	08000e93 	.word	0x08000e93
 8000e08:	08000e93 	.word	0x08000e93
 8000e0c:	08000e93 	.word	0x08000e93
 8000e10:	08000e93 	.word	0x08000e93
 8000e14:	08000e93 	.word	0x08000e93
 8000e18:	08000e93 	.word	0x08000e93
 8000e1c:	08000e93 	.word	0x08000e93
 8000e20:	08000e93 	.word	0x08000e93
 8000e24:	08000e93 	.word	0x08000e93
 8000e28:	08000e41 	.word	0x08000e41
 8000e2c:	08000e55 	.word	0x08000e55
 8000e30:	4a79      	ldr	r2, [pc, #484]	; (8001018 <HAL_GPIO_Init+0x2b4>)
 8000e32:	4293      	cmp	r3, r2
 8000e34:	d013      	beq.n	8000e5e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e36:	e02c      	b.n	8000e92 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	68db      	ldr	r3, [r3, #12]
 8000e3c:	623b      	str	r3, [r7, #32]
          break;
 8000e3e:	e029      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	3304      	adds	r3, #4
 8000e46:	623b      	str	r3, [r7, #32]
          break;
 8000e48:	e024      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	68db      	ldr	r3, [r3, #12]
 8000e4e:	3308      	adds	r3, #8
 8000e50:	623b      	str	r3, [r7, #32]
          break;
 8000e52:	e01f      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	330c      	adds	r3, #12
 8000e5a:	623b      	str	r3, [r7, #32]
          break;
 8000e5c:	e01a      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d102      	bne.n	8000e6c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000e66:	2304      	movs	r3, #4
 8000e68:	623b      	str	r3, [r7, #32]
          break;
 8000e6a:	e013      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	2b01      	cmp	r3, #1
 8000e72:	d105      	bne.n	8000e80 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e74:	2308      	movs	r3, #8
 8000e76:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	69fa      	ldr	r2, [r7, #28]
 8000e7c:	611a      	str	r2, [r3, #16]
          break;
 8000e7e:	e009      	b.n	8000e94 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000e80:	2308      	movs	r3, #8
 8000e82:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	69fa      	ldr	r2, [r7, #28]
 8000e88:	615a      	str	r2, [r3, #20]
          break;
 8000e8a:	e003      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
          break;
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x130>
          break;
 8000e92:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	2bff      	cmp	r3, #255	; 0xff
 8000e98:	d801      	bhi.n	8000e9e <HAL_GPIO_Init+0x13a>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	e001      	b.n	8000ea2 <HAL_GPIO_Init+0x13e>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3304      	adds	r3, #4
 8000ea2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ea4:	69bb      	ldr	r3, [r7, #24]
 8000ea6:	2bff      	cmp	r3, #255	; 0xff
 8000ea8:	d802      	bhi.n	8000eb0 <HAL_GPIO_Init+0x14c>
 8000eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eac:	009b      	lsls	r3, r3, #2
 8000eae:	e002      	b.n	8000eb6 <HAL_GPIO_Init+0x152>
 8000eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eb2:	3b08      	subs	r3, #8
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	693b      	ldr	r3, [r7, #16]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	401a      	ands	r2, r3
 8000ec8:	6a39      	ldr	r1, [r7, #32]
 8000eca:	693b      	ldr	r3, [r7, #16]
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	431a      	orrs	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	685b      	ldr	r3, [r3, #4]
 8000eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	f000 80b1 	beq.w	8001046 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ee4:	4b4d      	ldr	r3, [pc, #308]	; (800101c <HAL_GPIO_Init+0x2b8>)
 8000ee6:	699b      	ldr	r3, [r3, #24]
 8000ee8:	4a4c      	ldr	r2, [pc, #304]	; (800101c <HAL_GPIO_Init+0x2b8>)
 8000eea:	f043 0301 	orr.w	r3, r3, #1
 8000eee:	6193      	str	r3, [r2, #24]
 8000ef0:	4b4a      	ldr	r3, [pc, #296]	; (800101c <HAL_GPIO_Init+0x2b8>)
 8000ef2:	699b      	ldr	r3, [r3, #24]
 8000ef4:	f003 0301 	and.w	r3, r3, #1
 8000ef8:	60bb      	str	r3, [r7, #8]
 8000efa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000efc:	4a48      	ldr	r2, [pc, #288]	; (8001020 <HAL_GPIO_Init+0x2bc>)
 8000efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f00:	089b      	lsrs	r3, r3, #2
 8000f02:	3302      	adds	r3, #2
 8000f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f08:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000f0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0c:	f003 0303 	and.w	r3, r3, #3
 8000f10:	009b      	lsls	r3, r3, #2
 8000f12:	220f      	movs	r2, #15
 8000f14:	fa02 f303 	lsl.w	r3, r2, r3
 8000f18:	43db      	mvns	r3, r3
 8000f1a:	68fa      	ldr	r2, [r7, #12]
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a40      	ldr	r2, [pc, #256]	; (8001024 <HAL_GPIO_Init+0x2c0>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d013      	beq.n	8000f50 <HAL_GPIO_Init+0x1ec>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	4a3f      	ldr	r2, [pc, #252]	; (8001028 <HAL_GPIO_Init+0x2c4>)
 8000f2c:	4293      	cmp	r3, r2
 8000f2e:	d00d      	beq.n	8000f4c <HAL_GPIO_Init+0x1e8>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	4a3e      	ldr	r2, [pc, #248]	; (800102c <HAL_GPIO_Init+0x2c8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d007      	beq.n	8000f48 <HAL_GPIO_Init+0x1e4>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4a3d      	ldr	r2, [pc, #244]	; (8001030 <HAL_GPIO_Init+0x2cc>)
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d101      	bne.n	8000f44 <HAL_GPIO_Init+0x1e0>
 8000f40:	2303      	movs	r3, #3
 8000f42:	e006      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f44:	2304      	movs	r3, #4
 8000f46:	e004      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f48:	2302      	movs	r3, #2
 8000f4a:	e002      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	e000      	b.n	8000f52 <HAL_GPIO_Init+0x1ee>
 8000f50:	2300      	movs	r3, #0
 8000f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f54:	f002 0203 	and.w	r2, r2, #3
 8000f58:	0092      	lsls	r2, r2, #2
 8000f5a:	4093      	lsls	r3, r2
 8000f5c:	68fa      	ldr	r2, [r7, #12]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000f62:	492f      	ldr	r1, [pc, #188]	; (8001020 <HAL_GPIO_Init+0x2bc>)
 8000f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f66:	089b      	lsrs	r3, r3, #2
 8000f68:	3302      	adds	r3, #2
 8000f6a:	68fa      	ldr	r2, [r7, #12]
 8000f6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d006      	beq.n	8000f8a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000f7c:	4b2d      	ldr	r3, [pc, #180]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f7e:	689a      	ldr	r2, [r3, #8]
 8000f80:	492c      	ldr	r1, [pc, #176]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	4313      	orrs	r3, r2
 8000f86:	608b      	str	r3, [r1, #8]
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000f8a:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f8c:	689a      	ldr	r2, [r3, #8]
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	43db      	mvns	r3, r3
 8000f92:	4928      	ldr	r1, [pc, #160]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000f94:	4013      	ands	r3, r2
 8000f96:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d006      	beq.n	8000fb2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000fa4:	4b23      	ldr	r3, [pc, #140]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fa6:	68da      	ldr	r2, [r3, #12]
 8000fa8:	4922      	ldr	r1, [pc, #136]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000faa:	69bb      	ldr	r3, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	60cb      	str	r3, [r1, #12]
 8000fb0:	e006      	b.n	8000fc0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000fb2:	4b20      	ldr	r3, [pc, #128]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fb4:	68da      	ldr	r2, [r3, #12]
 8000fb6:	69bb      	ldr	r3, [r7, #24]
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	491e      	ldr	r1, [pc, #120]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d006      	beq.n	8000fda <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000fcc:	4b19      	ldr	r3, [pc, #100]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	4918      	ldr	r1, [pc, #96]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fd2:	69bb      	ldr	r3, [r7, #24]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	604b      	str	r3, [r1, #4]
 8000fd8:	e006      	b.n	8000fe8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000fda:	4b16      	ldr	r3, [pc, #88]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fdc:	685a      	ldr	r2, [r3, #4]
 8000fde:	69bb      	ldr	r3, [r7, #24]
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	4914      	ldr	r1, [pc, #80]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685b      	ldr	r3, [r3, #4]
 8000fec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d021      	beq.n	8001038 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	490e      	ldr	r1, [pc, #56]	; (8001034 <HAL_GPIO_Init+0x2d0>)
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	600b      	str	r3, [r1, #0]
 8001000:	e021      	b.n	8001046 <HAL_GPIO_Init+0x2e2>
 8001002:	bf00      	nop
 8001004:	10320000 	.word	0x10320000
 8001008:	10310000 	.word	0x10310000
 800100c:	10220000 	.word	0x10220000
 8001010:	10210000 	.word	0x10210000
 8001014:	10120000 	.word	0x10120000
 8001018:	10110000 	.word	0x10110000
 800101c:	40021000 	.word	0x40021000
 8001020:	40010000 	.word	0x40010000
 8001024:	40010800 	.word	0x40010800
 8001028:	40010c00 	.word	0x40010c00
 800102c:	40011000 	.word	0x40011000
 8001030:	40011400 	.word	0x40011400
 8001034:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001038:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <HAL_GPIO_Init+0x304>)
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	43db      	mvns	r3, r3
 8001040:	4909      	ldr	r1, [pc, #36]	; (8001068 <HAL_GPIO_Init+0x304>)
 8001042:	4013      	ands	r3, r2
 8001044:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001048:	3301      	adds	r3, #1
 800104a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001052:	fa22 f303 	lsr.w	r3, r2, r3
 8001056:	2b00      	cmp	r3, #0
 8001058:	f47f ae8e 	bne.w	8000d78 <HAL_GPIO_Init+0x14>
  }
}
 800105c:	bf00      	nop
 800105e:	bf00      	nop
 8001060:	372c      	adds	r7, #44	; 0x2c
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr
 8001068:	40010400 	.word	0x40010400

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	611a      	str	r2, [r3, #16]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d101      	bne.n	80010ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80010aa:	2301      	movs	r3, #1
 80010ac:	e272      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	f000 8087 	beq.w	80011ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80010bc:	4b92      	ldr	r3, [pc, #584]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 030c 	and.w	r3, r3, #12
 80010c4:	2b04      	cmp	r3, #4
 80010c6:	d00c      	beq.n	80010e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010c8:	4b8f      	ldr	r3, [pc, #572]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 030c 	and.w	r3, r3, #12
 80010d0:	2b08      	cmp	r3, #8
 80010d2:	d112      	bne.n	80010fa <HAL_RCC_OscConfig+0x5e>
 80010d4:	4b8c      	ldr	r3, [pc, #560]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010e0:	d10b      	bne.n	80010fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010e2:	4b89      	ldr	r3, [pc, #548]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d06c      	beq.n	80011c8 <HAL_RCC_OscConfig+0x12c>
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d168      	bne.n	80011c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	e24c      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001102:	d106      	bne.n	8001112 <HAL_RCC_OscConfig+0x76>
 8001104:	4b80      	ldr	r3, [pc, #512]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a7f      	ldr	r2, [pc, #508]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800110a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	e02e      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d10c      	bne.n	8001134 <HAL_RCC_OscConfig+0x98>
 800111a:	4b7b      	ldr	r3, [pc, #492]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	4a7a      	ldr	r2, [pc, #488]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001124:	6013      	str	r3, [r2, #0]
 8001126:	4b78      	ldr	r3, [pc, #480]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a77      	ldr	r2, [pc, #476]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800112c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001130:	6013      	str	r3, [r2, #0]
 8001132:	e01d      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800113c:	d10c      	bne.n	8001158 <HAL_RCC_OscConfig+0xbc>
 800113e:	4b72      	ldr	r3, [pc, #456]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a71      	ldr	r2, [pc, #452]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001144:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001148:	6013      	str	r3, [r2, #0]
 800114a:	4b6f      	ldr	r3, [pc, #444]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a6e      	ldr	r2, [pc, #440]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]
 8001156:	e00b      	b.n	8001170 <HAL_RCC_OscConfig+0xd4>
 8001158:	4b6b      	ldr	r3, [pc, #428]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a6a      	ldr	r2, [pc, #424]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b68      	ldr	r3, [pc, #416]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a67      	ldr	r2, [pc, #412]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800116a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800116e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d013      	beq.n	80011a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001178:	f7ff fc58 	bl	8000a2c <HAL_GetTick>
 800117c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117e:	e008      	b.n	8001192 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001180:	f7ff fc54 	bl	8000a2c <HAL_GetTick>
 8001184:	4602      	mov	r2, r0
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	1ad3      	subs	r3, r2, r3
 800118a:	2b64      	cmp	r3, #100	; 0x64
 800118c:	d901      	bls.n	8001192 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800118e:	2303      	movs	r3, #3
 8001190:	e200      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001192:	4b5d      	ldr	r3, [pc, #372]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	2b00      	cmp	r3, #0
 800119c:	d0f0      	beq.n	8001180 <HAL_RCC_OscConfig+0xe4>
 800119e:	e014      	b.n	80011ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a0:	f7ff fc44 	bl	8000a2c <HAL_GetTick>
 80011a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	e008      	b.n	80011ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80011a8:	f7ff fc40 	bl	8000a2c <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	2b64      	cmp	r3, #100	; 0x64
 80011b4:	d901      	bls.n	80011ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80011b6:	2303      	movs	r3, #3
 80011b8:	e1ec      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	4b53      	ldr	r3, [pc, #332]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f0      	bne.n	80011a8 <HAL_RCC_OscConfig+0x10c>
 80011c6:	e000      	b.n	80011ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d063      	beq.n	800129e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80011d6:	4b4c      	ldr	r3, [pc, #304]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f003 030c 	and.w	r3, r3, #12
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d00b      	beq.n	80011fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80011e2:	4b49      	ldr	r3, [pc, #292]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f003 030c 	and.w	r3, r3, #12
 80011ea:	2b08      	cmp	r3, #8
 80011ec:	d11c      	bne.n	8001228 <HAL_RCC_OscConfig+0x18c>
 80011ee:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d116      	bne.n	8001228 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011fa:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d005      	beq.n	8001212 <HAL_RCC_OscConfig+0x176>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	691b      	ldr	r3, [r3, #16]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e1c0      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001212:	4b3d      	ldr	r3, [pc, #244]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	695b      	ldr	r3, [r3, #20]
 800121e:	00db      	lsls	r3, r3, #3
 8001220:	4939      	ldr	r1, [pc, #228]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001222:	4313      	orrs	r3, r2
 8001224:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001226:	e03a      	b.n	800129e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	691b      	ldr	r3, [r3, #16]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d020      	beq.n	8001272 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001230:	4b36      	ldr	r3, [pc, #216]	; (800130c <HAL_RCC_OscConfig+0x270>)
 8001232:	2201      	movs	r2, #1
 8001234:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001236:	f7ff fbf9 	bl	8000a2c <HAL_GetTick>
 800123a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800123c:	e008      	b.n	8001250 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800123e:	f7ff fbf5 	bl	8000a2c <HAL_GetTick>
 8001242:	4602      	mov	r2, r0
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	2b02      	cmp	r3, #2
 800124a:	d901      	bls.n	8001250 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800124c:	2303      	movs	r3, #3
 800124e:	e1a1      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001250:	4b2d      	ldr	r3, [pc, #180]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0f0      	beq.n	800123e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800125c:	4b2a      	ldr	r3, [pc, #168]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	695b      	ldr	r3, [r3, #20]
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4927      	ldr	r1, [pc, #156]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 800126c:	4313      	orrs	r3, r2
 800126e:	600b      	str	r3, [r1, #0]
 8001270:	e015      	b.n	800129e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001272:	4b26      	ldr	r3, [pc, #152]	; (800130c <HAL_RCC_OscConfig+0x270>)
 8001274:	2200      	movs	r2, #0
 8001276:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001278:	f7ff fbd8 	bl	8000a2c <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fbd4 	bl	8000a2c <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e180      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f003 0308 	and.w	r3, r3, #8
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d03a      	beq.n	8001320 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	699b      	ldr	r3, [r3, #24]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d019      	beq.n	80012e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012b2:	4b17      	ldr	r3, [pc, #92]	; (8001310 <HAL_RCC_OscConfig+0x274>)
 80012b4:	2201      	movs	r2, #1
 80012b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fbb8 	bl	8000a2c <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012be:	e008      	b.n	80012d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c0:	f7ff fbb4 	bl	8000a2c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d901      	bls.n	80012d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80012ce:	2303      	movs	r3, #3
 80012d0:	e160      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d2:	4b0d      	ldr	r3, [pc, #52]	; (8001308 <HAL_RCC_OscConfig+0x26c>)
 80012d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d0f0      	beq.n	80012c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80012de:	2001      	movs	r0, #1
 80012e0:	f000 fafe 	bl	80018e0 <RCC_Delay>
 80012e4:	e01c      	b.n	8001320 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_RCC_OscConfig+0x274>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ec:	f7ff fb9e 	bl	8000a2c <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f2:	e00f      	b.n	8001314 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012f4:	f7ff fb9a 	bl	8000a2c <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b02      	cmp	r3, #2
 8001300:	d908      	bls.n	8001314 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e146      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
 8001306:	bf00      	nop
 8001308:	40021000 	.word	0x40021000
 800130c:	42420000 	.word	0x42420000
 8001310:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001314:	4b92      	ldr	r3, [pc, #584]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001318:	f003 0302 	and.w	r3, r3, #2
 800131c:	2b00      	cmp	r3, #0
 800131e:	d1e9      	bne.n	80012f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 0304 	and.w	r3, r3, #4
 8001328:	2b00      	cmp	r3, #0
 800132a:	f000 80a6 	beq.w	800147a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800132e:	2300      	movs	r3, #0
 8001330:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001332:	4b8b      	ldr	r3, [pc, #556]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001334:	69db      	ldr	r3, [r3, #28]
 8001336:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d10d      	bne.n	800135a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800133e:	4b88      	ldr	r3, [pc, #544]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001340:	69db      	ldr	r3, [r3, #28]
 8001342:	4a87      	ldr	r2, [pc, #540]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001348:	61d3      	str	r3, [r2, #28]
 800134a:	4b85      	ldr	r3, [pc, #532]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	69db      	ldr	r3, [r3, #28]
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800135a:	4b82      	ldr	r3, [pc, #520]	; (8001564 <HAL_RCC_OscConfig+0x4c8>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d118      	bne.n	8001398 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001366:	4b7f      	ldr	r3, [pc, #508]	; (8001564 <HAL_RCC_OscConfig+0x4c8>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4a7e      	ldr	r2, [pc, #504]	; (8001564 <HAL_RCC_OscConfig+0x4c8>)
 800136c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001370:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001372:	f7ff fb5b 	bl	8000a2c <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fb57 	bl	8000a2c <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e103      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b75      	ldr	r3, [pc, #468]	; (8001564 <HAL_RCC_OscConfig+0x4c8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d106      	bne.n	80013ae <HAL_RCC_OscConfig+0x312>
 80013a0:	4b6f      	ldr	r3, [pc, #444]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013a2:	6a1b      	ldr	r3, [r3, #32]
 80013a4:	4a6e      	ldr	r2, [pc, #440]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013a6:	f043 0301 	orr.w	r3, r3, #1
 80013aa:	6213      	str	r3, [r2, #32]
 80013ac:	e02d      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d10c      	bne.n	80013d0 <HAL_RCC_OscConfig+0x334>
 80013b6:	4b6a      	ldr	r3, [pc, #424]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013b8:	6a1b      	ldr	r3, [r3, #32]
 80013ba:	4a69      	ldr	r2, [pc, #420]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013bc:	f023 0301 	bic.w	r3, r3, #1
 80013c0:	6213      	str	r3, [r2, #32]
 80013c2:	4b67      	ldr	r3, [pc, #412]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	4a66      	ldr	r2, [pc, #408]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	f023 0304 	bic.w	r3, r3, #4
 80013cc:	6213      	str	r3, [r2, #32]
 80013ce:	e01c      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d10c      	bne.n	80013f2 <HAL_RCC_OscConfig+0x356>
 80013d8:	4b61      	ldr	r3, [pc, #388]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013da:	6a1b      	ldr	r3, [r3, #32]
 80013dc:	4a60      	ldr	r2, [pc, #384]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	f043 0304 	orr.w	r3, r3, #4
 80013e2:	6213      	str	r3, [r2, #32]
 80013e4:	4b5e      	ldr	r3, [pc, #376]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013e6:	6a1b      	ldr	r3, [r3, #32]
 80013e8:	4a5d      	ldr	r2, [pc, #372]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013ea:	f043 0301 	orr.w	r3, r3, #1
 80013ee:	6213      	str	r3, [r2, #32]
 80013f0:	e00b      	b.n	800140a <HAL_RCC_OscConfig+0x36e>
 80013f2:	4b5b      	ldr	r3, [pc, #364]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013f4:	6a1b      	ldr	r3, [r3, #32]
 80013f6:	4a5a      	ldr	r2, [pc, #360]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80013f8:	f023 0301 	bic.w	r3, r3, #1
 80013fc:	6213      	str	r3, [r2, #32]
 80013fe:	4b58      	ldr	r3, [pc, #352]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	4a57      	ldr	r2, [pc, #348]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001404:	f023 0304 	bic.w	r3, r3, #4
 8001408:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	68db      	ldr	r3, [r3, #12]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d015      	beq.n	800143e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001412:	f7ff fb0b 	bl	8000a2c <HAL_GetTick>
 8001416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001418:	e00a      	b.n	8001430 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800141a:	f7ff fb07 	bl	8000a2c <HAL_GetTick>
 800141e:	4602      	mov	r2, r0
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	f241 3288 	movw	r2, #5000	; 0x1388
 8001428:	4293      	cmp	r3, r2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e0b1      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001430:	4b4b      	ldr	r3, [pc, #300]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001432:	6a1b      	ldr	r3, [r3, #32]
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0ee      	beq.n	800141a <HAL_RCC_OscConfig+0x37e>
 800143c:	e014      	b.n	8001468 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143e:	f7ff faf5 	bl	8000a2c <HAL_GetTick>
 8001442:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001444:	e00a      	b.n	800145c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001446:	f7ff faf1 	bl	8000a2c <HAL_GetTick>
 800144a:	4602      	mov	r2, r0
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	1ad3      	subs	r3, r2, r3
 8001450:	f241 3288 	movw	r2, #5000	; 0x1388
 8001454:	4293      	cmp	r3, r2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e09b      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800145c:	4b40      	ldr	r3, [pc, #256]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 800145e:	6a1b      	ldr	r3, [r3, #32]
 8001460:	f003 0302 	and.w	r3, r3, #2
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1ee      	bne.n	8001446 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001468:	7dfb      	ldrb	r3, [r7, #23]
 800146a:	2b01      	cmp	r3, #1
 800146c:	d105      	bne.n	800147a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800146e:	4b3c      	ldr	r3, [pc, #240]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001470:	69db      	ldr	r3, [r3, #28]
 8001472:	4a3b      	ldr	r2, [pc, #236]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001474:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001478:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	69db      	ldr	r3, [r3, #28]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 8087 	beq.w	8001592 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001484:	4b36      	ldr	r3, [pc, #216]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 030c 	and.w	r3, r3, #12
 800148c:	2b08      	cmp	r3, #8
 800148e:	d061      	beq.n	8001554 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	69db      	ldr	r3, [r3, #28]
 8001494:	2b02      	cmp	r3, #2
 8001496:	d146      	bne.n	8001526 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001498:	4b33      	ldr	r3, [pc, #204]	; (8001568 <HAL_RCC_OscConfig+0x4cc>)
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fac5 	bl	8000a2c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff fac1 	bl	8000a2c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e06d      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014b8:	4b29      	ldr	r3, [pc, #164]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6a1b      	ldr	r3, [r3, #32]
 80014c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014cc:	d108      	bne.n	80014e0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80014ce:	4b24      	ldr	r3, [pc, #144]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	689b      	ldr	r3, [r3, #8]
 80014da:	4921      	ldr	r1, [pc, #132]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80014dc:	4313      	orrs	r3, r2
 80014de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80014e0:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a19      	ldr	r1, [r3, #32]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f0:	430b      	orrs	r3, r1
 80014f2:	491b      	ldr	r1, [pc, #108]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 80014f4:	4313      	orrs	r3, r2
 80014f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <HAL_RCC_OscConfig+0x4cc>)
 80014fa:	2201      	movs	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fa95 	bl	8000a2c <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001506:	f7ff fa91 	bl	8000a2c <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e03d      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x46a>
 8001524:	e035      	b.n	8001592 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001526:	4b10      	ldr	r3, [pc, #64]	; (8001568 <HAL_RCC_OscConfig+0x4cc>)
 8001528:	2200      	movs	r2, #0
 800152a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800152c:	f7ff fa7e 	bl	8000a2c <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001532:	e008      	b.n	8001546 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001534:	f7ff fa7a 	bl	8000a2c <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	2b02      	cmp	r3, #2
 8001540:	d901      	bls.n	8001546 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001542:	2303      	movs	r3, #3
 8001544:	e026      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001546:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_RCC_OscConfig+0x4c4>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d1f0      	bne.n	8001534 <HAL_RCC_OscConfig+0x498>
 8001552:	e01e      	b.n	8001592 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	2b01      	cmp	r3, #1
 800155a:	d107      	bne.n	800156c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	e019      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
 8001560:	40021000 	.word	0x40021000
 8001564:	40007000 	.word	0x40007000
 8001568:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_RCC_OscConfig+0x500>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a1b      	ldr	r3, [r3, #32]
 800157c:	429a      	cmp	r2, r3
 800157e:	d106      	bne.n	800158e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800158a:	429a      	cmp	r2, r3
 800158c:	d001      	beq.n	8001592 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e000      	b.n	8001594 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001592:	2300      	movs	r3, #0
}
 8001594:	4618      	mov	r0, r3
 8001596:	3718      	adds	r7, #24
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40021000 	.word	0x40021000

080015a0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b084      	sub	sp, #16
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d101      	bne.n	80015b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e0d0      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b4:	4b6a      	ldr	r3, [pc, #424]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0307 	and.w	r3, r3, #7
 80015bc:	683a      	ldr	r2, [r7, #0]
 80015be:	429a      	cmp	r2, r3
 80015c0:	d910      	bls.n	80015e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c2:	4b67      	ldr	r3, [pc, #412]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 0207 	bic.w	r2, r3, #7
 80015ca:	4965      	ldr	r1, [pc, #404]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015d2:	4b63      	ldr	r3, [pc, #396]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	683a      	ldr	r2, [r7, #0]
 80015dc:	429a      	cmp	r2, r3
 80015de:	d001      	beq.n	80015e4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80015e0:	2301      	movs	r3, #1
 80015e2:	e0b8      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d020      	beq.n	8001632 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f003 0304 	and.w	r3, r3, #4
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015fc:	4b59      	ldr	r3, [pc, #356]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	4a58      	ldr	r2, [pc, #352]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001602:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001606:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0308 	and.w	r3, r3, #8
 8001610:	2b00      	cmp	r3, #0
 8001612:	d005      	beq.n	8001620 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001614:	4b53      	ldr	r3, [pc, #332]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	4a52      	ldr	r2, [pc, #328]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800161a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800161e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001620:	4b50      	ldr	r3, [pc, #320]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	494d      	ldr	r1, [pc, #308]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800162e:	4313      	orrs	r3, r2
 8001630:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d040      	beq.n	80016c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d107      	bne.n	8001656 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001646:	4b47      	ldr	r3, [pc, #284]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d115      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
 8001654:	e07f      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b02      	cmp	r3, #2
 800165c:	d107      	bne.n	800166e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165e:	4b41      	ldr	r3, [pc, #260]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d109      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e073      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800166e:	4b3d      	ldr	r3, [pc, #244]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d101      	bne.n	800167e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e06b      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800167e:	4b39      	ldr	r3, [pc, #228]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001680:	685b      	ldr	r3, [r3, #4]
 8001682:	f023 0203 	bic.w	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	4936      	ldr	r1, [pc, #216]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800168c:	4313      	orrs	r3, r2
 800168e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001690:	f7ff f9cc 	bl	8000a2c <HAL_GetTick>
 8001694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001696:	e00a      	b.n	80016ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001698:	f7ff f9c8 	bl	8000a2c <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e053      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016ae:	4b2d      	ldr	r3, [pc, #180]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f003 020c 	and.w	r2, r3, #12
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	429a      	cmp	r2, r3
 80016be:	d1eb      	bne.n	8001698 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c0:	4b27      	ldr	r3, [pc, #156]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	683a      	ldr	r2, [r7, #0]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	d210      	bcs.n	80016f0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ce:	4b24      	ldr	r3, [pc, #144]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f023 0207 	bic.w	r2, r3, #7
 80016d6:	4922      	ldr	r1, [pc, #136]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	4313      	orrs	r3, r2
 80016dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016de:	4b20      	ldr	r3, [pc, #128]	; (8001760 <HAL_RCC_ClockConfig+0x1c0>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0307 	and.w	r3, r3, #7
 80016e6:	683a      	ldr	r2, [r7, #0]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d001      	beq.n	80016f0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	e032      	b.n	8001756 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f003 0304 	and.w	r3, r3, #4
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016fc:	4b19      	ldr	r3, [pc, #100]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	68db      	ldr	r3, [r3, #12]
 8001708:	4916      	ldr	r1, [pc, #88]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800170a:	4313      	orrs	r3, r2
 800170c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f003 0308 	and.w	r3, r3, #8
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	691b      	ldr	r3, [r3, #16]
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	490e      	ldr	r1, [pc, #56]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 800172a:	4313      	orrs	r3, r2
 800172c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172e:	f000 f821 	bl	8001774 <HAL_RCC_GetSysClockFreq>
 8001732:	4602      	mov	r2, r0
 8001734:	4b0b      	ldr	r3, [pc, #44]	; (8001764 <HAL_RCC_ClockConfig+0x1c4>)
 8001736:	685b      	ldr	r3, [r3, #4]
 8001738:	091b      	lsrs	r3, r3, #4
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	490a      	ldr	r1, [pc, #40]	; (8001768 <HAL_RCC_ClockConfig+0x1c8>)
 8001740:	5ccb      	ldrb	r3, [r1, r3]
 8001742:	fa22 f303 	lsr.w	r3, r2, r3
 8001746:	4a09      	ldr	r2, [pc, #36]	; (800176c <HAL_RCC_ClockConfig+0x1cc>)
 8001748:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800174a:	4b09      	ldr	r3, [pc, #36]	; (8001770 <HAL_RCC_ClockConfig+0x1d0>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff f832 	bl	80007b8 <HAL_InitTick>

  return HAL_OK;
 8001754:	2300      	movs	r3, #0
}
 8001756:	4618      	mov	r0, r3
 8001758:	3710      	adds	r7, #16
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40022000 	.word	0x40022000
 8001764:	40021000 	.word	0x40021000
 8001768:	08005070 	.word	0x08005070
 800176c:	20000000 	.word	0x20000000
 8001770:	20000004 	.word	0x20000004

08001774 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001774:	b480      	push	{r7}
 8001776:	b087      	sub	sp, #28
 8001778:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	2300      	movs	r3, #0
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800178e:	4b1e      	ldr	r3, [pc, #120]	; (8001808 <HAL_RCC_GetSysClockFreq+0x94>)
 8001790:	685b      	ldr	r3, [r3, #4]
 8001792:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f003 030c 	and.w	r3, r3, #12
 800179a:	2b04      	cmp	r3, #4
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x30>
 800179e:	2b08      	cmp	r3, #8
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x36>
 80017a2:	e027      	b.n	80017f4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017a4:	4b19      	ldr	r3, [pc, #100]	; (800180c <HAL_RCC_GetSysClockFreq+0x98>)
 80017a6:	613b      	str	r3, [r7, #16]
      break;
 80017a8:	e027      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	0c9b      	lsrs	r3, r3, #18
 80017ae:	f003 030f 	and.w	r3, r3, #15
 80017b2:	4a17      	ldr	r2, [pc, #92]	; (8001810 <HAL_RCC_GetSysClockFreq+0x9c>)
 80017b4:	5cd3      	ldrb	r3, [r2, r3]
 80017b6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d010      	beq.n	80017e4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <HAL_RCC_GetSysClockFreq+0x94>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	0c5b      	lsrs	r3, r3, #17
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	4a11      	ldr	r2, [pc, #68]	; (8001814 <HAL_RCC_GetSysClockFreq+0xa0>)
 80017ce:	5cd3      	ldrb	r3, [r2, r3]
 80017d0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a0d      	ldr	r2, [pc, #52]	; (800180c <HAL_RCC_GetSysClockFreq+0x98>)
 80017d6:	fb03 f202 	mul.w	r2, r3, r2
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e0:	617b      	str	r3, [r7, #20]
 80017e2:	e004      	b.n	80017ee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	4a0c      	ldr	r2, [pc, #48]	; (8001818 <HAL_RCC_GetSysClockFreq+0xa4>)
 80017e8:	fb02 f303 	mul.w	r3, r2, r3
 80017ec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	613b      	str	r3, [r7, #16]
      break;
 80017f2:	e002      	b.n	80017fa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80017f4:	4b05      	ldr	r3, [pc, #20]	; (800180c <HAL_RCC_GetSysClockFreq+0x98>)
 80017f6:	613b      	str	r3, [r7, #16]
      break;
 80017f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017fa:	693b      	ldr	r3, [r7, #16]
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	371c      	adds	r7, #28
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	007a1200 	.word	0x007a1200
 8001810:	08005088 	.word	0x08005088
 8001814:	08005098 	.word	0x08005098
 8001818:	003d0900 	.word	0x003d0900

0800181c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001820:	4b02      	ldr	r3, [pc, #8]	; (800182c <HAL_RCC_GetHCLKFreq+0x10>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	bc80      	pop	{r7}
 800182a:	4770      	bx	lr
 800182c:	20000000 	.word	0x20000000

08001830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001834:	f7ff fff2 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001838:	4602      	mov	r2, r0
 800183a:	4b05      	ldr	r3, [pc, #20]	; (8001850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	0a1b      	lsrs	r3, r3, #8
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	4903      	ldr	r1, [pc, #12]	; (8001854 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001846:	5ccb      	ldrb	r3, [r1, r3]
 8001848:	fa22 f303 	lsr.w	r3, r2, r3
}
 800184c:	4618      	mov	r0, r3
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021000 	.word	0x40021000
 8001854:	08005080 	.word	0x08005080

08001858 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800185c:	f7ff ffde 	bl	800181c <HAL_RCC_GetHCLKFreq>
 8001860:	4602      	mov	r2, r0
 8001862:	4b05      	ldr	r3, [pc, #20]	; (8001878 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	0adb      	lsrs	r3, r3, #11
 8001868:	f003 0307 	and.w	r3, r3, #7
 800186c:	4903      	ldr	r1, [pc, #12]	; (800187c <HAL_RCC_GetPCLK2Freq+0x24>)
 800186e:	5ccb      	ldrb	r3, [r1, r3]
 8001870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001874:	4618      	mov	r0, r3
 8001876:	bd80      	pop	{r7, pc}
 8001878:	40021000 	.word	0x40021000
 800187c:	08005080 	.word	0x08005080

08001880 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001880:	b480      	push	{r7}
 8001882:	b083      	sub	sp, #12
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
 8001888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	220f      	movs	r2, #15
 800188e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001890:	4b11      	ldr	r3, [pc, #68]	; (80018d8 <HAL_RCC_GetClockConfig+0x58>)
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	f003 0203 	and.w	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <HAL_RCC_GetClockConfig+0x58>)
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_GetClockConfig+0x58>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80018b4:	4b08      	ldr	r3, [pc, #32]	; (80018d8 <HAL_RCC_GetClockConfig+0x58>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	08db      	lsrs	r3, r3, #3
 80018ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018c2:	4b06      	ldr	r3, [pc, #24]	; (80018dc <HAL_RCC_GetClockConfig+0x5c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0207 	and.w	r2, r3, #7
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 80018ce:	bf00      	nop
 80018d0:	370c      	adds	r7, #12
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bc80      	pop	{r7}
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000
 80018dc:	40022000 	.word	0x40022000

080018e0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b085      	sub	sp, #20
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80018e8:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <RCC_Delay+0x34>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a0a      	ldr	r2, [pc, #40]	; (8001918 <RCC_Delay+0x38>)
 80018ee:	fba2 2303 	umull	r2, r3, r2, r3
 80018f2:	0a5b      	lsrs	r3, r3, #9
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	fb02 f303 	mul.w	r3, r2, r3
 80018fa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80018fc:	bf00      	nop
  }
  while (Delay --);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	1e5a      	subs	r2, r3, #1
 8001902:	60fa      	str	r2, [r7, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d1f9      	bne.n	80018fc <RCC_Delay+0x1c>
}
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr
 8001914:	20000000 	.word	0x20000000
 8001918:	10624dd3 	.word	0x10624dd3

0800191c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e041      	b.n	80019b2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f000 f839 	bl	80019ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2202      	movs	r2, #2
 800194c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	3304      	adds	r3, #4
 8001958:	4619      	mov	r1, r3
 800195a:	4610      	mov	r0, r2
 800195c:	f000 f9b4 	bl	8001cc8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	2201      	movs	r2, #1
 8001974:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2201      	movs	r2, #1
 800198c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2201      	movs	r2, #1
 800199c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80019ba:	b480      	push	{r7}
 80019bc:	b083      	sub	sp, #12
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bc80      	pop	{r7}
 80019ca:	4770      	bx	lr

080019cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019da:	b2db      	uxtb	r3, r3
 80019dc:	2b01      	cmp	r3, #1
 80019de:	d001      	beq.n	80019e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e03a      	b.n	8001a5a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2202      	movs	r2, #2
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	68da      	ldr	r2, [r3, #12]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0201 	orr.w	r2, r2, #1
 80019fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a18      	ldr	r2, [pc, #96]	; (8001a64 <HAL_TIM_Base_Start_IT+0x98>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d00e      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x58>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a0e:	d009      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x58>
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a14      	ldr	r2, [pc, #80]	; (8001a68 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d004      	beq.n	8001a24 <HAL_TIM_Base_Start_IT+0x58>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <HAL_TIM_Base_Start_IT+0xa0>)
 8001a20:	4293      	cmp	r3, r2
 8001a22:	d111      	bne.n	8001a48 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2b06      	cmp	r3, #6
 8001a34:	d010      	beq.n	8001a58 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a46:	e007      	b.n	8001a58 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	681a      	ldr	r2, [r3, #0]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f042 0201 	orr.w	r2, r2, #1
 8001a56:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bc80      	pop	{r7}
 8001a62:	4770      	bx	lr
 8001a64:	40012c00 	.word	0x40012c00
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40000800 	.word	0x40000800

08001a70 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	691b      	ldr	r3, [r3, #16]
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d122      	bne.n	8001acc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d11b      	bne.n	8001acc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f06f 0202 	mvn.w	r2, #2
 8001a9c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2201      	movs	r2, #1
 8001aa2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d003      	beq.n	8001aba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	f000 f8ed 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
 8001ab8:	e005      	b.n	8001ac6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aba:	6878      	ldr	r0, [r7, #4]
 8001abc:	f000 f8e0 	bl	8001c80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f000 f8ef 	bl	8001ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2200      	movs	r2, #0
 8001aca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	f003 0304 	and.w	r3, r3, #4
 8001ad6:	2b04      	cmp	r3, #4
 8001ad8:	d122      	bne.n	8001b20 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	f003 0304 	and.w	r3, r3, #4
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d11b      	bne.n	8001b20 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f06f 0204 	mvn.w	r2, #4
 8001af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2202      	movs	r2, #2
 8001af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f000 f8c3 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
 8001b0c:	e005      	b.n	8001b1a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f8b6 	bl	8001c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b14:	6878      	ldr	r0, [r7, #4]
 8001b16:	f000 f8c5 	bl	8001ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d122      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	f003 0308 	and.w	r3, r3, #8
 8001b38:	2b08      	cmp	r3, #8
 8001b3a:	d11b      	bne.n	8001b74 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f06f 0208 	mvn.w	r2, #8
 8001b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	f003 0303 	and.w	r3, r3, #3
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d003      	beq.n	8001b62 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b5a:	6878      	ldr	r0, [r7, #4]
 8001b5c:	f000 f899 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
 8001b60:	e005      	b.n	8001b6e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b62:	6878      	ldr	r0, [r7, #4]
 8001b64:	f000 f88c 	bl	8001c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b68:	6878      	ldr	r0, [r7, #4]
 8001b6a:	f000 f89b 	bl	8001ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	691b      	ldr	r3, [r3, #16]
 8001b7a:	f003 0310 	and.w	r3, r3, #16
 8001b7e:	2b10      	cmp	r3, #16
 8001b80:	d122      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b10      	cmp	r3, #16
 8001b8e:	d11b      	bne.n	8001bc8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f06f 0210 	mvn.w	r2, #16
 8001b98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2208      	movs	r2, #8
 8001b9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d003      	beq.n	8001bb6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f86f 	bl	8001c92 <HAL_TIM_IC_CaptureCallback>
 8001bb4:	e005      	b.n	8001bc2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f862 	bl	8001c80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 f871 	bl	8001ca4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0301 	and.w	r3, r3, #1
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d10e      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68db      	ldr	r3, [r3, #12]
 8001bdc:	f003 0301 	and.w	r3, r3, #1
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d107      	bne.n	8001bf4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f06f 0201 	mvn.w	r2, #1
 8001bec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7fe fccc 	bl	800058c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	691b      	ldr	r3, [r3, #16]
 8001bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bfe:	2b80      	cmp	r3, #128	; 0x80
 8001c00:	d10e      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0c:	2b80      	cmp	r3, #128	; 0x80
 8001c0e:	d107      	bne.n	8001c20 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 f8bf 	bl	8001d9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	691b      	ldr	r3, [r3, #16]
 8001c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2a:	2b40      	cmp	r3, #64	; 0x40
 8001c2c:	d10e      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	68db      	ldr	r3, [r3, #12]
 8001c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c38:	2b40      	cmp	r3, #64	; 0x40
 8001c3a:	d107      	bne.n	8001c4c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c46:	6878      	ldr	r0, [r7, #4]
 8001c48:	f000 f835 	bl	8001cb6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	691b      	ldr	r3, [r3, #16]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b20      	cmp	r3, #32
 8001c58:	d10e      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	f003 0320 	and.w	r3, r3, #32
 8001c64:	2b20      	cmp	r3, #32
 8001c66:	d107      	bne.n	8001c78 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f06f 0220 	mvn.w	r2, #32
 8001c70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 f88a 	bl	8001d8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	bc80      	pop	{r7}
 8001c90:	4770      	bx	lr

08001c92 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b083      	sub	sp, #12
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cac:	bf00      	nop
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bc80      	pop	{r7}
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b085      	sub	sp, #20
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a29      	ldr	r2, [pc, #164]	; (8001d80 <TIM_Base_SetConfig+0xb8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d00b      	beq.n	8001cf8 <TIM_Base_SetConfig+0x30>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce6:	d007      	beq.n	8001cf8 <TIM_Base_SetConfig+0x30>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a26      	ldr	r2, [pc, #152]	; (8001d84 <TIM_Base_SetConfig+0xbc>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d003      	beq.n	8001cf8 <TIM_Base_SetConfig+0x30>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a25      	ldr	r2, [pc, #148]	; (8001d88 <TIM_Base_SetConfig+0xc0>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d108      	bne.n	8001d0a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cfe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a1c      	ldr	r2, [pc, #112]	; (8001d80 <TIM_Base_SetConfig+0xb8>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d00b      	beq.n	8001d2a <TIM_Base_SetConfig+0x62>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d18:	d007      	beq.n	8001d2a <TIM_Base_SetConfig+0x62>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a19      	ldr	r2, [pc, #100]	; (8001d84 <TIM_Base_SetConfig+0xbc>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d003      	beq.n	8001d2a <TIM_Base_SetConfig+0x62>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a18      	ldr	r2, [pc, #96]	; (8001d88 <TIM_Base_SetConfig+0xc0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d108      	bne.n	8001d3c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	68db      	ldr	r3, [r3, #12]
 8001d36:	68fa      	ldr	r2, [r7, #12]
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d42:	683b      	ldr	r3, [r7, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	68fa      	ldr	r2, [r7, #12]
 8001d4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689a      	ldr	r2, [r3, #8]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	681a      	ldr	r2, [r3, #0]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	4a07      	ldr	r2, [pc, #28]	; (8001d80 <TIM_Base_SetConfig+0xb8>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d103      	bne.n	8001d70 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	615a      	str	r2, [r3, #20]
}
 8001d76:	bf00      	nop
 8001d78:	3714      	adds	r7, #20
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40000400 	.word	0x40000400
 8001d88:	40000800 	.word	0x40000800

08001d8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001d94:	bf00      	nop
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bc80      	pop	{r7}
 8001d9c:	4770      	bx	lr

08001d9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001d9e:	b480      	push	{r7}
 8001da0:	b083      	sub	sp, #12
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bc80      	pop	{r7}
 8001dae:	4770      	bx	lr

08001db0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d101      	bne.n	8001dc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e042      	b.n	8001e48 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d106      	bne.n	8001ddc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7fe fc1e 	bl	8000618 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2224      	movs	r2, #36	; 0x24
 8001de0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001df2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f000 fdc5 	bl	8002984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e08:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	695a      	ldr	r2, [r3, #20]
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e18:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001e28:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2220      	movs	r2, #32
 8001e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2200      	movs	r2, #0
 8001e44:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001e46:	2300      	movs	r3, #0
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}

08001e50 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b08a      	sub	sp, #40	; 0x28
 8001e54:	af02      	add	r7, sp, #8
 8001e56:	60f8      	str	r0, [r7, #12]
 8001e58:	60b9      	str	r1, [r7, #8]
 8001e5a:	603b      	str	r3, [r7, #0]
 8001e5c:	4613      	mov	r3, r2
 8001e5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e60:	2300      	movs	r3, #0
 8001e62:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e6a:	b2db      	uxtb	r3, r3
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d16d      	bne.n	8001f4c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d002      	beq.n	8001e7c <HAL_UART_Transmit+0x2c>
 8001e76:	88fb      	ldrh	r3, [r7, #6]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e066      	b.n	8001f4e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2200      	movs	r2, #0
 8001e84:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2221      	movs	r2, #33	; 0x21
 8001e8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e8e:	f7fe fdcd 	bl	8000a2c <HAL_GetTick>
 8001e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	88fa      	ldrh	r2, [r7, #6]
 8001e98:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	88fa      	ldrh	r2, [r7, #6]
 8001e9e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ea8:	d108      	bne.n	8001ebc <HAL_UART_Transmit+0x6c>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	691b      	ldr	r3, [r3, #16]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d104      	bne.n	8001ebc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	61bb      	str	r3, [r7, #24]
 8001eba:	e003      	b.n	8001ec4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001ec4:	e02a      	b.n	8001f1c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	2200      	movs	r2, #0
 8001ece:	2180      	movs	r1, #128	; 0x80
 8001ed0:	68f8      	ldr	r0, [r7, #12]
 8001ed2:	f000 fb14 	bl	80024fe <UART_WaitOnFlagUntilTimeout>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8001edc:	2303      	movs	r3, #3
 8001ede:	e036      	b.n	8001f4e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8001ee0:	69fb      	ldr	r3, [r7, #28]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d10b      	bne.n	8001efe <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	881b      	ldrh	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	3302      	adds	r3, #2
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e007      	b.n	8001f0e <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	781a      	ldrb	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f12:	b29b      	uxth	r3, r3
 8001f14:	3b01      	subs	r3, #1
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1cf      	bne.n	8001ec6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2140      	movs	r1, #64	; 0x40
 8001f30:	68f8      	ldr	r0, [r7, #12]
 8001f32:	f000 fae4 	bl	80024fe <UART_WaitOnFlagUntilTimeout>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8001f3c:	2303      	movs	r3, #3
 8001f3e:	e006      	b.n	8001f4e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2220      	movs	r2, #32
 8001f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	e000      	b.n	8001f4e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8001f4c:	2302      	movs	r3, #2
  }
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3720      	adds	r7, #32
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	60f8      	str	r0, [r7, #12]
 8001f5e:	60b9      	str	r1, [r7, #8]
 8001f60:	4613      	mov	r3, r2
 8001f62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	2b20      	cmp	r3, #32
 8001f6e:	d112      	bne.n	8001f96 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <HAL_UART_Receive_IT+0x26>
 8001f76:	88fb      	ldrh	r3, [r7, #6]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d101      	bne.n	8001f80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e00b      	b.n	8001f98 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	2200      	movs	r2, #0
 8001f84:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001f86:	88fb      	ldrh	r3, [r7, #6]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	68f8      	ldr	r0, [r7, #12]
 8001f8e:	f000 fb24 	bl	80025da <UART_Start_Receive_IT>
 8001f92:	4603      	mov	r3, r0
 8001f94:	e000      	b.n	8001f98 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001f96:	2302      	movs	r3, #2
  }
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	3710      	adds	r7, #16
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}

08001fa0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b0ba      	sub	sp, #232	; 0xe8
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fd6:	f003 030f 	and.w	r3, r3, #15
 8001fda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8001fde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10f      	bne.n	8002006 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d009      	beq.n	8002006 <HAL_UART_IRQHandler+0x66>
 8001ff2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8001ff6:	f003 0320 	and.w	r3, r3, #32
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d003      	beq.n	8002006 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ffe:	6878      	ldr	r0, [r7, #4]
 8002000:	f000 fc01 	bl	8002806 <UART_Receive_IT>
      return;
 8002004:	e25b      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800200a:	2b00      	cmp	r3, #0
 800200c:	f000 80de 	beq.w	80021cc <HAL_UART_IRQHandler+0x22c>
 8002010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002014:	f003 0301 	and.w	r3, r3, #1
 8002018:	2b00      	cmp	r3, #0
 800201a:	d106      	bne.n	800202a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800201c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002020:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002024:	2b00      	cmp	r3, #0
 8002026:	f000 80d1 	beq.w	80021cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800202a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800202e:	f003 0301 	and.w	r3, r3, #1
 8002032:	2b00      	cmp	r3, #0
 8002034:	d00b      	beq.n	800204e <HAL_UART_IRQHandler+0xae>
 8002036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800203a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203e:	2b00      	cmp	r3, #0
 8002040:	d005      	beq.n	800204e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	f043 0201 	orr.w	r2, r3, #1
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800204e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002052:	f003 0304 	and.w	r3, r3, #4
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_UART_IRQHandler+0xd2>
 800205a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d005      	beq.n	8002072 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	f043 0202 	orr.w	r2, r3, #2
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d00b      	beq.n	8002096 <HAL_UART_IRQHandler+0xf6>
 800207e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	2b00      	cmp	r3, #0
 8002088:	d005      	beq.n	8002096 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208e:	f043 0204 	orr.w	r2, r3, #4
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800209a:	f003 0308 	and.w	r3, r3, #8
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d011      	beq.n	80020c6 <HAL_UART_IRQHandler+0x126>
 80020a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020a6:	f003 0320 	and.w	r3, r3, #32
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d105      	bne.n	80020ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80020ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d005      	beq.n	80020c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020be:	f043 0208 	orr.w	r2, r3, #8
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	f000 81f2 	beq.w	80024b4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80020d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80020d4:	f003 0320 	and.w	r3, r3, #32
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_UART_IRQHandler+0x14e>
 80020dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80020e0:	f003 0320 	and.w	r3, r3, #32
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d002      	beq.n	80020ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80020e8:	6878      	ldr	r0, [r7, #4]
 80020ea:	f000 fb8c 	bl	8002806 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	bf14      	ite	ne
 80020fc:	2301      	movne	r3, #1
 80020fe:	2300      	moveq	r3, #0
 8002100:	b2db      	uxtb	r3, r3
 8002102:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210a:	f003 0308 	and.w	r3, r3, #8
 800210e:	2b00      	cmp	r3, #0
 8002110:	d103      	bne.n	800211a <HAL_UART_IRQHandler+0x17a>
 8002112:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002116:	2b00      	cmp	r3, #0
 8002118:	d04f      	beq.n	80021ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800211a:	6878      	ldr	r0, [r7, #4]
 800211c:	f000 fa96 	bl	800264c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800212a:	2b00      	cmp	r3, #0
 800212c:	d041      	beq.n	80021b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	3314      	adds	r3, #20
 8002134:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002138:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800213c:	e853 3f00 	ldrex	r3, [r3]
 8002140:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002144:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002148:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800214c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3314      	adds	r3, #20
 8002156:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800215a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800215e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002162:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002166:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800216a:	e841 2300 	strex	r3, r2, [r1]
 800216e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002172:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002176:	2b00      	cmp	r3, #0
 8002178:	d1d9      	bne.n	800212e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217e:	2b00      	cmp	r3, #0
 8002180:	d013      	beq.n	80021aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	4a7e      	ldr	r2, [pc, #504]	; (8002380 <HAL_UART_IRQHandler+0x3e0>)
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe fd70 	bl	8000c74 <HAL_DMA_Abort_IT>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d016      	beq.n	80021c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800219e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021a4:	4610      	mov	r0, r2
 80021a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021a8:	e00e      	b.n	80021c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f000 f993 	bl	80024d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b0:	e00a      	b.n	80021c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f000 f98f 	bl	80024d6 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021b8:	e006      	b.n	80021c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f000 f98b 	bl	80024d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80021c6:	e175      	b.n	80024b4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80021c8:	bf00      	nop
    return;
 80021ca:	e173      	b.n	80024b4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	f040 814f 	bne.w	8002474 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80021d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80021da:	f003 0310 	and.w	r3, r3, #16
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8148 	beq.w	8002474 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80021e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80021e8:	f003 0310 	and.w	r3, r3, #16
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	f000 8141 	beq.w	8002474 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80021f2:	2300      	movs	r3, #0
 80021f4:	60bb      	str	r3, [r7, #8]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	60bb      	str	r3, [r7, #8]
 8002206:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	f000 80b6 	beq.w	8002384 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	685b      	ldr	r3, [r3, #4]
 8002220:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002224:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002228:	2b00      	cmp	r3, #0
 800222a:	f000 8145 	beq.w	80024b8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002232:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002236:	429a      	cmp	r2, r3
 8002238:	f080 813e 	bcs.w	80024b8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002242:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b20      	cmp	r3, #32
 800224c:	f000 8088 	beq.w	8002360 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	330c      	adds	r3, #12
 8002256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800225a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800225e:	e853 3f00 	ldrex	r3, [r3]
 8002262:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800226a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800226e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	330c      	adds	r3, #12
 8002278:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800227c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002280:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002284:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002288:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800228c:	e841 2300 	strex	r3, r2, [r1]
 8002290:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002294:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d1d9      	bne.n	8002250 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3314      	adds	r3, #20
 80022a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80022a6:	e853 3f00 	ldrex	r3, [r3]
 80022aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80022ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80022ae:	f023 0301 	bic.w	r3, r3, #1
 80022b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	3314      	adds	r3, #20
 80022bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80022c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80022c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80022c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80022cc:	e841 2300 	strex	r3, r2, [r1]
 80022d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80022d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1e1      	bne.n	800229c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3314      	adds	r3, #20
 80022de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80022e2:	e853 3f00 	ldrex	r3, [r3]
 80022e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80022e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80022ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	3314      	adds	r3, #20
 80022f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80022fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80022fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002300:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002302:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002304:	e841 2300 	strex	r3, r2, [r1]
 8002308:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800230a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e3      	bne.n	80022d8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2220      	movs	r2, #32
 8002314:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2200      	movs	r2, #0
 800231c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	330c      	adds	r3, #12
 8002324:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002326:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002328:	e853 3f00 	ldrex	r3, [r3]
 800232c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800232e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002330:	f023 0310 	bic.w	r3, r3, #16
 8002334:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	330c      	adds	r3, #12
 800233e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002342:	65ba      	str	r2, [r7, #88]	; 0x58
 8002344:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002346:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002348:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800234a:	e841 2300 	strex	r3, r2, [r1]
 800234e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002350:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1e3      	bne.n	800231e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fc4f 	bl	8000bfe <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800236e:	b29b      	uxth	r3, r3
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	b29b      	uxth	r3, r3
 8002374:	4619      	mov	r1, r3
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 f8b6 	bl	80024e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800237c:	e09c      	b.n	80024b8 <HAL_UART_IRQHandler+0x518>
 800237e:	bf00      	nop
 8002380:	08002711 	.word	0x08002711
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800238c:	b29b      	uxth	r3, r3
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002398:	b29b      	uxth	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 808e 	beq.w	80024bc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80023a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	f000 8089 	beq.w	80024bc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	330c      	adds	r3, #12
 80023b0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b4:	e853 3f00 	ldrex	r3, [r3]
 80023b8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80023ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80023c0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	330c      	adds	r3, #12
 80023ca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80023ce:	647a      	str	r2, [r7, #68]	; 0x44
 80023d0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80023d2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80023d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023d6:	e841 2300 	strex	r3, r2, [r1]
 80023da:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80023dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1e3      	bne.n	80023aa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3314      	adds	r3, #20
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	e853 3f00 	ldrex	r3, [r3]
 80023f0:	623b      	str	r3, [r7, #32]
   return(result);
 80023f2:	6a3b      	ldr	r3, [r7, #32]
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	3314      	adds	r3, #20
 8002402:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002406:	633a      	str	r2, [r7, #48]	; 0x30
 8002408:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800240a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800240c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800240e:	e841 2300 	strex	r3, r2, [r1]
 8002412:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1e3      	bne.n	80023e2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2220      	movs	r2, #32
 800241e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2200      	movs	r2, #0
 8002426:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	330c      	adds	r3, #12
 800242e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	e853 3f00 	ldrex	r3, [r3]
 8002436:	60fb      	str	r3, [r7, #12]
   return(result);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f023 0310 	bic.w	r3, r3, #16
 800243e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	330c      	adds	r3, #12
 8002448:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800244c:	61fa      	str	r2, [r7, #28]
 800244e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002450:	69b9      	ldr	r1, [r7, #24]
 8002452:	69fa      	ldr	r2, [r7, #28]
 8002454:	e841 2300 	strex	r3, r2, [r1]
 8002458:	617b      	str	r3, [r7, #20]
   return(result);
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1e3      	bne.n	8002428 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002466:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800246a:	4619      	mov	r1, r3
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	f000 f83b 	bl	80024e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002472:	e023      	b.n	80024bc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002478:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800247c:	2b00      	cmp	r3, #0
 800247e:	d009      	beq.n	8002494 <HAL_UART_IRQHandler+0x4f4>
 8002480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f000 f953 	bl	8002738 <UART_Transmit_IT>
    return;
 8002492:	e014      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	d00e      	beq.n	80024be <HAL_UART_IRQHandler+0x51e>
 80024a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80024a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d008      	beq.n	80024be <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80024ac:	6878      	ldr	r0, [r7, #4]
 80024ae:	f000 f992 	bl	80027d6 <UART_EndTransmit_IT>
    return;
 80024b2:	e004      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
    return;
 80024b4:	bf00      	nop
 80024b6:	e002      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
      return;
 80024b8:	bf00      	nop
 80024ba:	e000      	b.n	80024be <HAL_UART_IRQHandler+0x51e>
      return;
 80024bc:	bf00      	nop
  }
}
 80024be:	37e8      	adds	r7, #232	; 0xe8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	bc80      	pop	{r7}
 80024d4:	4770      	bx	lr

080024d6 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80024d6:	b480      	push	{r7}
 80024d8:	b083      	sub	sp, #12
 80024da:	af00      	add	r7, sp, #0
 80024dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bc80      	pop	{r7}
 80024e6:	4770      	bx	lr

080024e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024f4:	bf00      	nop
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr

080024fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b090      	sub	sp, #64	; 0x40
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250e:	e050      	b.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002516:	d04c      	beq.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800251a:	2b00      	cmp	r3, #0
 800251c:	d007      	beq.n	800252e <UART_WaitOnFlagUntilTimeout+0x30>
 800251e:	f7fe fa85 	bl	8000a2c <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800252a:	429a      	cmp	r2, r3
 800252c:	d241      	bcs.n	80025b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	330c      	adds	r3, #12
 8002534:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002538:	e853 3f00 	ldrex	r3, [r3]
 800253c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800253e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002540:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002544:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	330c      	adds	r3, #12
 800254c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800254e:	637a      	str	r2, [r7, #52]	; 0x34
 8002550:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002552:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002554:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002556:	e841 2300 	strex	r3, r2, [r1]
 800255a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800255c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800255e:	2b00      	cmp	r3, #0
 8002560:	d1e5      	bne.n	800252e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	3314      	adds	r3, #20
 8002568:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	e853 3f00 	ldrex	r3, [r3]
 8002570:	613b      	str	r3, [r7, #16]
   return(result);
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3314      	adds	r3, #20
 8002580:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002582:	623a      	str	r2, [r7, #32]
 8002584:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002586:	69f9      	ldr	r1, [r7, #28]
 8002588:	6a3a      	ldr	r2, [r7, #32]
 800258a:	e841 2300 	strex	r3, r2, [r1]
 800258e:	61bb      	str	r3, [r7, #24]
   return(result);
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d1e5      	bne.n	8002562 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2220      	movs	r2, #32
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e00f      	b.n	80025d2 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	681a      	ldr	r2, [r3, #0]
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	4013      	ands	r3, r2
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	bf0c      	ite	eq
 80025c2:	2301      	moveq	r3, #1
 80025c4:	2300      	movne	r3, #0
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	461a      	mov	r2, r3
 80025ca:	79fb      	ldrb	r3, [r7, #7]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d09f      	beq.n	8002510 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80025d0:	2300      	movs	r3, #0
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3740      	adds	r7, #64	; 0x40
 80025d6:	46bd      	mov	sp, r7
 80025d8:	bd80      	pop	{r7, pc}

080025da <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80025da:	b480      	push	{r7}
 80025dc:	b085      	sub	sp, #20
 80025de:	af00      	add	r7, sp, #0
 80025e0:	60f8      	str	r0, [r7, #12]
 80025e2:	60b9      	str	r1, [r7, #8]
 80025e4:	4613      	mov	r3, r2
 80025e6:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	68ba      	ldr	r2, [r7, #8]
 80025ec:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	88fa      	ldrh	r2, [r7, #6]
 80025f2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	88fa      	ldrh	r2, [r7, #6]
 80025f8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2200      	movs	r2, #0
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2222      	movs	r2, #34	; 0x22
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d007      	beq.n	8002620 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800261e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	695a      	ldr	r2, [r3, #20]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f042 0201 	orr.w	r2, r2, #1
 800262e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68da      	ldr	r2, [r3, #12]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f042 0220 	orr.w	r2, r2, #32
 800263e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	3714      	adds	r7, #20
 8002646:	46bd      	mov	sp, r7
 8002648:	bc80      	pop	{r7}
 800264a:	4770      	bx	lr

0800264c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800264c:	b480      	push	{r7}
 800264e:	b095      	sub	sp, #84	; 0x54
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	330c      	adds	r3, #12
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800265c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800265e:	e853 3f00 	ldrex	r3, [r3]
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800266a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	330c      	adds	r3, #12
 8002672:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002674:	643a      	str	r2, [r7, #64]	; 0x40
 8002676:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002678:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800267a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800267c:	e841 2300 	strex	r3, r2, [r1]
 8002680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1e5      	bne.n	8002654 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3314      	adds	r3, #20
 800268e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002690:	6a3b      	ldr	r3, [r7, #32]
 8002692:	e853 3f00 	ldrex	r3, [r3]
 8002696:	61fb      	str	r3, [r7, #28]
   return(result);
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f023 0301 	bic.w	r3, r3, #1
 800269e:	64bb      	str	r3, [r7, #72]	; 0x48
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3314      	adds	r3, #20
 80026a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80026a8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80026aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026b0:	e841 2300 	strex	r3, r2, [r1]
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80026b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1e5      	bne.n	8002688 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	d119      	bne.n	80026f8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	330c      	adds	r3, #12
 80026ca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	e853 3f00 	ldrex	r3, [r3]
 80026d2:	60bb      	str	r3, [r7, #8]
   return(result);
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	f023 0310 	bic.w	r3, r3, #16
 80026da:	647b      	str	r3, [r7, #68]	; 0x44
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	330c      	adds	r3, #12
 80026e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026e4:	61ba      	str	r2, [r7, #24]
 80026e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026e8:	6979      	ldr	r1, [r7, #20]
 80026ea:	69ba      	ldr	r2, [r7, #24]
 80026ec:	e841 2300 	strex	r3, r2, [r1]
 80026f0:	613b      	str	r3, [r7, #16]
   return(result);
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e5      	bne.n	80026c4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2220      	movs	r2, #32
 80026fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002706:	bf00      	nop
 8002708:	3754      	adds	r7, #84	; 0x54
 800270a:	46bd      	mov	sp, r7
 800270c:	bc80      	pop	{r7}
 800270e:	4770      	bx	lr

08002710 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2200      	movs	r2, #0
 8002722:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	2200      	movs	r2, #0
 8002728:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800272a:	68f8      	ldr	r0, [r7, #12]
 800272c:	f7ff fed3 	bl	80024d6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002730:	bf00      	nop
 8002732:	3710      	adds	r7, #16
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002738:	b480      	push	{r7}
 800273a:	b085      	sub	sp, #20
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b21      	cmp	r3, #33	; 0x21
 800274a:	d13e      	bne.n	80027ca <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002754:	d114      	bne.n	8002780 <UART_Transmit_IT+0x48>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d110      	bne.n	8002780 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a1b      	ldr	r3, [r3, #32]
 8002762:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	461a      	mov	r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002772:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	1c9a      	adds	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	621a      	str	r2, [r3, #32]
 800277e:	e008      	b.n	8002792 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	1c59      	adds	r1, r3, #1
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6211      	str	r1, [r2, #32]
 800278a:	781a      	ldrb	r2, [r3, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002796:	b29b      	uxth	r3, r3
 8002798:	3b01      	subs	r3, #1
 800279a:	b29b      	uxth	r3, r3
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4619      	mov	r1, r3
 80027a0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d10f      	bne.n	80027c6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	68da      	ldr	r2, [r3, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027b4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027c4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80027c6:	2300      	movs	r3, #0
 80027c8:	e000      	b.n	80027cc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80027ca:	2302      	movs	r3, #2
  }
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3714      	adds	r7, #20
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bc80      	pop	{r7}
 80027d4:	4770      	bx	lr

080027d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80027d6:	b580      	push	{r7, lr}
 80027d8:	b082      	sub	sp, #8
 80027da:	af00      	add	r7, sp, #0
 80027dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2220      	movs	r2, #32
 80027f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f7ff fe64 	bl	80024c4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80027fc:	2300      	movs	r3, #0
}
 80027fe:	4618      	mov	r0, r3
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}

08002806 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002806:	b580      	push	{r7, lr}
 8002808:	b08c      	sub	sp, #48	; 0x30
 800280a:	af00      	add	r7, sp, #0
 800280c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002814:	b2db      	uxtb	r3, r3
 8002816:	2b22      	cmp	r3, #34	; 0x22
 8002818:	f040 80ae 	bne.w	8002978 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002824:	d117      	bne.n	8002856 <UART_Receive_IT+0x50>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d113      	bne.n	8002856 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800282e:	2300      	movs	r3, #0
 8002830:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	b29b      	uxth	r3, r3
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	b29a      	uxth	r2, r3
 8002846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002848:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800284e:	1c9a      	adds	r2, r3, #2
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	; 0x28
 8002854:	e026      	b.n	80028a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800285c:	2300      	movs	r3, #0
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002868:	d007      	beq.n	800287a <UART_Receive_IT+0x74>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d10a      	bne.n	8002888 <UART_Receive_IT+0x82>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	691b      	ldr	r3, [r3, #16]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	b2da      	uxtb	r2, r3
 8002882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	e008      	b.n	800289a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002894:	b2da      	uxtb	r2, r3
 8002896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002898:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	1c5a      	adds	r2, r3, #1
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	3b01      	subs	r3, #1
 80028ac:	b29b      	uxth	r3, r3
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	4619      	mov	r1, r3
 80028b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d15d      	bne.n	8002974 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68da      	ldr	r2, [r3, #12]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f022 0220 	bic.w	r2, r2, #32
 80028c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	695a      	ldr	r2, [r3, #20]
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f022 0201 	bic.w	r2, r2, #1
 80028e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2200      	movs	r2, #0
 80028f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d135      	bne.n	800296a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	330c      	adds	r3, #12
 800290a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	e853 3f00 	ldrex	r3, [r3]
 8002912:	613b      	str	r3, [r7, #16]
   return(result);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f023 0310 	bic.w	r3, r3, #16
 800291a:	627b      	str	r3, [r7, #36]	; 0x24
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	330c      	adds	r3, #12
 8002922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002924:	623a      	str	r2, [r7, #32]
 8002926:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002928:	69f9      	ldr	r1, [r7, #28]
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	e841 2300 	strex	r3, r2, [r1]
 8002930:	61bb      	str	r3, [r7, #24]
   return(result);
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1e5      	bne.n	8002904 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f003 0310 	and.w	r3, r3, #16
 8002942:	2b10      	cmp	r3, #16
 8002944:	d10a      	bne.n	800295c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002946:	2300      	movs	r3, #0
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	60fb      	str	r3, [r7, #12]
 800295a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002960:	4619      	mov	r1, r3
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff fdc0 	bl	80024e8 <HAL_UARTEx_RxEventCallback>
 8002968:	e002      	b.n	8002970 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f7fd fda0 	bl	80004b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002970:	2300      	movs	r3, #0
 8002972:	e002      	b.n	800297a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002974:	2300      	movs	r3, #0
 8002976:	e000      	b.n	800297a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002978:	2302      	movs	r3, #2
  }
}
 800297a:	4618      	mov	r0, r3
 800297c:	3730      	adds	r7, #48	; 0x30
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
	...

08002984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b084      	sub	sp, #16
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	691b      	ldr	r3, [r3, #16]
 8002992:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	68da      	ldr	r2, [r3, #12]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	430a      	orrs	r2, r1
 80029a0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	691b      	ldr	r3, [r3, #16]
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	4313      	orrs	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80029be:	f023 030c 	bic.w	r3, r3, #12
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	68b9      	ldr	r1, [r7, #8]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	699a      	ldr	r2, [r3, #24]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a2c      	ldr	r2, [pc, #176]	; (8002a98 <UART_SetConfig+0x114>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d103      	bne.n	80029f4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80029ec:	f7fe ff34 	bl	8001858 <HAL_RCC_GetPCLK2Freq>
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	e002      	b.n	80029fa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80029f4:	f7fe ff1c 	bl	8001830 <HAL_RCC_GetPCLK1Freq>
 80029f8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009a      	lsls	r2, r3, #2
 8002a04:	441a      	add	r2, r3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	4a22      	ldr	r2, [pc, #136]	; (8002a9c <UART_SetConfig+0x118>)
 8002a12:	fba2 2303 	umull	r2, r3, r2, r3
 8002a16:	095b      	lsrs	r3, r3, #5
 8002a18:	0119      	lsls	r1, r3, #4
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4413      	add	r3, r2
 8002a22:	009a      	lsls	r2, r3, #2
 8002a24:	441a      	add	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a30:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <UART_SetConfig+0x118>)
 8002a32:	fba3 0302 	umull	r0, r3, r3, r2
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2064      	movs	r0, #100	; 0x64
 8002a3a:	fb00 f303 	mul.w	r3, r0, r3
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	3332      	adds	r3, #50	; 0x32
 8002a44:	4a15      	ldr	r2, [pc, #84]	; (8002a9c <UART_SetConfig+0x118>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a50:	4419      	add	r1, r3
 8002a52:	68fa      	ldr	r2, [r7, #12]
 8002a54:	4613      	mov	r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	009a      	lsls	r2, r3, #2
 8002a5c:	441a      	add	r2, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <UART_SetConfig+0x118>)
 8002a6a:	fba3 0302 	umull	r0, r3, r3, r2
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	2064      	movs	r0, #100	; 0x64
 8002a72:	fb00 f303 	mul.w	r3, r0, r3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	011b      	lsls	r3, r3, #4
 8002a7a:	3332      	adds	r3, #50	; 0x32
 8002a7c:	4a07      	ldr	r2, [pc, #28]	; (8002a9c <UART_SetConfig+0x118>)
 8002a7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	f003 020f 	and.w	r2, r3, #15
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	440a      	add	r2, r1
 8002a8e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002a90:	bf00      	nop
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	40013800 	.word	0x40013800
 8002a9c:	51eb851f 	.word	0x51eb851f

08002aa0 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
 8002aa8:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d10a      	bne.n	8002aca <xQueueGenericReset+0x2a>
        __asm volatile
 8002ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ab8:	f383 8811 	msr	BASEPRI, r3
 8002abc:	f3bf 8f6f 	isb	sy
 8002ac0:	f3bf 8f4f 	dsb	sy
 8002ac4:	60bb      	str	r3, [r7, #8]
    }
 8002ac6:	bf00      	nop
 8002ac8:	e7fe      	b.n	8002ac8 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8002aca:	f001 fb11 	bl	80040f0 <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ad6:	68f9      	ldr	r1, [r7, #12]
 8002ad8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002ada:	fb01 f303 	mul.w	r3, r1, r3
 8002ade:	441a      	add	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	639a      	str	r2, [r3, #56]	; 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681a      	ldr	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002afa:	3b01      	subs	r3, #1
 8002afc:	68f9      	ldr	r1, [r7, #12]
 8002afe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	441a      	add	r2, r3
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	22ff      	movs	r2, #255	; 0xff
 8002b0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	22ff      	movs	r2, #255	; 0xff
 8002b16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

        if( xNewQueue == pdFALSE )
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d114      	bne.n	8002b4a <xQueueGenericReset+0xaa>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	691b      	ldr	r3, [r3, #16]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d01a      	beq.n	8002b5e <xQueueGenericReset+0xbe>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3310      	adds	r3, #16
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 ff57 	bl	80039e0 <xTaskRemoveFromEventList>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d012      	beq.n	8002b5e <xQueueGenericReset+0xbe>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8002b38:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <xQueueGenericReset+0xcc>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
 8002b48:	e009      	b.n	8002b5e <xQueueGenericReset+0xbe>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	3310      	adds	r3, #16
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 fb31 	bl	80031b6 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	3324      	adds	r3, #36	; 0x24
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fb2c 	bl	80031b6 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8002b5e:	f001 faf7 	bl	8004150 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8002b62:	2301      	movs	r3, #1
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	3710      	adds	r7, #16
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	bd80      	pop	{r7, pc}
 8002b6c:	e000ed04 	.word	0xe000ed04

08002b70 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b08c      	sub	sp, #48	; 0x30
 8002b74:	af02      	add	r7, sp, #8
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	4613      	mov	r3, r2
 8002b7c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d10a      	bne.n	8002b9a <xQueueGenericCreate+0x2a>
        __asm volatile
 8002b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b88:	f383 8811 	msr	BASEPRI, r3
 8002b8c:	f3bf 8f6f 	isb	sy
 8002b90:	f3bf 8f4f 	dsb	sy
 8002b94:	61bb      	str	r3, [r7, #24]
    }
 8002b96:	bf00      	nop
 8002b98:	e7fe      	b.n	8002b98 <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	68ba      	ldr	r2, [r7, #8]
 8002b9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d006      	beq.n	8002bb8 <xQueueGenericCreate+0x48>
 8002baa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d101      	bne.n	8002bbc <xQueueGenericCreate+0x4c>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <xQueueGenericCreate+0x4e>
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10a      	bne.n	8002bd8 <xQueueGenericCreate+0x68>
        __asm volatile
 8002bc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bc6:	f383 8811 	msr	BASEPRI, r3
 8002bca:	f3bf 8f6f 	isb	sy
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	617b      	str	r3, [r7, #20]
    }
 8002bd4:	bf00      	nop
 8002bd6:	e7fe      	b.n	8002bd6 <xQueueGenericCreate+0x66>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	f113 0f49 	cmn.w	r3, #73	; 0x49
 8002bde:	d90a      	bls.n	8002bf6 <xQueueGenericCreate+0x86>
        __asm volatile
 8002be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002be4:	f383 8811 	msr	BASEPRI, r3
 8002be8:	f3bf 8f6f 	isb	sy
 8002bec:	f3bf 8f4f 	dsb	sy
 8002bf0:	613b      	str	r3, [r7, #16]
    }
 8002bf2:	bf00      	nop
 8002bf4:	e7fe      	b.n	8002bf4 <xQueueGenericCreate+0x84>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	3348      	adds	r3, #72	; 0x48
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	f001 fb76 	bl	80042ec <pvPortMalloc>
 8002c00:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8002c02:	6a3b      	ldr	r3, [r7, #32]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00d      	beq.n	8002c24 <xQueueGenericCreate+0xb4>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	3348      	adds	r3, #72	; 0x48
 8002c10:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002c12:	79fa      	ldrb	r2, [r7, #7]
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	69fa      	ldr	r2, [r7, #28]
 8002c1c:	68b9      	ldr	r1, [r7, #8]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f805 	bl	8002c2e <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002c24:	6a3b      	ldr	r3, [r7, #32]
    }
 8002c26:	4618      	mov	r0, r3
 8002c28:	3728      	adds	r7, #40	; 0x28
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	60f8      	str	r0, [r7, #12]
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d103      	bne.n	8002c4a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	e002      	b.n	8002c50 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002c4a:	69bb      	ldr	r3, [r7, #24]
 8002c4c:	687a      	ldr	r2, [r7, #4]
 8002c4e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	68fa      	ldr	r2, [r7, #12]
 8002c54:	63da      	str	r2, [r3, #60]	; 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	641a      	str	r2, [r3, #64]	; 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002c5c:	2101      	movs	r1, #1
 8002c5e:	69b8      	ldr	r0, [r7, #24]
 8002c60:	f7ff ff1e 	bl	8002aa0 <xQueueGenericReset>
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002c64:	bf00      	nop
 8002c66:	3710      	adds	r7, #16
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}

08002c6c <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	b090      	sub	sp, #64	; 0x40
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
 8002c78:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	63bb      	str	r3, [r7, #56]	; 0x38

    configASSERT( pxQueue );
 8002c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d10a      	bne.n	8002c9a <xQueueGenericSendFromISR+0x2e>
        __asm volatile
 8002c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c88:	f383 8811 	msr	BASEPRI, r3
 8002c8c:	f3bf 8f6f 	isb	sy
 8002c90:	f3bf 8f4f 	dsb	sy
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
    }
 8002c96:	bf00      	nop
 8002c98:	e7fe      	b.n	8002c98 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d103      	bne.n	8002ca8 <xQueueGenericSendFromISR+0x3c>
 8002ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d101      	bne.n	8002cac <xQueueGenericSendFromISR+0x40>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <xQueueGenericSendFromISR+0x42>
 8002cac:	2300      	movs	r3, #0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d10a      	bne.n	8002cc8 <xQueueGenericSendFromISR+0x5c>
        __asm volatile
 8002cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb6:	f383 8811 	msr	BASEPRI, r3
 8002cba:	f3bf 8f6f 	isb	sy
 8002cbe:	f3bf 8f4f 	dsb	sy
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    }
 8002cc4:	bf00      	nop
 8002cc6:	e7fe      	b.n	8002cc6 <xQueueGenericSendFromISR+0x5a>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d103      	bne.n	8002cd6 <xQueueGenericSendFromISR+0x6a>
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <xQueueGenericSendFromISR+0x6e>
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <xQueueGenericSendFromISR+0x70>
 8002cda:	2300      	movs	r3, #0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10a      	bne.n	8002cf6 <xQueueGenericSendFromISR+0x8a>
        __asm volatile
 8002ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce4:	f383 8811 	msr	BASEPRI, r3
 8002ce8:	f3bf 8f6f 	isb	sy
 8002cec:	f3bf 8f4f 	dsb	sy
 8002cf0:	623b      	str	r3, [r7, #32]
    }
 8002cf2:	bf00      	nop
 8002cf4:	e7fe      	b.n	8002cf4 <xQueueGenericSendFromISR+0x88>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cf6:	f001 fabb 	bl	8004270 <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8002cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8002cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d02:	f383 8811 	msr	BASEPRI, r3
 8002d06:	f3bf 8f6f 	isb	sy
 8002d0a:	f3bf 8f4f 	dsb	sy
 8002d0e:	61fa      	str	r2, [r7, #28]
 8002d10:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8002d12:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d14:	637b      	str	r3, [r7, #52]	; 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1e:	429a      	cmp	r2, r3
 8002d20:	d302      	bcc.n	8002d28 <xQueueGenericSendFromISR+0xbc>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2b02      	cmp	r3, #2
 8002d26:	d13e      	bne.n	8002da6 <xQueueGenericSendFromISR+0x13a>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8002d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	68b9      	ldr	r1, [r7, #8]
 8002d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d3e:	f000 f942 	bl	8002fc6 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8002d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d4a:	d112      	bne.n	8002d72 <xQueueGenericSendFromISR+0x106>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d025      	beq.n	8002da0 <xQueueGenericSendFromISR+0x134>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d56:	3324      	adds	r3, #36	; 0x24
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 fe41 	bl	80039e0 <xTaskRemoveFromEventList>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d01d      	beq.n	8002da0 <xQueueGenericSendFromISR+0x134>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01a      	beq.n	8002da0 <xQueueGenericSendFromISR+0x134>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
 8002d70:	e016      	b.n	8002da0 <xQueueGenericSendFromISR+0x134>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8002d72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002d76:	2b7f      	cmp	r3, #127	; 0x7f
 8002d78:	d10a      	bne.n	8002d90 <xQueueGenericSendFromISR+0x124>
        __asm volatile
 8002d7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7e:	f383 8811 	msr	BASEPRI, r3
 8002d82:	f3bf 8f6f 	isb	sy
 8002d86:	f3bf 8f4f 	dsb	sy
 8002d8a:	617b      	str	r3, [r7, #20]
    }
 8002d8c:	bf00      	nop
 8002d8e:	e7fe      	b.n	8002d8e <xQueueGenericSendFromISR+0x122>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d94:	3301      	adds	r3, #1
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	b25a      	sxtb	r2, r3
 8002d9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
            }

            xReturn = pdPASS;
 8002da0:	2301      	movs	r3, #1
 8002da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        {
 8002da4:	e001      	b.n	8002daa <xQueueGenericSendFromISR+0x13e>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dac:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002db4:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002db6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3740      	adds	r7, #64	; 0x40
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08c      	sub	sp, #48	; 0x30
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	60f8      	str	r0, [r7, #12]
 8002dc8:	60b9      	str	r1, [r7, #8]
 8002dca:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10a      	bne.n	8002df0 <xQueueReceive+0x30>
        __asm volatile
 8002dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dde:	f383 8811 	msr	BASEPRI, r3
 8002de2:	f3bf 8f6f 	isb	sy
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	623b      	str	r3, [r7, #32]
    }
 8002dec:	bf00      	nop
 8002dee:	e7fe      	b.n	8002dee <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002df0:	68bb      	ldr	r3, [r7, #8]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d103      	bne.n	8002dfe <xQueueReceive+0x3e>
 8002df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <xQueueReceive+0x42>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <xQueueReceive+0x44>
 8002e02:	2300      	movs	r3, #0
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d10a      	bne.n	8002e1e <xQueueReceive+0x5e>
        __asm volatile
 8002e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e0c:	f383 8811 	msr	BASEPRI, r3
 8002e10:	f3bf 8f6f 	isb	sy
 8002e14:	f3bf 8f4f 	dsb	sy
 8002e18:	61fb      	str	r3, [r7, #28]
    }
 8002e1a:	bf00      	nop
 8002e1c:	e7fe      	b.n	8002e1c <xQueueReceive+0x5c>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e1e:	f000 ff79 	bl	8003d14 <xTaskGetSchedulerState>
 8002e22:	4603      	mov	r3, r0
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d102      	bne.n	8002e2e <xQueueReceive+0x6e>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <xQueueReceive+0x72>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <xQueueReceive+0x74>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <xQueueReceive+0x8e>
        __asm volatile
 8002e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3c:	f383 8811 	msr	BASEPRI, r3
 8002e40:	f3bf 8f6f 	isb	sy
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	61bb      	str	r3, [r7, #24]
    }
 8002e4a:	bf00      	nop
 8002e4c:	e7fe      	b.n	8002e4c <xQueueReceive+0x8c>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002e4e:	f001 f94f 	bl	80040f0 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d01f      	beq.n	8002e9e <xQueueReceive+0xde>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e5e:	68b9      	ldr	r1, [r7, #8]
 8002e60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e62:	f000 f91a 	bl	800309a <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e68:	1e5a      	subs	r2, r3, #1
 8002e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6c:	639a      	str	r2, [r3, #56]	; 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d00f      	beq.n	8002e96 <xQueueReceive+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	3310      	adds	r3, #16
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fdb0 	bl	80039e0 <xTaskRemoveFromEventList>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d007      	beq.n	8002e96 <xQueueReceive+0xd6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <xQueueReceive+0x1bc>)
 8002e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e8c:	601a      	str	r2, [r3, #0]
 8002e8e:	f3bf 8f4f 	dsb	sy
 8002e92:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002e96:	f001 f95b 	bl	8004150 <vPortExitCritical>
                return pdPASS;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	e069      	b.n	8002f72 <xQueueReceive+0x1b2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d103      	bne.n	8002eac <xQueueReceive+0xec>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002ea4:	f001 f954 	bl	8004150 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e062      	b.n	8002f72 <xQueueReceive+0x1b2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002eac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <xQueueReceive+0x100>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002eb2:	f107 0310 	add.w	r3, r7, #16
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 fdf4 	bl	8003aa4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ebc:	2301      	movs	r3, #1
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ec0:	f001 f946 	bl	8004150 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002ec4:	f000 fbac 	bl	8003620 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002ec8:	f001 f912 	bl	80040f0 <vPortEnterCritical>
 8002ecc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ece:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002ed2:	b25b      	sxtb	r3, r3
 8002ed4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed8:	d103      	bne.n	8002ee2 <xQueueReceive+0x122>
 8002eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ee4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ee8:	b25b      	sxtb	r3, r3
 8002eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eee:	d103      	bne.n	8002ef8 <xQueueReceive+0x138>
 8002ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ef8:	f001 f92a 	bl	8004150 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002efc:	1d3a      	adds	r2, r7, #4
 8002efe:	f107 0310 	add.w	r3, r7, #16
 8002f02:	4611      	mov	r1, r2
 8002f04:	4618      	mov	r0, r3
 8002f06:	f000 fde3 	bl	8003ad0 <xTaskCheckForTimeOut>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d123      	bne.n	8002f58 <xQueueReceive+0x198>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f12:	f000 f93a 	bl	800318a <prvIsQueueEmpty>
 8002f16:	4603      	mov	r3, r0
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d017      	beq.n	8002f4c <xQueueReceive+0x18c>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f1e:	3324      	adds	r3, #36	; 0x24
 8002f20:	687a      	ldr	r2, [r7, #4]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f000 fd37 	bl	8003998 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002f2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f2c:	f000 f8db 	bl	80030e6 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002f30:	f000 fb84 	bl	800363c <xTaskResumeAll>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d189      	bne.n	8002e4e <xQueueReceive+0x8e>
                {
                    portYIELD_WITHIN_API();
 8002f3a:	4b10      	ldr	r3, [pc, #64]	; (8002f7c <xQueueReceive+0x1bc>)
 8002f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f40:	601a      	str	r2, [r3, #0]
 8002f42:	f3bf 8f4f 	dsb	sy
 8002f46:	f3bf 8f6f 	isb	sy
 8002f4a:	e780      	b.n	8002e4e <xQueueReceive+0x8e>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002f4c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f4e:	f000 f8ca 	bl	80030e6 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002f52:	f000 fb73 	bl	800363c <xTaskResumeAll>
 8002f56:	e77a      	b.n	8002e4e <xQueueReceive+0x8e>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5a:	f000 f8c4 	bl	80030e6 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002f5e:	f000 fb6d 	bl	800363c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f64:	f000 f911 	bl	800318a <prvIsQueueEmpty>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	f43f af6f 	beq.w	8002e4e <xQueueReceive+0x8e>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8002f70:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3730      	adds	r7, #48	; 0x30
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	e000ed04 	.word	0xe000ed04

08002f80 <uxQueueSpacesAvailable>:
    return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	617b      	str	r3, [r7, #20]

    configASSERT( pxQueue );
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d10a      	bne.n	8002fa8 <uxQueueSpacesAvailable+0x28>
        __asm volatile
 8002f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f96:	f383 8811 	msr	BASEPRI, r3
 8002f9a:	f3bf 8f6f 	isb	sy
 8002f9e:	f3bf 8f4f 	dsb	sy
 8002fa2:	60fb      	str	r3, [r7, #12]
    }
 8002fa4:	bf00      	nop
 8002fa6:	e7fe      	b.n	8002fa6 <uxQueueSpacesAvailable+0x26>

    taskENTER_CRITICAL();
 8002fa8:	f001 f8a2 	bl	80040f0 <vPortEnterCritical>
    {
        uxReturn = pxQueue->uxLength - pxQueue->uxMessagesWaiting;
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	613b      	str	r3, [r7, #16]
    }
    taskEXIT_CRITICAL();
 8002fb8:	f001 f8ca 	bl	8004150 <vPortExitCritical>

    return uxReturn;
 8002fbc:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}

08002fc6 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b086      	sub	sp, #24
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fda:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10d      	bne.n	8003000 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d14d      	bne.n	8003088 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689b      	ldr	r3, [r3, #8]
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f000 fead 	bl	8003d50 <xTaskPriorityDisinherit>
 8002ff6:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	609a      	str	r2, [r3, #8]
 8002ffe:	e043      	b.n	8003088 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d119      	bne.n	800303a <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6858      	ldr	r0, [r3, #4]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300e:	461a      	mov	r2, r3
 8003010:	68b9      	ldr	r1, [r7, #8]
 8003012:	f001 fb91 	bl	8004738 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	441a      	add	r2, r3
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	685a      	ldr	r2, [r3, #4]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	d32b      	bcc.n	8003088 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	605a      	str	r2, [r3, #4]
 8003038:	e026      	b.n	8003088 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	68d8      	ldr	r0, [r3, #12]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003042:	461a      	mov	r2, r3
 8003044:	68b9      	ldr	r1, [r7, #8]
 8003046:	f001 fb77 	bl	8004738 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	68da      	ldr	r2, [r3, #12]
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	425b      	negs	r3, r3
 8003054:	441a      	add	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	429a      	cmp	r2, r3
 8003064:	d207      	bcs.n	8003076 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	689a      	ldr	r2, [r3, #8]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306e:	425b      	negs	r3, r3
 8003070:	441a      	add	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d105      	bne.n	8003088 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	3b01      	subs	r3, #1
 8003086:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1c5a      	adds	r2, r3, #1
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	639a      	str	r2, [r3, #56]	; 0x38

    return xReturn;
 8003090:	697b      	ldr	r3, [r7, #20]
}
 8003092:	4618      	mov	r0, r3
 8003094:	3718      	adds	r7, #24
 8003096:	46bd      	mov	sp, r7
 8003098:	bd80      	pop	{r7, pc}

0800309a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 800309a:	b580      	push	{r7, lr}
 800309c:	b082      	sub	sp, #8
 800309e:	af00      	add	r7, sp, #0
 80030a0:	6078      	str	r0, [r7, #4]
 80030a2:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d018      	beq.n	80030de <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	68da      	ldr	r2, [r3, #12]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b4:	441a      	add	r2, r3
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	68da      	ldr	r2, [r3, #12]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d303      	bcc.n	80030ce <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68d9      	ldr	r1, [r3, #12]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	461a      	mov	r2, r3
 80030d8:	6838      	ldr	r0, [r7, #0]
 80030da:	f001 fb2d 	bl	8004738 <memcpy>
    }
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b084      	sub	sp, #16
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80030ee:	f000 ffff 	bl	80040f0 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80030f8:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80030fa:	e011      	b.n	8003120 <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003100:	2b00      	cmp	r3, #0
 8003102:	d012      	beq.n	800312a <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3324      	adds	r3, #36	; 0x24
 8003108:	4618      	mov	r0, r3
 800310a:	f000 fc69 	bl	80039e0 <xTaskRemoveFromEventList>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d001      	beq.n	8003118 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 8003114:	f000 fd42 	bl	8003b9c <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
 800311a:	3b01      	subs	r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003120:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003124:	2b00      	cmp	r3, #0
 8003126:	dce9      	bgt.n	80030fc <prvUnlockQueue+0x16>
 8003128:	e000      	b.n	800312c <prvUnlockQueue+0x46>
                        break;
 800312a:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	22ff      	movs	r2, #255	; 0xff
 8003130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
    taskEXIT_CRITICAL();
 8003134:	f001 f80c 	bl	8004150 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003138:	f000 ffda 	bl	80040f0 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003142:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003144:	e011      	b.n	800316a <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d012      	beq.n	8003174 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	3310      	adds	r3, #16
 8003152:	4618      	mov	r0, r3
 8003154:	f000 fc44 	bl	80039e0 <xTaskRemoveFromEventList>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800315e:	f000 fd1d 	bl	8003b9c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003162:	7bbb      	ldrb	r3, [r7, #14]
 8003164:	3b01      	subs	r3, #1
 8003166:	b2db      	uxtb	r3, r3
 8003168:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800316a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800316e:	2b00      	cmp	r3, #0
 8003170:	dce9      	bgt.n	8003146 <prvUnlockQueue+0x60>
 8003172:	e000      	b.n	8003176 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003174:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    }
    taskEXIT_CRITICAL();
 800317e:	f000 ffe7 	bl	8004150 <vPortExitCritical>
}
 8003182:	bf00      	nop
 8003184:	3710      	adds	r7, #16
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}

0800318a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800318a:	b580      	push	{r7, lr}
 800318c:	b084      	sub	sp, #16
 800318e:	af00      	add	r7, sp, #0
 8003190:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003192:	f000 ffad 	bl	80040f0 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800319e:	2301      	movs	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
 80031a2:	e001      	b.n	80031a8 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80031a4:	2300      	movs	r3, #0
 80031a6:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80031a8:	f000 ffd2 	bl	8004150 <vPortExitCritical>

    return xReturn;
 80031ac:	68fb      	ldr	r3, [r7, #12]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80031b6:	b480      	push	{r7}
 80031b8:	b083      	sub	sp, #12
 80031ba:	af00      	add	r7, sp, #0
 80031bc:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f103 0208 	add.w	r2, r3, #8
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	f04f 32ff 	mov.w	r2, #4294967295
 80031ce:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f103 0208 	add.w	r2, r3, #8
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0208 	add.w	r2, r3, #8
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bc80      	pop	{r7}
 80031f2:	4770      	bx	lr

080031f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80031f4:	b480      	push	{r7}
 80031f6:	b083      	sub	sp, #12
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003202:	bf00      	nop
 8003204:	370c      	adds	r7, #12
 8003206:	46bd      	mov	sp, r7
 8003208:	bc80      	pop	{r7}
 800320a:	4770      	bx	lr

0800320c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	689a      	ldr	r2, [r3, #8]
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	683a      	ldr	r2, [r7, #0]
 8003230:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	683a      	ldr	r2, [r7, #0]
 8003236:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	1c5a      	adds	r2, r3, #1
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	601a      	str	r2, [r3, #0]
}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr

08003252 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003252:	b480      	push	{r7}
 8003254:	b085      	sub	sp, #20
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
 800325a:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003268:	d103      	bne.n	8003272 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	691b      	ldr	r3, [r3, #16]
 800326e:	60fb      	str	r3, [r7, #12]
 8003270:	e00c      	b.n	800328c <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3308      	adds	r3, #8
 8003276:	60fb      	str	r3, [r7, #12]
 8003278:	e002      	b.n	8003280 <vListInsert+0x2e>
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	60fb      	str	r3, [r7, #12]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68ba      	ldr	r2, [r7, #8]
 8003288:	429a      	cmp	r2, r3
 800328a:	d2f6      	bcs.n	800327a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	685a      	ldr	r2, [r3, #4]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	1c5a      	adds	r2, r3, #1
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	601a      	str	r2, [r3, #0]
}
 80032b8:	bf00      	nop
 80032ba:	3714      	adds	r7, #20
 80032bc:	46bd      	mov	sp, r7
 80032be:	bc80      	pop	{r7}
 80032c0:	4770      	bx	lr

080032c2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80032c2:	b480      	push	{r7}
 80032c4:	b085      	sub	sp, #20
 80032c6:	af00      	add	r7, sp, #0
 80032c8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	691b      	ldr	r3, [r3, #16]
 80032ce:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685b      	ldr	r3, [r3, #4]
 80032d4:	687a      	ldr	r2, [r7, #4]
 80032d6:	6892      	ldr	r2, [r2, #8]
 80032d8:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6852      	ldr	r2, [r2, #4]
 80032e2:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d103      	bne.n	80032f6 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	1e5a      	subs	r2, r3, #1
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
}
 800330a:	4618      	mov	r0, r3
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bc80      	pop	{r7}
 8003312:	4770      	bx	lr

08003314 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003314:	b580      	push	{r7, lr}
 8003316:	b08c      	sub	sp, #48	; 0x30
 8003318:	af04      	add	r7, sp, #16
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	603b      	str	r3, [r7, #0]
 8003320:	4613      	mov	r3, r2
 8003322:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003324:	88fb      	ldrh	r3, [r7, #6]
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	4618      	mov	r0, r3
 800332a:	f000 ffdf 	bl	80042ec <pvPortMalloc>
 800332e:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00e      	beq.n	8003354 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003336:	2054      	movs	r0, #84	; 0x54
 8003338:	f000 ffd8 	bl	80042ec <pvPortMalloc>
 800333c:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800333e:	69fb      	ldr	r3, [r7, #28]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d003      	beq.n	800334c <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8003344:	69fb      	ldr	r3, [r7, #28]
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	631a      	str	r2, [r3, #48]	; 0x30
 800334a:	e005      	b.n	8003358 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 800334c:	6978      	ldr	r0, [r7, #20]
 800334e:	f001 f8ad 	bl	80044ac <vPortFree>
 8003352:	e001      	b.n	8003358 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d013      	beq.n	8003386 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800335e:	88fa      	ldrh	r2, [r7, #6]
 8003360:	2300      	movs	r3, #0
 8003362:	9303      	str	r3, [sp, #12]
 8003364:	69fb      	ldr	r3, [r7, #28]
 8003366:	9302      	str	r3, [sp, #8]
 8003368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68b9      	ldr	r1, [r7, #8]
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f80e 	bl	8003396 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800337a:	69f8      	ldr	r0, [r7, #28]
 800337c:	f000 f89a 	bl	80034b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003380:	2301      	movs	r3, #1
 8003382:	61bb      	str	r3, [r7, #24]
 8003384:	e002      	b.n	800338c <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003386:	f04f 33ff 	mov.w	r3, #4294967295
 800338a:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 800338c:	69bb      	ldr	r3, [r7, #24]
    }
 800338e:	4618      	mov	r0, r3
 8003390:	3720      	adds	r7, #32
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}

08003396 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003396:	b580      	push	{r7, lr}
 8003398:	b088      	sub	sp, #32
 800339a:	af00      	add	r7, sp, #0
 800339c:	60f8      	str	r0, [r7, #12]
 800339e:	60b9      	str	r1, [r7, #8]
 80033a0:	607a      	str	r2, [r7, #4]
 80033a2:	603b      	str	r3, [r7, #0]
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80033ae:	3b01      	subs	r3, #1
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	f023 0307 	bic.w	r3, r3, #7
 80033bc:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d00a      	beq.n	80033de <prvInitialiseNewTask+0x48>
        __asm volatile
 80033c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033cc:	f383 8811 	msr	BASEPRI, r3
 80033d0:	f3bf 8f6f 	isb	sy
 80033d4:	f3bf 8f4f 	dsb	sy
 80033d8:	617b      	str	r3, [r7, #20]
    }
 80033da:	bf00      	nop
 80033dc:	e7fe      	b.n	80033dc <prvInitialiseNewTask+0x46>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01f      	beq.n	8003424 <prvInitialiseNewTask+0x8e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033e4:	2300      	movs	r3, #0
 80033e6:	61fb      	str	r3, [r7, #28]
 80033e8:	e012      	b.n	8003410 <prvInitialiseNewTask+0x7a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	4413      	add	r3, r2
 80033f0:	7819      	ldrb	r1, [r3, #0]
 80033f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	4413      	add	r3, r2
 80033f8:	3334      	adds	r3, #52	; 0x34
 80033fa:	460a      	mov	r2, r1
 80033fc:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80033fe:	68ba      	ldr	r2, [r7, #8]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	4413      	add	r3, r2
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d006      	beq.n	8003418 <prvInitialiseNewTask+0x82>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	3301      	adds	r3, #1
 800340e:	61fb      	str	r3, [r7, #28]
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b0f      	cmp	r3, #15
 8003414:	d9e9      	bls.n	80033ea <prvInitialiseNewTask+0x54>
 8003416:	e000      	b.n	800341a <prvInitialiseNewTask+0x84>
            {
                break;
 8003418:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003422:	e003      	b.n	800342c <prvInitialiseNewTask+0x96>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800342c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800342e:	2b06      	cmp	r3, #6
 8003430:	d901      	bls.n	8003436 <prvInitialiseNewTask+0xa0>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003432:	2306      	movs	r3, #6
 8003434:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800343a:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800343c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003440:	645a      	str	r2, [r3, #68]	; 0x44
            pxNewTCB->uxMutexesHeld = 0;
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	2200      	movs	r2, #0
 8003446:	649a      	str	r2, [r3, #72]	; 0x48
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344a:	3304      	adds	r3, #4
 800344c:	4618      	mov	r0, r3
 800344e:	f7ff fed1 	bl	80031f4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	3318      	adds	r3, #24
 8003456:	4618      	mov	r0, r3
 8003458:	f7ff fecc 	bl	80031f4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800345c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800345e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003460:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003464:	f1c3 0207 	rsb	r2, r3, #7
 8003468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346a:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800346c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800346e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003470:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003474:	334c      	adds	r3, #76	; 0x4c
 8003476:	2204      	movs	r2, #4
 8003478:	2100      	movs	r1, #0
 800347a:	4618      	mov	r0, r3
 800347c:	f001 f96a 	bl	8004754 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003482:	3350      	adds	r3, #80	; 0x50
 8003484:	2201      	movs	r2, #1
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f001 f963 	bl	8004754 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	68f9      	ldr	r1, [r7, #12]
 8003492:	69b8      	ldr	r0, [r7, #24]
 8003494:	f000 fd3c 	bl	8003f10 <pxPortInitialiseStack>
 8003498:	4602      	mov	r2, r0
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800349e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d002      	beq.n	80034aa <prvInitialiseNewTask+0x114>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80034a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80034aa:	bf00      	nop
 80034ac:	3720      	adds	r7, #32
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
	...

080034b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80034bc:	f000 fe18 	bl	80040f0 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80034c0:	4b2a      	ldr	r3, [pc, #168]	; (800356c <prvAddNewTaskToReadyList+0xb8>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	3301      	adds	r3, #1
 80034c6:	4a29      	ldr	r2, [pc, #164]	; (800356c <prvAddNewTaskToReadyList+0xb8>)
 80034c8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80034ca:	4b29      	ldr	r3, [pc, #164]	; (8003570 <prvAddNewTaskToReadyList+0xbc>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80034d2:	4a27      	ldr	r2, [pc, #156]	; (8003570 <prvAddNewTaskToReadyList+0xbc>)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034d8:	4b24      	ldr	r3, [pc, #144]	; (800356c <prvAddNewTaskToReadyList+0xb8>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d110      	bne.n	8003502 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80034e0:	f000 fb80 	bl	8003be4 <prvInitialiseTaskLists>
 80034e4:	e00d      	b.n	8003502 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80034e6:	4b23      	ldr	r3, [pc, #140]	; (8003574 <prvAddNewTaskToReadyList+0xc0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034ee:	4b20      	ldr	r3, [pc, #128]	; (8003570 <prvAddNewTaskToReadyList+0xbc>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d802      	bhi.n	8003502 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80034fc:	4a1c      	ldr	r2, [pc, #112]	; (8003570 <prvAddNewTaskToReadyList+0xbc>)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8003502:	4b1d      	ldr	r3, [pc, #116]	; (8003578 <prvAddNewTaskToReadyList+0xc4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	3301      	adds	r3, #1
 8003508:	4a1b      	ldr	r2, [pc, #108]	; (8003578 <prvAddNewTaskToReadyList+0xc4>)
 800350a:	6013      	str	r3, [r2, #0]
                pxNewTCB->uxTCBNumber = uxTaskNumber;
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003510:	2201      	movs	r2, #1
 8003512:	409a      	lsls	r2, r3
 8003514:	4b19      	ldr	r3, [pc, #100]	; (800357c <prvAddNewTaskToReadyList+0xc8>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4313      	orrs	r3, r2
 800351a:	4a18      	ldr	r2, [pc, #96]	; (800357c <prvAddNewTaskToReadyList+0xc8>)
 800351c:	6013      	str	r3, [r2, #0]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4a15      	ldr	r2, [pc, #84]	; (8003580 <prvAddNewTaskToReadyList+0xcc>)
 800352c:	441a      	add	r2, r3
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	3304      	adds	r3, #4
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f7ff fe69 	bl	800320c <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800353a:	f000 fe09 	bl	8004150 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800353e:	4b0d      	ldr	r3, [pc, #52]	; (8003574 <prvAddNewTaskToReadyList+0xc0>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00e      	beq.n	8003564 <prvAddNewTaskToReadyList+0xb0>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <prvAddNewTaskToReadyList+0xbc>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003550:	429a      	cmp	r2, r3
 8003552:	d207      	bcs.n	8003564 <prvAddNewTaskToReadyList+0xb0>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <prvAddNewTaskToReadyList+0xd0>)
 8003556:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	f3bf 8f4f 	dsb	sy
 8003560:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003564:	bf00      	nop
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}
 800356c:	20000378 	.word	0x20000378
 8003570:	20000278 	.word	0x20000278
 8003574:	20000384 	.word	0x20000384
 8003578:	20000394 	.word	0x20000394
 800357c:	20000380 	.word	0x20000380
 8003580:	2000027c 	.word	0x2000027c
 8003584:	e000ed04 	.word	0xe000ed04

08003588 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 800358e:	4b1d      	ldr	r3, [pc, #116]	; (8003604 <vTaskStartScheduler+0x7c>)
 8003590:	9301      	str	r3, [sp, #4]
 8003592:	2300      	movs	r3, #0
 8003594:	9300      	str	r3, [sp, #0]
 8003596:	2300      	movs	r3, #0
 8003598:	2280      	movs	r2, #128	; 0x80
 800359a:	491b      	ldr	r1, [pc, #108]	; (8003608 <vTaskStartScheduler+0x80>)
 800359c:	481b      	ldr	r0, [pc, #108]	; (800360c <vTaskStartScheduler+0x84>)
 800359e:	f7ff feb9 	bl	8003314 <xTaskCreate>
 80035a2:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d116      	bne.n	80035d8 <vTaskStartScheduler+0x50>
        __asm volatile
 80035aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035ae:	f383 8811 	msr	BASEPRI, r3
 80035b2:	f3bf 8f6f 	isb	sy
 80035b6:	f3bf 8f4f 	dsb	sy
 80035ba:	60bb      	str	r3, [r7, #8]
    }
 80035bc:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 80035be:	4b14      	ldr	r3, [pc, #80]	; (8003610 <vTaskStartScheduler+0x88>)
 80035c0:	f04f 32ff 	mov.w	r2, #4294967295
 80035c4:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <vTaskStartScheduler+0x8c>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80035cc:	4b12      	ldr	r3, [pc, #72]	; (8003618 <vTaskStartScheduler+0x90>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80035d2:	f000 fd1b 	bl	800400c <xPortStartScheduler>
 80035d6:	e00e      	b.n	80035f6 <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035de:	d10a      	bne.n	80035f6 <vTaskStartScheduler+0x6e>
        __asm volatile
 80035e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035e4:	f383 8811 	msr	BASEPRI, r3
 80035e8:	f3bf 8f6f 	isb	sy
 80035ec:	f3bf 8f4f 	dsb	sy
 80035f0:	607b      	str	r3, [r7, #4]
    }
 80035f2:	bf00      	nop
 80035f4:	e7fe      	b.n	80035f4 <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80035f6:	4b09      	ldr	r3, [pc, #36]	; (800361c <vTaskStartScheduler+0x94>)
 80035f8:	681b      	ldr	r3, [r3, #0]
}
 80035fa:	bf00      	nop
 80035fc:	3710      	adds	r7, #16
 80035fe:	46bd      	mov	sp, r7
 8003600:	bd80      	pop	{r7, pc}
 8003602:	bf00      	nop
 8003604:	2000039c 	.word	0x2000039c
 8003608:	08005068 	.word	0x08005068
 800360c:	08003bb5 	.word	0x08003bb5
 8003610:	20000398 	.word	0x20000398
 8003614:	20000384 	.word	0x20000384
 8003618:	2000037c 	.word	0x2000037c
 800361c:	2000000c 	.word	0x2000000c

08003620 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003620:	b480      	push	{r7}
 8003622:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8003624:	4b04      	ldr	r3, [pc, #16]	; (8003638 <vTaskSuspendAll+0x18>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	3301      	adds	r3, #1
 800362a:	4a03      	ldr	r2, [pc, #12]	; (8003638 <vTaskSuspendAll+0x18>)
 800362c:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 800362e:	bf00      	nop
 8003630:	46bd      	mov	sp, r7
 8003632:	bc80      	pop	{r7}
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	200003a0 	.word	0x200003a0

0800363c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003642:	2300      	movs	r3, #0
 8003644:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <xTaskResumeAll+0x114>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <xTaskResumeAll+0x2c>
        __asm volatile
 8003652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003656:	f383 8811 	msr	BASEPRI, r3
 800365a:	f3bf 8f6f 	isb	sy
 800365e:	f3bf 8f4f 	dsb	sy
 8003662:	603b      	str	r3, [r7, #0]
    }
 8003664:	bf00      	nop
 8003666:	e7fe      	b.n	8003666 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003668:	f000 fd42 	bl	80040f0 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800366c:	4b38      	ldr	r3, [pc, #224]	; (8003750 <xTaskResumeAll+0x114>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	3b01      	subs	r3, #1
 8003672:	4a37      	ldr	r2, [pc, #220]	; (8003750 <xTaskResumeAll+0x114>)
 8003674:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <xTaskResumeAll+0x114>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d161      	bne.n	8003742 <xTaskResumeAll+0x106>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800367e:	4b35      	ldr	r3, [pc, #212]	; (8003754 <xTaskResumeAll+0x118>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d05d      	beq.n	8003742 <xTaskResumeAll+0x106>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003686:	e02e      	b.n	80036e6 <xTaskResumeAll+0xaa>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003688:	4b33      	ldr	r3, [pc, #204]	; (8003758 <xTaskResumeAll+0x11c>)
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	68db      	ldr	r3, [r3, #12]
 800368e:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	3318      	adds	r3, #24
 8003694:	4618      	mov	r0, r3
 8003696:	f7ff fe14 	bl	80032c2 <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	3304      	adds	r3, #4
 800369e:	4618      	mov	r0, r3
 80036a0:	f7ff fe0f 	bl	80032c2 <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	2201      	movs	r2, #1
 80036aa:	409a      	lsls	r2, r3
 80036ac:	4b2b      	ldr	r3, [pc, #172]	; (800375c <xTaskResumeAll+0x120>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4313      	orrs	r3, r2
 80036b2:	4a2a      	ldr	r2, [pc, #168]	; (800375c <xTaskResumeAll+0x120>)
 80036b4:	6013      	str	r3, [r2, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036ba:	4613      	mov	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	4413      	add	r3, r2
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	4a27      	ldr	r2, [pc, #156]	; (8003760 <xTaskResumeAll+0x124>)
 80036c4:	441a      	add	r2, r3
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	3304      	adds	r3, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4610      	mov	r0, r2
 80036ce:	f7ff fd9d 	bl	800320c <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d6:	4b23      	ldr	r3, [pc, #140]	; (8003764 <xTaskResumeAll+0x128>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	d302      	bcc.n	80036e6 <xTaskResumeAll+0xaa>
                    {
                        xYieldPending = pdTRUE;
 80036e0:	4b21      	ldr	r3, [pc, #132]	; (8003768 <xTaskResumeAll+0x12c>)
 80036e2:	2201      	movs	r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036e6:	4b1c      	ldr	r3, [pc, #112]	; (8003758 <xTaskResumeAll+0x11c>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1cc      	bne.n	8003688 <xTaskResumeAll+0x4c>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d001      	beq.n	80036f8 <xTaskResumeAll+0xbc>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80036f4:	f000 faf4 	bl	8003ce0 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80036f8:	4b1c      	ldr	r3, [pc, #112]	; (800376c <xTaskResumeAll+0x130>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d010      	beq.n	8003726 <xTaskResumeAll+0xea>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003704:	f000 f836 	bl	8003774 <xTaskIncrementTick>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d002      	beq.n	8003714 <xTaskResumeAll+0xd8>
                            {
                                xYieldPending = pdTRUE;
 800370e:	4b16      	ldr	r3, [pc, #88]	; (8003768 <xTaskResumeAll+0x12c>)
 8003710:	2201      	movs	r2, #1
 8003712:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	3b01      	subs	r3, #1
 8003718:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1f1      	bne.n	8003704 <xTaskResumeAll+0xc8>

                        xPendedTicks = 0;
 8003720:	4b12      	ldr	r3, [pc, #72]	; (800376c <xTaskResumeAll+0x130>)
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003726:	4b10      	ldr	r3, [pc, #64]	; (8003768 <xTaskResumeAll+0x12c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d009      	beq.n	8003742 <xTaskResumeAll+0x106>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 800372e:	2301      	movs	r3, #1
 8003730:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003732:	4b0f      	ldr	r3, [pc, #60]	; (8003770 <xTaskResumeAll+0x134>)
 8003734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	f3bf 8f4f 	dsb	sy
 800373e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003742:	f000 fd05 	bl	8004150 <vPortExitCritical>

    return xAlreadyYielded;
 8003746:	68bb      	ldr	r3, [r7, #8]
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200003a0 	.word	0x200003a0
 8003754:	20000378 	.word	0x20000378
 8003758:	20000338 	.word	0x20000338
 800375c:	20000380 	.word	0x20000380
 8003760:	2000027c 	.word	0x2000027c
 8003764:	20000278 	.word	0x20000278
 8003768:	2000038c 	.word	0x2000038c
 800376c:	20000388 	.word	0x20000388
 8003770:	e000ed04 	.word	0xe000ed04

08003774 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800377e:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <xTaskIncrementTick+0x144>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	f040 808e 	bne.w	80038a4 <xTaskIncrementTick+0x130>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003788:	4b4c      	ldr	r3, [pc, #304]	; (80038bc <xTaskIncrementTick+0x148>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	3301      	adds	r3, #1
 800378e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003790:	4a4a      	ldr	r2, [pc, #296]	; (80038bc <xTaskIncrementTick+0x148>)
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d120      	bne.n	80037de <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 800379c:	4b48      	ldr	r3, [pc, #288]	; (80038c0 <xTaskIncrementTick+0x14c>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d00a      	beq.n	80037bc <xTaskIncrementTick+0x48>
        __asm volatile
 80037a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037aa:	f383 8811 	msr	BASEPRI, r3
 80037ae:	f3bf 8f6f 	isb	sy
 80037b2:	f3bf 8f4f 	dsb	sy
 80037b6:	603b      	str	r3, [r7, #0]
    }
 80037b8:	bf00      	nop
 80037ba:	e7fe      	b.n	80037ba <xTaskIncrementTick+0x46>
 80037bc:	4b40      	ldr	r3, [pc, #256]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	60fb      	str	r3, [r7, #12]
 80037c2:	4b40      	ldr	r3, [pc, #256]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a3e      	ldr	r2, [pc, #248]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	4a3e      	ldr	r2, [pc, #248]	; (80038c4 <xTaskIncrementTick+0x150>)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6013      	str	r3, [r2, #0]
 80037d0:	4b3d      	ldr	r3, [pc, #244]	; (80038c8 <xTaskIncrementTick+0x154>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3301      	adds	r3, #1
 80037d6:	4a3c      	ldr	r2, [pc, #240]	; (80038c8 <xTaskIncrementTick+0x154>)
 80037d8:	6013      	str	r3, [r2, #0]
 80037da:	f000 fa81 	bl	8003ce0 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80037de:	4b3b      	ldr	r3, [pc, #236]	; (80038cc <xTaskIncrementTick+0x158>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d348      	bcc.n	800387a <xTaskIncrementTick+0x106>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80037e8:	4b35      	ldr	r3, [pc, #212]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d104      	bne.n	80037fc <xTaskIncrementTick+0x88>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037f2:	4b36      	ldr	r3, [pc, #216]	; (80038cc <xTaskIncrementTick+0x158>)
 80037f4:	f04f 32ff 	mov.w	r2, #4294967295
 80037f8:	601a      	str	r2, [r3, #0]
                    break;
 80037fa:	e03e      	b.n	800387a <xTaskIncrementTick+0x106>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037fc:	4b30      	ldr	r3, [pc, #192]	; (80038c0 <xTaskIncrementTick+0x14c>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	429a      	cmp	r2, r3
 8003812:	d203      	bcs.n	800381c <xTaskIncrementTick+0xa8>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003814:	4a2d      	ldr	r2, [pc, #180]	; (80038cc <xTaskIncrementTick+0x158>)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800381a:	e02e      	b.n	800387a <xTaskIncrementTick+0x106>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	3304      	adds	r3, #4
 8003820:	4618      	mov	r0, r3
 8003822:	f7ff fd4e 	bl	80032c2 <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	2b00      	cmp	r3, #0
 800382c:	d004      	beq.n	8003838 <xTaskIncrementTick+0xc4>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	3318      	adds	r3, #24
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff fd45 	bl	80032c2 <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	2201      	movs	r2, #1
 800383e:	409a      	lsls	r2, r3
 8003840:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <xTaskIncrementTick+0x15c>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <xTaskIncrementTick+0x15c>)
 8003848:	6013      	str	r3, [r2, #0]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800384e:	4613      	mov	r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	4413      	add	r3, r2
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	4a1f      	ldr	r2, [pc, #124]	; (80038d4 <xTaskIncrementTick+0x160>)
 8003858:	441a      	add	r2, r3
 800385a:	68bb      	ldr	r3, [r7, #8]
 800385c:	3304      	adds	r3, #4
 800385e:	4619      	mov	r1, r3
 8003860:	4610      	mov	r0, r2
 8003862:	f7ff fcd3 	bl	800320c <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386a:	4b1b      	ldr	r3, [pc, #108]	; (80038d8 <xTaskIncrementTick+0x164>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003870:	429a      	cmp	r2, r3
 8003872:	d3b9      	bcc.n	80037e8 <xTaskIncrementTick+0x74>
                            {
                                xSwitchRequired = pdTRUE;
 8003874:	2301      	movs	r3, #1
 8003876:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003878:	e7b6      	b.n	80037e8 <xTaskIncrementTick+0x74>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800387a:	4b17      	ldr	r3, [pc, #92]	; (80038d8 <xTaskIncrementTick+0x164>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003880:	4914      	ldr	r1, [pc, #80]	; (80038d4 <xTaskIncrementTick+0x160>)
 8003882:	4613      	mov	r3, r2
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	4413      	add	r3, r2
 8003888:	009b      	lsls	r3, r3, #2
 800388a:	440b      	add	r3, r1
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d901      	bls.n	8003896 <xTaskIncrementTick+0x122>
                {
                    xSwitchRequired = pdTRUE;
 8003892:	2301      	movs	r3, #1
 8003894:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8003896:	4b11      	ldr	r3, [pc, #68]	; (80038dc <xTaskIncrementTick+0x168>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d007      	beq.n	80038ae <xTaskIncrementTick+0x13a>
                {
                    xSwitchRequired = pdTRUE;
 800389e:	2301      	movs	r3, #1
 80038a0:	617b      	str	r3, [r7, #20]
 80038a2:	e004      	b.n	80038ae <xTaskIncrementTick+0x13a>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80038a4:	4b0e      	ldr	r3, [pc, #56]	; (80038e0 <xTaskIncrementTick+0x16c>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	3301      	adds	r3, #1
 80038aa:	4a0d      	ldr	r2, [pc, #52]	; (80038e0 <xTaskIncrementTick+0x16c>)
 80038ac:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 80038ae:	697b      	ldr	r3, [r7, #20]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	200003a0 	.word	0x200003a0
 80038bc:	2000037c 	.word	0x2000037c
 80038c0:	20000330 	.word	0x20000330
 80038c4:	20000334 	.word	0x20000334
 80038c8:	20000390 	.word	0x20000390
 80038cc:	20000398 	.word	0x20000398
 80038d0:	20000380 	.word	0x20000380
 80038d4:	2000027c 	.word	0x2000027c
 80038d8:	20000278 	.word	0x20000278
 80038dc:	2000038c 	.word	0x2000038c
 80038e0:	20000388 	.word	0x20000388

080038e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80038e4:	b480      	push	{r7}
 80038e6:	b087      	sub	sp, #28
 80038e8:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80038ea:	4b26      	ldr	r3, [pc, #152]	; (8003984 <vTaskSwitchContext+0xa0>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d003      	beq.n	80038fa <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80038f2:	4b25      	ldr	r3, [pc, #148]	; (8003988 <vTaskSwitchContext+0xa4>)
 80038f4:	2201      	movs	r2, #1
 80038f6:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 80038f8:	e03f      	b.n	800397a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 80038fa:	4b23      	ldr	r3, [pc, #140]	; (8003988 <vTaskSwitchContext+0xa4>)
 80038fc:	2200      	movs	r2, #0
 80038fe:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003900:	4b22      	ldr	r3, [pc, #136]	; (800398c <vTaskSwitchContext+0xa8>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	fab3 f383 	clz	r3, r3
 800390c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800390e:	7afb      	ldrb	r3, [r7, #11]
 8003910:	f1c3 031f 	rsb	r3, r3, #31
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	491e      	ldr	r1, [pc, #120]	; (8003990 <vTaskSwitchContext+0xac>)
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4613      	mov	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4413      	add	r3, r2
 8003920:	009b      	lsls	r3, r3, #2
 8003922:	440b      	add	r3, r1
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10a      	bne.n	8003940 <vTaskSwitchContext+0x5c>
        __asm volatile
 800392a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800392e:	f383 8811 	msr	BASEPRI, r3
 8003932:	f3bf 8f6f 	isb	sy
 8003936:	f3bf 8f4f 	dsb	sy
 800393a:	607b      	str	r3, [r7, #4]
    }
 800393c:	bf00      	nop
 800393e:	e7fe      	b.n	800393e <vTaskSwitchContext+0x5a>
 8003940:	697a      	ldr	r2, [r7, #20]
 8003942:	4613      	mov	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	4413      	add	r3, r2
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	4a11      	ldr	r2, [pc, #68]	; (8003990 <vTaskSwitchContext+0xac>)
 800394c:	4413      	add	r3, r2
 800394e:	613b      	str	r3, [r7, #16]
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	685a      	ldr	r2, [r3, #4]
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	3308      	adds	r3, #8
 8003962:	429a      	cmp	r2, r3
 8003964:	d104      	bne.n	8003970 <vTaskSwitchContext+0x8c>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	605a      	str	r2, [r3, #4]
 8003970:	693b      	ldr	r3, [r7, #16]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	4a07      	ldr	r2, [pc, #28]	; (8003994 <vTaskSwitchContext+0xb0>)
 8003978:	6013      	str	r3, [r2, #0]
}
 800397a:	bf00      	nop
 800397c:	371c      	adds	r7, #28
 800397e:	46bd      	mov	sp, r7
 8003980:	bc80      	pop	{r7}
 8003982:	4770      	bx	lr
 8003984:	200003a0 	.word	0x200003a0
 8003988:	2000038c 	.word	0x2000038c
 800398c:	20000380 	.word	0x20000380
 8003990:	2000027c 	.word	0x2000027c
 8003994:	20000278 	.word	0x20000278

08003998 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <vTaskPlaceOnEventList+0x26>
        __asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	60fb      	str	r3, [r7, #12]
    }
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80039be:	4b07      	ldr	r3, [pc, #28]	; (80039dc <vTaskPlaceOnEventList+0x44>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3318      	adds	r3, #24
 80039c4:	4619      	mov	r1, r3
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7ff fc43 	bl	8003252 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80039cc:	2101      	movs	r1, #1
 80039ce:	6838      	ldr	r0, [r7, #0]
 80039d0:	f000 fa38 	bl	8003e44 <prvAddCurrentTaskToDelayedList>
}
 80039d4:	bf00      	nop
 80039d6:	3710      	adds	r7, #16
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	20000278 	.word	0x20000278

080039e0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68db      	ldr	r3, [r3, #12]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d10a      	bne.n	8003a0c <xTaskRemoveFromEventList+0x2c>
        __asm volatile
 80039f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039fa:	f383 8811 	msr	BASEPRI, r3
 80039fe:	f3bf 8f6f 	isb	sy
 8003a02:	f3bf 8f4f 	dsb	sy
 8003a06:	60fb      	str	r3, [r7, #12]
    }
 8003a08:	bf00      	nop
 8003a0a:	e7fe      	b.n	8003a0a <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff fc56 	bl	80032c2 <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a16:	4b1d      	ldr	r3, [pc, #116]	; (8003a8c <xTaskRemoveFromEventList+0xac>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d11c      	bne.n	8003a58 <xTaskRemoveFromEventList+0x78>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	3304      	adds	r3, #4
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff fc4d 	bl	80032c2 <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	409a      	lsls	r2, r3
 8003a30:	4b17      	ldr	r3, [pc, #92]	; (8003a90 <xTaskRemoveFromEventList+0xb0>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4313      	orrs	r3, r2
 8003a36:	4a16      	ldr	r2, [pc, #88]	; (8003a90 <xTaskRemoveFromEventList+0xb0>)
 8003a38:	6013      	str	r3, [r2, #0]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a3e:	4613      	mov	r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	4413      	add	r3, r2
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	4a13      	ldr	r2, [pc, #76]	; (8003a94 <xTaskRemoveFromEventList+0xb4>)
 8003a48:	441a      	add	r2, r3
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	3304      	adds	r3, #4
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4610      	mov	r0, r2
 8003a52:	f7ff fbdb 	bl	800320c <vListInsertEnd>
 8003a56:	e005      	b.n	8003a64 <xTaskRemoveFromEventList+0x84>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	3318      	adds	r3, #24
 8003a5c:	4619      	mov	r1, r3
 8003a5e:	480e      	ldr	r0, [pc, #56]	; (8003a98 <xTaskRemoveFromEventList+0xb8>)
 8003a60:	f7ff fbd4 	bl	800320c <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a68:	4b0c      	ldr	r3, [pc, #48]	; (8003a9c <xTaskRemoveFromEventList+0xbc>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d905      	bls.n	8003a7e <xTaskRemoveFromEventList+0x9e>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a72:	2301      	movs	r3, #1
 8003a74:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a76:	4b0a      	ldr	r3, [pc, #40]	; (8003aa0 <xTaskRemoveFromEventList+0xc0>)
 8003a78:	2201      	movs	r2, #1
 8003a7a:	601a      	str	r2, [r3, #0]
 8003a7c:	e001      	b.n	8003a82 <xTaskRemoveFromEventList+0xa2>
    }
    else
    {
        xReturn = pdFALSE;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8003a82:	697b      	ldr	r3, [r7, #20]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	200003a0 	.word	0x200003a0
 8003a90:	20000380 	.word	0x20000380
 8003a94:	2000027c 	.word	0x2000027c
 8003a98:	20000338 	.word	0x20000338
 8003a9c:	20000278 	.word	0x20000278
 8003aa0:	2000038c 	.word	0x2000038c

08003aa4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003aac:	4b06      	ldr	r3, [pc, #24]	; (8003ac8 <vTaskInternalSetTimeOutState+0x24>)
 8003aae:	681a      	ldr	r2, [r3, #0]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003ab4:	4b05      	ldr	r3, [pc, #20]	; (8003acc <vTaskInternalSetTimeOutState+0x28>)
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	605a      	str	r2, [r3, #4]
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bc80      	pop	{r7}
 8003ac4:	4770      	bx	lr
 8003ac6:	bf00      	nop
 8003ac8:	20000390 	.word	0x20000390
 8003acc:	2000037c 	.word	0x2000037c

08003ad0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b088      	sub	sp, #32
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10a      	bne.n	8003af6 <xTaskCheckForTimeOut+0x26>
        __asm volatile
 8003ae0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae4:	f383 8811 	msr	BASEPRI, r3
 8003ae8:	f3bf 8f6f 	isb	sy
 8003aec:	f3bf 8f4f 	dsb	sy
 8003af0:	613b      	str	r3, [r7, #16]
    }
 8003af2:	bf00      	nop
 8003af4:	e7fe      	b.n	8003af4 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d10a      	bne.n	8003b12 <xTaskCheckForTimeOut+0x42>
        __asm volatile
 8003afc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b00:	f383 8811 	msr	BASEPRI, r3
 8003b04:	f3bf 8f6f 	isb	sy
 8003b08:	f3bf 8f4f 	dsb	sy
 8003b0c:	60fb      	str	r3, [r7, #12]
    }
 8003b0e:	bf00      	nop
 8003b10:	e7fe      	b.n	8003b10 <xTaskCheckForTimeOut+0x40>

    taskENTER_CRITICAL();
 8003b12:	f000 faed 	bl	80040f0 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b16:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <xTaskCheckForTimeOut+0xc4>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d102      	bne.n	8003b36 <xTaskCheckForTimeOut+0x66>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	61fb      	str	r3, [r7, #28]
 8003b34:	e026      	b.n	8003b84 <xTaskCheckForTimeOut+0xb4>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	4b17      	ldr	r3, [pc, #92]	; (8003b98 <xTaskCheckForTimeOut+0xc8>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d00a      	beq.n	8003b58 <xTaskCheckForTimeOut+0x88>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	69ba      	ldr	r2, [r7, #24]
 8003b48:	429a      	cmp	r2, r3
 8003b4a:	d305      	bcc.n	8003b58 <xTaskCheckForTimeOut+0x88>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	2200      	movs	r2, #0
 8003b54:	601a      	str	r2, [r3, #0]
 8003b56:	e015      	b.n	8003b84 <xTaskCheckForTimeOut+0xb4>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	429a      	cmp	r2, r3
 8003b60:	d20b      	bcs.n	8003b7a <xTaskCheckForTimeOut+0xaa>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	1ad2      	subs	r2, r2, r3
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff ff98 	bl	8003aa4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b74:	2300      	movs	r3, #0
 8003b76:	61fb      	str	r3, [r7, #28]
 8003b78:	e004      	b.n	8003b84 <xTaskCheckForTimeOut+0xb4>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b80:	2301      	movs	r3, #1
 8003b82:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003b84:	f000 fae4 	bl	8004150 <vPortExitCritical>

    return xReturn;
 8003b88:	69fb      	ldr	r3, [r7, #28]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	2000037c 	.word	0x2000037c
 8003b98:	20000390 	.word	0x20000390

08003b9c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003ba0:	4b03      	ldr	r3, [pc, #12]	; (8003bb0 <vTaskMissedYield+0x14>)
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	601a      	str	r2, [r3, #0]
}
 8003ba6:	bf00      	nop
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bc80      	pop	{r7}
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	2000038c 	.word	0x2000038c

08003bb4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b082      	sub	sp, #8
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bbc:	f000 f852 	bl	8003c64 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bc0:	4b06      	ldr	r3, [pc, #24]	; (8003bdc <prvIdleTask+0x28>)
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d9f9      	bls.n	8003bbc <prvIdleTask+0x8>
                {
                    taskYIELD();
 8003bc8:	4b05      	ldr	r3, [pc, #20]	; (8003be0 <prvIdleTask+0x2c>)
 8003bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bce:	601a      	str	r2, [r3, #0]
 8003bd0:	f3bf 8f4f 	dsb	sy
 8003bd4:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bd8:	e7f0      	b.n	8003bbc <prvIdleTask+0x8>
 8003bda:	bf00      	nop
 8003bdc:	2000027c 	.word	0x2000027c
 8003be0:	e000ed04 	.word	0xe000ed04

08003be4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b082      	sub	sp, #8
 8003be8:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003bea:	2300      	movs	r3, #0
 8003bec:	607b      	str	r3, [r7, #4]
 8003bee:	e00c      	b.n	8003c0a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003bf0:	687a      	ldr	r2, [r7, #4]
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4413      	add	r3, r2
 8003bf8:	009b      	lsls	r3, r3, #2
 8003bfa:	4a12      	ldr	r2, [pc, #72]	; (8003c44 <prvInitialiseTaskLists+0x60>)
 8003bfc:	4413      	add	r3, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fad9 	bl	80031b6 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	3301      	adds	r3, #1
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2b06      	cmp	r3, #6
 8003c0e:	d9ef      	bls.n	8003bf0 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c10:	480d      	ldr	r0, [pc, #52]	; (8003c48 <prvInitialiseTaskLists+0x64>)
 8003c12:	f7ff fad0 	bl	80031b6 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c16:	480d      	ldr	r0, [pc, #52]	; (8003c4c <prvInitialiseTaskLists+0x68>)
 8003c18:	f7ff facd 	bl	80031b6 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c1c:	480c      	ldr	r0, [pc, #48]	; (8003c50 <prvInitialiseTaskLists+0x6c>)
 8003c1e:	f7ff faca 	bl	80031b6 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8003c22:	480c      	ldr	r0, [pc, #48]	; (8003c54 <prvInitialiseTaskLists+0x70>)
 8003c24:	f7ff fac7 	bl	80031b6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8003c28:	480b      	ldr	r0, [pc, #44]	; (8003c58 <prvInitialiseTaskLists+0x74>)
 8003c2a:	f7ff fac4 	bl	80031b6 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c2e:	4b0b      	ldr	r3, [pc, #44]	; (8003c5c <prvInitialiseTaskLists+0x78>)
 8003c30:	4a05      	ldr	r2, [pc, #20]	; (8003c48 <prvInitialiseTaskLists+0x64>)
 8003c32:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c34:	4b0a      	ldr	r3, [pc, #40]	; (8003c60 <prvInitialiseTaskLists+0x7c>)
 8003c36:	4a05      	ldr	r2, [pc, #20]	; (8003c4c <prvInitialiseTaskLists+0x68>)
 8003c38:	601a      	str	r2, [r3, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	3708      	adds	r7, #8
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	2000027c 	.word	0x2000027c
 8003c48:	20000308 	.word	0x20000308
 8003c4c:	2000031c 	.word	0x2000031c
 8003c50:	20000338 	.word	0x20000338
 8003c54:	2000034c 	.word	0x2000034c
 8003c58:	20000364 	.word	0x20000364
 8003c5c:	20000330 	.word	0x20000330
 8003c60:	20000334 	.word	0x20000334

08003c64 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c6a:	e019      	b.n	8003ca0 <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8003c6c:	f000 fa40 	bl	80040f0 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c70:	4b10      	ldr	r3, [pc, #64]	; (8003cb4 <prvCheckTasksWaitingTermination+0x50>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f7ff fb20 	bl	80032c2 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003c82:	4b0d      	ldr	r3, [pc, #52]	; (8003cb8 <prvCheckTasksWaitingTermination+0x54>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	3b01      	subs	r3, #1
 8003c88:	4a0b      	ldr	r2, [pc, #44]	; (8003cb8 <prvCheckTasksWaitingTermination+0x54>)
 8003c8a:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	; (8003cbc <prvCheckTasksWaitingTermination+0x58>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <prvCheckTasksWaitingTermination+0x58>)
 8003c94:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8003c96:	f000 fa5b 	bl	8004150 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f810 	bl	8003cc0 <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ca0:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <prvCheckTasksWaitingTermination+0x58>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d1e1      	bne.n	8003c6c <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	3708      	adds	r7, #8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	2000034c 	.word	0x2000034c
 8003cb8:	20000378 	.word	0x20000378
 8003cbc:	20000360 	.word	0x20000360

08003cc0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 fbed 	bl	80044ac <vPortFree>
                vPortFree( pxTCB );
 8003cd2:	6878      	ldr	r0, [r7, #4]
 8003cd4:	f000 fbea 	bl	80044ac <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}

08003ce0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <prvResetNextTaskUnblockTime+0x2c>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d104      	bne.n	8003cf8 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003cee:	4b08      	ldr	r3, [pc, #32]	; (8003d10 <prvResetNextTaskUnblockTime+0x30>)
 8003cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8003cf4:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003cf6:	e005      	b.n	8003d04 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003cf8:	4b04      	ldr	r3, [pc, #16]	; (8003d0c <prvResetNextTaskUnblockTime+0x2c>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68db      	ldr	r3, [r3, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a03      	ldr	r2, [pc, #12]	; (8003d10 <prvResetNextTaskUnblockTime+0x30>)
 8003d02:	6013      	str	r3, [r2, #0]
}
 8003d04:	bf00      	nop
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bc80      	pop	{r7}
 8003d0a:	4770      	bx	lr
 8003d0c:	20000330 	.word	0x20000330
 8003d10:	20000398 	.word	0x20000398

08003d14 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d1a:	4b0b      	ldr	r3, [pc, #44]	; (8003d48 <xTaskGetSchedulerState+0x34>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d102      	bne.n	8003d28 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d22:	2301      	movs	r3, #1
 8003d24:	607b      	str	r3, [r7, #4]
 8003d26:	e008      	b.n	8003d3a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d28:	4b08      	ldr	r3, [pc, #32]	; (8003d4c <xTaskGetSchedulerState+0x38>)
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d102      	bne.n	8003d36 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d30:	2302      	movs	r3, #2
 8003d32:	607b      	str	r3, [r7, #4]
 8003d34:	e001      	b.n	8003d3a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d36:	2300      	movs	r3, #0
 8003d38:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d3a:	687b      	ldr	r3, [r7, #4]
    }
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	370c      	adds	r7, #12
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bc80      	pop	{r7}
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	20000384 	.word	0x20000384
 8003d4c:	200003a0 	.word	0x200003a0

08003d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b086      	sub	sp, #24
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d063      	beq.n	8003e2e <xTaskPriorityDisinherit+0xde>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8003d66:	4b34      	ldr	r3, [pc, #208]	; (8003e38 <xTaskPriorityDisinherit+0xe8>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	693a      	ldr	r2, [r7, #16]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d00a      	beq.n	8003d86 <xTaskPriorityDisinherit+0x36>
        __asm volatile
 8003d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d74:	f383 8811 	msr	BASEPRI, r3
 8003d78:	f3bf 8f6f 	isb	sy
 8003d7c:	f3bf 8f4f 	dsb	sy
 8003d80:	60fb      	str	r3, [r7, #12]
    }
 8003d82:	bf00      	nop
 8003d84:	e7fe      	b.n	8003d84 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d10a      	bne.n	8003da4 <xTaskPriorityDisinherit+0x54>
        __asm volatile
 8003d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d92:	f383 8811 	msr	BASEPRI, r3
 8003d96:	f3bf 8f6f 	isb	sy
 8003d9a:	f3bf 8f4f 	dsb	sy
 8003d9e:	60bb      	str	r3, [r7, #8]
    }
 8003da0:	bf00      	nop
 8003da2:	e7fe      	b.n	8003da2 <xTaskPriorityDisinherit+0x52>
            ( pxTCB->uxMutexesHeld )--;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003da8:	1e5a      	subs	r2, r3, #1
 8003daa:	693b      	ldr	r3, [r7, #16]
 8003dac:	649a      	str	r2, [r3, #72]	; 0x48

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	429a      	cmp	r2, r3
 8003db8:	d039      	beq.n	8003e2e <xTaskPriorityDisinherit+0xde>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d135      	bne.n	8003e2e <xTaskPriorityDisinherit+0xde>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	3304      	adds	r3, #4
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	f7ff fa7b 	bl	80032c2 <uxListRemove>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <xTaskPriorityDisinherit+0x98>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ddc:	43da      	mvns	r2, r3
 8003dde:	4b17      	ldr	r3, [pc, #92]	; (8003e3c <xTaskPriorityDisinherit+0xec>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4013      	ands	r3, r2
 8003de4:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <xTaskPriorityDisinherit+0xec>)
 8003de6:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	62da      	str	r2, [r3, #44]	; 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df4:	f1c3 0207 	rsb	r2, r3, #7
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	619a      	str	r2, [r3, #24]
                    prvReaddTaskToReadyList( pxTCB );
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e00:	2201      	movs	r2, #1
 8003e02:	409a      	lsls	r2, r3
 8003e04:	4b0d      	ldr	r3, [pc, #52]	; (8003e3c <xTaskPriorityDisinherit+0xec>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	4a0c      	ldr	r2, [pc, #48]	; (8003e3c <xTaskPriorityDisinherit+0xec>)
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e12:	4613      	mov	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4413      	add	r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	4a09      	ldr	r2, [pc, #36]	; (8003e40 <xTaskPriorityDisinherit+0xf0>)
 8003e1c:	441a      	add	r2, r3
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	3304      	adds	r3, #4
 8003e22:	4619      	mov	r1, r3
 8003e24:	4610      	mov	r0, r2
 8003e26:	f7ff f9f1 	bl	800320c <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8003e2e:	697b      	ldr	r3, [r7, #20]
    }
 8003e30:	4618      	mov	r0, r3
 8003e32:	3718      	adds	r7, #24
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bd80      	pop	{r7, pc}
 8003e38:	20000278 	.word	0x20000278
 8003e3c:	20000380 	.word	0x20000380
 8003e40:	2000027c 	.word	0x2000027c

08003e44 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b084      	sub	sp, #16
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
 8003e4c:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e4e:	4b29      	ldr	r3, [pc, #164]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e54:	4b28      	ldr	r3, [pc, #160]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3304      	adds	r3, #4
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fa31 	bl	80032c2 <uxListRemove>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10b      	bne.n	8003e7e <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e66:	4b24      	ldr	r3, [pc, #144]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e6c:	2201      	movs	r2, #1
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43da      	mvns	r2, r3
 8003e74:	4b21      	ldr	r3, [pc, #132]	; (8003efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4013      	ands	r3, r2
 8003e7a:	4a20      	ldr	r2, [pc, #128]	; (8003efc <prvAddCurrentTaskToDelayedList+0xb8>)
 8003e7c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e84:	d10a      	bne.n	8003e9c <prvAddCurrentTaskToDelayedList+0x58>
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d007      	beq.n	8003e9c <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
				traceMOVED_TASK_TO_SUSPENDED_LIST(pxCurrentTCB);
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8c:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	3304      	adds	r3, #4
 8003e92:	4619      	mov	r1, r3
 8003e94:	481a      	ldr	r0, [pc, #104]	; (8003f00 <prvAddCurrentTaskToDelayedList+0xbc>)
 8003e96:	f7ff f9b9 	bl	800320c <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e9a:	e026      	b.n	8003eea <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 8003e9c:	68fa      	ldr	r2, [r7, #12]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4413      	add	r3, r2
 8003ea2:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ea4:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68ba      	ldr	r2, [r7, #8]
 8003eaa:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003eac:	68ba      	ldr	r2, [r7, #8]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d209      	bcs.n	8003ec8 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb4:	4b13      	ldr	r3, [pc, #76]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xc0>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f7ff f9c6 	bl	8003252 <vListInsert>
}
 8003ec6:	e010      	b.n	8003eea <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ec8:	4b0f      	ldr	r3, [pc, #60]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xc4>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	3304      	adds	r3, #4
 8003ed2:	4619      	mov	r1, r3
 8003ed4:	4610      	mov	r0, r2
 8003ed6:	f7ff f9bc 	bl	8003252 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003eda:	4b0c      	ldr	r3, [pc, #48]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d202      	bcs.n	8003eea <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8003ee4:	4a09      	ldr	r2, [pc, #36]	; (8003f0c <prvAddCurrentTaskToDelayedList+0xc8>)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	6013      	str	r3, [r2, #0]
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000037c 	.word	0x2000037c
 8003ef8:	20000278 	.word	0x20000278
 8003efc:	20000380 	.word	0x20000380
 8003f00:	20000364 	.word	0x20000364
 8003f04:	20000334 	.word	0x20000334
 8003f08:	20000330 	.word	0x20000330
 8003f0c:	20000398 	.word	0x20000398

08003f10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003f10:	b480      	push	{r7}
 8003f12:	b085      	sub	sp, #20
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	60b9      	str	r1, [r7, #8]
 8003f1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */
    pxTopOfStack--;                                                      /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	3b04      	subs	r3, #4
 8003f20:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3b04      	subs	r3, #4
 8003f2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	f023 0201 	bic.w	r2, r3, #1
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3b04      	subs	r3, #4
 8003f3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003f40:	4a08      	ldr	r2, [pc, #32]	; (8003f64 <pxPortInitialiseStack+0x54>)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 5;                                                   /* R12, R3, R2 and R1. */
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3b14      	subs	r3, #20
 8003f4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8003f4c:	687a      	ldr	r2, [r7, #4]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	601a      	str	r2, [r3, #0]
    pxTopOfStack -= 8;                                                   /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	3b20      	subs	r3, #32
 8003f56:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003f58:	68fb      	ldr	r3, [r7, #12]
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bc80      	pop	{r7}
 8003f62:	4770      	bx	lr
 8003f64:	08003f69 	.word	0x08003f69

08003f68 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0UL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003f72:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <prvTaskExitError+0x54>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f7a:	d00a      	beq.n	8003f92 <prvTaskExitError+0x2a>
        __asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	60fb      	str	r3, [r7, #12]
    }
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <prvTaskExitError+0x28>
        __asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	60bb      	str	r3, [r7, #8]
    }
 8003fa4:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003fa6:	bf00      	nop
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d0fc      	beq.n	8003fa8 <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003fae:	bf00      	nop
 8003fb0:	bf00      	nop
 8003fb2:	3714      	adds	r7, #20
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	20000010 	.word	0x20000010

08003fc0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003fc0:	4b07      	ldr	r3, [pc, #28]	; (8003fe0 <pxCurrentTCBConst2>)
 8003fc2:	6819      	ldr	r1, [r3, #0]
 8003fc4:	6808      	ldr	r0, [r1, #0]
 8003fc6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8003fca:	f380 8809 	msr	PSP, r0
 8003fce:	f3bf 8f6f 	isb	sy
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8811 	msr	BASEPRI, r0
 8003fda:	f04e 0e0d 	orr.w	lr, lr, #13
 8003fde:	4770      	bx	lr

08003fe0 <pxCurrentTCBConst2>:
 8003fe0:	20000278 	.word	0x20000278
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003fe4:	bf00      	nop
 8003fe6:	bf00      	nop

08003fe8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8003fe8:	4806      	ldr	r0, [pc, #24]	; (8004004 <prvPortStartFirstTask+0x1c>)
 8003fea:	6800      	ldr	r0, [r0, #0]
 8003fec:	6800      	ldr	r0, [r0, #0]
 8003fee:	f380 8808 	msr	MSP, r0
 8003ff2:	b662      	cpsie	i
 8003ff4:	b661      	cpsie	f
 8003ff6:	f3bf 8f4f 	dsb	sy
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	df00      	svc	0
 8004000:	bf00      	nop
 8004002:	0000      	.short	0x0000
 8004004:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004008:	bf00      	nop
 800400a:	bf00      	nop

0800400c <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004012:	4b32      	ldr	r3, [pc, #200]	; (80040dc <xPortStartScheduler+0xd0>)
 8004014:	60fb      	str	r3, [r7, #12]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	781b      	ldrb	r3, [r3, #0]
 800401a:	b2db      	uxtb	r3, r3
 800401c:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	22ff      	movs	r2, #255	; 0xff
 8004022:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	b2db      	uxtb	r3, r3
 800402a:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800402c:	78fb      	ldrb	r3, [r7, #3]
 800402e:	b2db      	uxtb	r3, r3
 8004030:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004034:	b2da      	uxtb	r2, r3
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <xPortStartScheduler+0xd4>)
 8004038:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800403a:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <xPortStartScheduler+0xd8>)
 800403c:	2207      	movs	r2, #7
 800403e:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004040:	e009      	b.n	8004056 <xPortStartScheduler+0x4a>
            {
                ulMaxPRIGROUPValue--;
 8004042:	4b28      	ldr	r3, [pc, #160]	; (80040e4 <xPortStartScheduler+0xd8>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	3b01      	subs	r3, #1
 8004048:	4a26      	ldr	r2, [pc, #152]	; (80040e4 <xPortStartScheduler+0xd8>)
 800404a:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800404c:	78fb      	ldrb	r3, [r7, #3]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	005b      	lsls	r3, r3, #1
 8004052:	b2db      	uxtb	r3, r3
 8004054:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004056:	78fb      	ldrb	r3, [r7, #3]
 8004058:	b2db      	uxtb	r3, r3
 800405a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800405e:	2b80      	cmp	r3, #128	; 0x80
 8004060:	d0ef      	beq.n	8004042 <xPortStartScheduler+0x36>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004062:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <xPortStartScheduler+0xd8>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f1c3 0307 	rsb	r3, r3, #7
 800406a:	2b04      	cmp	r3, #4
 800406c:	d00a      	beq.n	8004084 <xPortStartScheduler+0x78>
        __asm volatile
 800406e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004072:	f383 8811 	msr	BASEPRI, r3
 8004076:	f3bf 8f6f 	isb	sy
 800407a:	f3bf 8f4f 	dsb	sy
 800407e:	60bb      	str	r3, [r7, #8]
    }
 8004080:	bf00      	nop
 8004082:	e7fe      	b.n	8004082 <xPortStartScheduler+0x76>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004084:	4b17      	ldr	r3, [pc, #92]	; (80040e4 <xPortStartScheduler+0xd8>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	021b      	lsls	r3, r3, #8
 800408a:	4a16      	ldr	r2, [pc, #88]	; (80040e4 <xPortStartScheduler+0xd8>)
 800408c:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800408e:	4b15      	ldr	r3, [pc, #84]	; (80040e4 <xPortStartScheduler+0xd8>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004096:	4a13      	ldr	r2, [pc, #76]	; (80040e4 <xPortStartScheduler+0xd8>)
 8004098:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	b2da      	uxtb	r2, r3
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <xPortStartScheduler+0xdc>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <xPortStartScheduler+0xdc>)
 80040a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040ac:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <xPortStartScheduler+0xdc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a0d      	ldr	r2, [pc, #52]	; (80040e8 <xPortStartScheduler+0xdc>)
 80040b4:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040b8:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80040ba:	f000 f8b7 	bl	800422c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80040be:	4b0b      	ldr	r3, [pc, #44]	; (80040ec <xPortStartScheduler+0xe0>)
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80040c4:	f7ff ff90 	bl	8003fe8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80040c8:	f7ff fc0c 	bl	80038e4 <vTaskSwitchContext>
    prvTaskExitError();
 80040cc:	f7ff ff4c 	bl	8003f68 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80040d0:	2300      	movs	r3, #0
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3710      	adds	r7, #16
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	e000e400 	.word	0xe000e400
 80040e0:	200003a4 	.word	0x200003a4
 80040e4:	200003a8 	.word	0x200003a8
 80040e8:	e000ed20 	.word	0xe000ed20
 80040ec:	20000010 	.word	0x20000010

080040f0 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80040f0:	b480      	push	{r7}
 80040f2:	b083      	sub	sp, #12
 80040f4:	af00      	add	r7, sp, #0
        __asm volatile
 80040f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040fa:	f383 8811 	msr	BASEPRI, r3
 80040fe:	f3bf 8f6f 	isb	sy
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	607b      	str	r3, [r7, #4]
    }
 8004108:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <vPortEnterCritical+0x58>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3301      	adds	r3, #1
 8004110:	4a0d      	ldr	r2, [pc, #52]	; (8004148 <vPortEnterCritical+0x58>)
 8004112:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004114:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <vPortEnterCritical+0x58>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b01      	cmp	r3, #1
 800411a:	d10f      	bne.n	800413c <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <vPortEnterCritical+0x5c>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	b2db      	uxtb	r3, r3
 8004122:	2b00      	cmp	r3, #0
 8004124:	d00a      	beq.n	800413c <vPortEnterCritical+0x4c>
        __asm volatile
 8004126:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412a:	f383 8811 	msr	BASEPRI, r3
 800412e:	f3bf 8f6f 	isb	sy
 8004132:	f3bf 8f4f 	dsb	sy
 8004136:	603b      	str	r3, [r7, #0]
    }
 8004138:	bf00      	nop
 800413a:	e7fe      	b.n	800413a <vPortEnterCritical+0x4a>
    }
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	bc80      	pop	{r7}
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	20000010 	.word	0x20000010
 800414c:	e000ed04 	.word	0xe000ed04

08004150 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004150:	b480      	push	{r7}
 8004152:	b083      	sub	sp, #12
 8004154:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004156:	4b11      	ldr	r3, [pc, #68]	; (800419c <vPortExitCritical+0x4c>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d10a      	bne.n	8004174 <vPortExitCritical+0x24>
        __asm volatile
 800415e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004162:	f383 8811 	msr	BASEPRI, r3
 8004166:	f3bf 8f6f 	isb	sy
 800416a:	f3bf 8f4f 	dsb	sy
 800416e:	607b      	str	r3, [r7, #4]
    }
 8004170:	bf00      	nop
 8004172:	e7fe      	b.n	8004172 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <vPortExitCritical+0x4c>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	3b01      	subs	r3, #1
 800417a:	4a08      	ldr	r2, [pc, #32]	; (800419c <vPortExitCritical+0x4c>)
 800417c:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800417e:	4b07      	ldr	r3, [pc, #28]	; (800419c <vPortExitCritical+0x4c>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2b00      	cmp	r3, #0
 8004184:	d105      	bne.n	8004192 <vPortExitCritical+0x42>
 8004186:	2300      	movs	r3, #0
 8004188:	603b      	str	r3, [r7, #0]
        __asm volatile
 800418a:	683b      	ldr	r3, [r7, #0]
 800418c:	f383 8811 	msr	BASEPRI, r3
    }
 8004190:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	bc80      	pop	{r7}
 800419a:	4770      	bx	lr
 800419c:	20000010 	.word	0x20000010

080041a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80041a0:	f3ef 8009 	mrs	r0, PSP
 80041a4:	f3bf 8f6f 	isb	sy
 80041a8:	4b0d      	ldr	r3, [pc, #52]	; (80041e0 <pxCurrentTCBConst>)
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041b0:	6010      	str	r0, [r2, #0]
 80041b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80041b6:	f04f 0050 	mov.w	r0, #80	; 0x50
 80041ba:	f380 8811 	msr	BASEPRI, r0
 80041be:	f7ff fb91 	bl	80038e4 <vTaskSwitchContext>
 80041c2:	f04f 0000 	mov.w	r0, #0
 80041c6:	f380 8811 	msr	BASEPRI, r0
 80041ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80041ce:	6819      	ldr	r1, [r3, #0]
 80041d0:	6808      	ldr	r0, [r1, #0]
 80041d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80041d6:	f380 8809 	msr	PSP, r0
 80041da:	f3bf 8f6f 	isb	sy
 80041de:	4770      	bx	lr

080041e0 <pxCurrentTCBConst>:
 80041e0:	20000278 	.word	0x20000278
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80041e4:	bf00      	nop
 80041e6:	bf00      	nop

080041e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
        __asm volatile
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	607b      	str	r3, [r7, #4]
    }
 8004200:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004202:	f7ff fab7 	bl	8003774 <xTaskIncrementTick>
 8004206:	4603      	mov	r3, r0
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <SysTick_Handler+0x2c>
        {
			traceISR_EXIT_TO_SCHEDULER();
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800420c:	4b06      	ldr	r3, [pc, #24]	; (8004228 <SysTick_Handler+0x40>)
 800420e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	2300      	movs	r3, #0
 8004216:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f383 8811 	msr	BASEPRI, r3
    }
 800421e:	bf00      	nop
		{
			traceISR_EXIT();
		}
    }
    portENABLE_INTERRUPTS();
}
 8004220:	bf00      	nop
 8004222:	3708      	adds	r7, #8
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	e000ed04 	.word	0xe000ed04

0800422c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800422c:	b480      	push	{r7}
 800422e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <vPortSetupTimerInterrupt+0x30>)
 8004232:	2200      	movs	r2, #0
 8004234:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004236:	4b0a      	ldr	r3, [pc, #40]	; (8004260 <vPortSetupTimerInterrupt+0x34>)
 8004238:	2200      	movs	r2, #0
 800423a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800423c:	4b09      	ldr	r3, [pc, #36]	; (8004264 <vPortSetupTimerInterrupt+0x38>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a09      	ldr	r2, [pc, #36]	; (8004268 <vPortSetupTimerInterrupt+0x3c>)
 8004242:	fba2 2303 	umull	r2, r3, r2, r3
 8004246:	099b      	lsrs	r3, r3, #6
 8004248:	4a08      	ldr	r2, [pc, #32]	; (800426c <vPortSetupTimerInterrupt+0x40>)
 800424a:	3b01      	subs	r3, #1
 800424c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800424e:	4b03      	ldr	r3, [pc, #12]	; (800425c <vPortSetupTimerInterrupt+0x30>)
 8004250:	2207      	movs	r2, #7
 8004252:	601a      	str	r2, [r3, #0]
}
 8004254:	bf00      	nop
 8004256:	46bd      	mov	sp, r7
 8004258:	bc80      	pop	{r7}
 800425a:	4770      	bx	lr
 800425c:	e000e010 	.word	0xe000e010
 8004260:	e000e018 	.word	0xe000e018
 8004264:	20000000 	.word	0x20000000
 8004268:	10624dd3 	.word	0x10624dd3
 800426c:	e000e014 	.word	0xe000e014

08004270 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8004270:	b480      	push	{r7}
 8004272:	b085      	sub	sp, #20
 8004274:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004276:	f3ef 8305 	mrs	r3, IPSR
 800427a:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2b0f      	cmp	r3, #15
 8004280:	d914      	bls.n	80042ac <vPortValidateInterruptPriority+0x3c>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004282:	4a16      	ldr	r2, [pc, #88]	; (80042dc <vPortValidateInterruptPriority+0x6c>)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	4413      	add	r3, r2
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800428c:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <vPortValidateInterruptPriority+0x70>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	7afa      	ldrb	r2, [r7, #11]
 8004292:	429a      	cmp	r2, r3
 8004294:	d20a      	bcs.n	80042ac <vPortValidateInterruptPriority+0x3c>
        __asm volatile
 8004296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800429a:	f383 8811 	msr	BASEPRI, r3
 800429e:	f3bf 8f6f 	isb	sy
 80042a2:	f3bf 8f4f 	dsb	sy
 80042a6:	607b      	str	r3, [r7, #4]
    }
 80042a8:	bf00      	nop
 80042aa:	e7fe      	b.n	80042aa <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <vPortValidateInterruptPriority+0x74>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80042b4:	4b0c      	ldr	r3, [pc, #48]	; (80042e8 <vPortValidateInterruptPriority+0x78>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d90a      	bls.n	80042d2 <vPortValidateInterruptPriority+0x62>
        __asm volatile
 80042bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c0:	f383 8811 	msr	BASEPRI, r3
 80042c4:	f3bf 8f6f 	isb	sy
 80042c8:	f3bf 8f4f 	dsb	sy
 80042cc:	603b      	str	r3, [r7, #0]
    }
 80042ce:	bf00      	nop
 80042d0:	e7fe      	b.n	80042d0 <vPortValidateInterruptPriority+0x60>
    }
 80042d2:	bf00      	nop
 80042d4:	3714      	adds	r7, #20
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bc80      	pop	{r7}
 80042da:	4770      	bx	lr
 80042dc:	e000e3f0 	.word	0xe000e3f0
 80042e0:	200003a4 	.word	0x200003a4
 80042e4:	e000ed0c 	.word	0xe000ed0c
 80042e8:	200003a8 	.word	0x200003a8

080042ec <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08a      	sub	sp, #40	; 0x28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 80042f8:	f7ff f992 	bl	8003620 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042fc:	4b65      	ldr	r3, [pc, #404]	; (8004494 <pvPortMalloc+0x1a8>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d101      	bne.n	8004308 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004304:	f000 f934 	bl	8004570 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004308:	4b63      	ldr	r3, [pc, #396]	; (8004498 <pvPortMalloc+0x1ac>)
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4013      	ands	r3, r2
 8004310:	2b00      	cmp	r3, #0
 8004312:	f040 80a7 	bne.w	8004464 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d02d      	beq.n	8004378 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 800431c:	2208      	movs	r2, #8
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	429a      	cmp	r2, r3
 8004326:	d227      	bcs.n	8004378 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8004328:	2208      	movs	r2, #8
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4413      	add	r3, r2
 800432e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	2b00      	cmp	r3, #0
 8004338:	d021      	beq.n	800437e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	3308      	adds	r3, #8
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	429a      	cmp	r2, r3
 8004346:	d214      	bcs.n	8004372 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f023 0307 	bic.w	r3, r3, #7
 800434e:	3308      	adds	r3, #8
 8004350:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f003 0307 	and.w	r3, r3, #7
 8004358:	2b00      	cmp	r3, #0
 800435a:	d010      	beq.n	800437e <pvPortMalloc+0x92>
        __asm volatile
 800435c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004360:	f383 8811 	msr	BASEPRI, r3
 8004364:	f3bf 8f6f 	isb	sy
 8004368:	f3bf 8f4f 	dsb	sy
 800436c:	617b      	str	r3, [r7, #20]
    }
 800436e:	bf00      	nop
 8004370:	e7fe      	b.n	8004370 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8004372:	2300      	movs	r3, #0
 8004374:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004376:	e002      	b.n	800437e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	e000      	b.n	8004380 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800437e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d06e      	beq.n	8004464 <pvPortMalloc+0x178>
 8004386:	4b45      	ldr	r3, [pc, #276]	; (800449c <pvPortMalloc+0x1b0>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	429a      	cmp	r2, r3
 800438e:	d869      	bhi.n	8004464 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004390:	4b43      	ldr	r3, [pc, #268]	; (80044a0 <pvPortMalloc+0x1b4>)
 8004392:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004394:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <pvPortMalloc+0x1b4>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800439a:	e004      	b.n	80043a6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800439c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800439e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	687a      	ldr	r2, [r7, #4]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	d903      	bls.n	80043b8 <pvPortMalloc+0xcc>
 80043b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1f1      	bne.n	800439c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80043b8:	4b36      	ldr	r3, [pc, #216]	; (8004494 <pvPortMalloc+0x1a8>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043be:	429a      	cmp	r2, r3
 80043c0:	d050      	beq.n	8004464 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80043c2:	6a3b      	ldr	r3, [r7, #32]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	2208      	movs	r2, #8
 80043c8:	4413      	add	r3, r2
 80043ca:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80043cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	6a3b      	ldr	r3, [r7, #32]
 80043d2:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80043d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	1ad2      	subs	r2, r2, r3
 80043dc:	2308      	movs	r3, #8
 80043de:	005b      	lsls	r3, r3, #1
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d91f      	bls.n	8004424 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80043e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4413      	add	r3, r2
 80043ea:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	f003 0307 	and.w	r3, r3, #7
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d00a      	beq.n	800440c <pvPortMalloc+0x120>
        __asm volatile
 80043f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043fa:	f383 8811 	msr	BASEPRI, r3
 80043fe:	f3bf 8f6f 	isb	sy
 8004402:	f3bf 8f4f 	dsb	sy
 8004406:	613b      	str	r3, [r7, #16]
    }
 8004408:	bf00      	nop
 800440a:	e7fe      	b.n	800440a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800440c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440e:	685a      	ldr	r2, [r3, #4]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	1ad2      	subs	r2, r2, r3
 8004414:	69bb      	ldr	r3, [r7, #24]
 8004416:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800441e:	69b8      	ldr	r0, [r7, #24]
 8004420:	f000 f908 	bl	8004634 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <pvPortMalloc+0x1b0>)
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	4a1b      	ldr	r2, [pc, #108]	; (800449c <pvPortMalloc+0x1b0>)
 8004430:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004432:	4b1a      	ldr	r3, [pc, #104]	; (800449c <pvPortMalloc+0x1b0>)
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <pvPortMalloc+0x1b8>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	429a      	cmp	r2, r3
 800443c:	d203      	bcs.n	8004446 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800443e:	4b17      	ldr	r3, [pc, #92]	; (800449c <pvPortMalloc+0x1b0>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a18      	ldr	r2, [pc, #96]	; (80044a4 <pvPortMalloc+0x1b8>)
 8004444:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004448:	685a      	ldr	r2, [r3, #4]
 800444a:	4b13      	ldr	r3, [pc, #76]	; (8004498 <pvPortMalloc+0x1ac>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	431a      	orrs	r2, r3
 8004450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004452:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800445a:	4b13      	ldr	r3, [pc, #76]	; (80044a8 <pvPortMalloc+0x1bc>)
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3301      	adds	r3, #1
 8004460:	4a11      	ldr	r2, [pc, #68]	; (80044a8 <pvPortMalloc+0x1bc>)
 8004462:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004464:	f7ff f8ea 	bl	800363c <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	2b00      	cmp	r3, #0
 8004470:	d00a      	beq.n	8004488 <pvPortMalloc+0x19c>
        __asm volatile
 8004472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004476:	f383 8811 	msr	BASEPRI, r3
 800447a:	f3bf 8f6f 	isb	sy
 800447e:	f3bf 8f4f 	dsb	sy
 8004482:	60fb      	str	r3, [r7, #12]
    }
 8004484:	bf00      	nop
 8004486:	e7fe      	b.n	8004486 <pvPortMalloc+0x19a>
    return pvReturn;
 8004488:	69fb      	ldr	r3, [r7, #28]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3728      	adds	r7, #40	; 0x28
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	2000173c 	.word	0x2000173c
 8004498:	20001750 	.word	0x20001750
 800449c:	20001740 	.word	0x20001740
 80044a0:	20001734 	.word	0x20001734
 80044a4:	20001744 	.word	0x20001744
 80044a8:	20001748 	.word	0x20001748

080044ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d04d      	beq.n	800455a <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80044be:	2308      	movs	r3, #8
 80044c0:	425b      	negs	r3, r3
 80044c2:	697a      	ldr	r2, [r7, #20]
 80044c4:	4413      	add	r3, r2
 80044c6:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 80044c8:	697b      	ldr	r3, [r7, #20]
 80044ca:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80044cc:	693b      	ldr	r3, [r7, #16]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	4b24      	ldr	r3, [pc, #144]	; (8004564 <vPortFree+0xb8>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4013      	ands	r3, r2
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <vPortFree+0x44>
        __asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	60fb      	str	r3, [r7, #12]
    }
 80044ec:	bf00      	nop
 80044ee:	e7fe      	b.n	80044ee <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <vPortFree+0x62>
        __asm volatile
 80044f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044fc:	f383 8811 	msr	BASEPRI, r3
 8004500:	f3bf 8f6f 	isb	sy
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	60bb      	str	r3, [r7, #8]
    }
 800450a:	bf00      	nop
 800450c:	e7fe      	b.n	800450c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4b14      	ldr	r3, [pc, #80]	; (8004564 <vPortFree+0xb8>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4013      	ands	r3, r2
 8004518:	2b00      	cmp	r3, #0
 800451a:	d01e      	beq.n	800455a <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d11a      	bne.n	800455a <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	685a      	ldr	r2, [r3, #4]
 8004528:	4b0e      	ldr	r3, [pc, #56]	; (8004564 <vPortFree+0xb8>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	43db      	mvns	r3, r3
 800452e:	401a      	ands	r2, r3
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8004534:	f7ff f874 	bl	8003620 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	4b0a      	ldr	r3, [pc, #40]	; (8004568 <vPortFree+0xbc>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4413      	add	r3, r2
 8004542:	4a09      	ldr	r2, [pc, #36]	; (8004568 <vPortFree+0xbc>)
 8004544:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004546:	6938      	ldr	r0, [r7, #16]
 8004548:	f000 f874 	bl	8004634 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800454c:	4b07      	ldr	r3, [pc, #28]	; (800456c <vPortFree+0xc0>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	3301      	adds	r3, #1
 8004552:	4a06      	ldr	r2, [pc, #24]	; (800456c <vPortFree+0xc0>)
 8004554:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004556:	f7ff f871 	bl	800363c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800455a:	bf00      	nop
 800455c:	3718      	adds	r7, #24
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	20001750 	.word	0x20001750
 8004568:	20001740 	.word	0x20001740
 800456c:	2000174c 	.word	0x2000174c

08004570 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004570:	b480      	push	{r7}
 8004572:	b085      	sub	sp, #20
 8004574:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004576:	f241 3388 	movw	r3, #5000	; 0x1388
 800457a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800457c:	4b27      	ldr	r3, [pc, #156]	; (800461c <prvHeapInit+0xac>)
 800457e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f003 0307 	and.w	r3, r3, #7
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00c      	beq.n	80045a4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	3307      	adds	r3, #7
 800458e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f023 0307 	bic.w	r3, r3, #7
 8004596:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004598:	68ba      	ldr	r2, [r7, #8]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	1ad3      	subs	r3, r2, r3
 800459e:	4a1f      	ldr	r2, [pc, #124]	; (800461c <prvHeapInit+0xac>)
 80045a0:	4413      	add	r3, r2
 80045a2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80045a8:	4a1d      	ldr	r2, [pc, #116]	; (8004620 <prvHeapInit+0xb0>)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 80045ae:	4b1c      	ldr	r3, [pc, #112]	; (8004620 <prvHeapInit+0xb0>)
 80045b0:	2200      	movs	r2, #0
 80045b2:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68ba      	ldr	r2, [r7, #8]
 80045b8:	4413      	add	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 80045bc:	2208      	movs	r2, #8
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1a9b      	subs	r3, r3, r2
 80045c2:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f023 0307 	bic.w	r3, r3, #7
 80045ca:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4a15      	ldr	r2, [pc, #84]	; (8004624 <prvHeapInit+0xb4>)
 80045d0:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 80045d2:	4b14      	ldr	r3, [pc, #80]	; (8004624 <prvHeapInit+0xb4>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2200      	movs	r2, #0
 80045d8:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <prvHeapInit+0xb4>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2200      	movs	r2, #0
 80045e0:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	68fa      	ldr	r2, [r7, #12]
 80045ea:	1ad2      	subs	r2, r2, r3
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80045f0:	4b0c      	ldr	r3, [pc, #48]	; (8004624 <prvHeapInit+0xb4>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	685b      	ldr	r3, [r3, #4]
 80045fc:	4a0a      	ldr	r2, [pc, #40]	; (8004628 <prvHeapInit+0xb8>)
 80045fe:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	4a09      	ldr	r2, [pc, #36]	; (800462c <prvHeapInit+0xbc>)
 8004606:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004608:	4b09      	ldr	r3, [pc, #36]	; (8004630 <prvHeapInit+0xc0>)
 800460a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800460e:	601a      	str	r2, [r3, #0]
}
 8004610:	bf00      	nop
 8004612:	3714      	adds	r7, #20
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	200003ac 	.word	0x200003ac
 8004620:	20001734 	.word	0x20001734
 8004624:	2000173c 	.word	0x2000173c
 8004628:	20001744 	.word	0x20001744
 800462c:	20001740 	.word	0x20001740
 8004630:	20001750 	.word	0x20001750

08004634 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800463c:	4b27      	ldr	r3, [pc, #156]	; (80046dc <prvInsertBlockIntoFreeList+0xa8>)
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e002      	b.n	8004648 <prvInsertBlockIntoFreeList+0x14>
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	60fb      	str	r3, [r7, #12]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	687a      	ldr	r2, [r7, #4]
 800464e:	429a      	cmp	r2, r3
 8004650:	d8f7      	bhi.n	8004642 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	68ba      	ldr	r2, [r7, #8]
 800465c:	4413      	add	r3, r2
 800465e:	687a      	ldr	r2, [r7, #4]
 8004660:	429a      	cmp	r2, r3
 8004662:	d108      	bne.n	8004676 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	685a      	ldr	r2, [r3, #4]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	441a      	add	r2, r3
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	441a      	add	r2, r3
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	429a      	cmp	r2, r3
 8004688:	d118      	bne.n	80046bc <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	4b14      	ldr	r3, [pc, #80]	; (80046e0 <prvInsertBlockIntoFreeList+0xac>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	429a      	cmp	r2, r3
 8004694:	d00d      	beq.n	80046b2 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685a      	ldr	r2, [r3, #4]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	441a      	add	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	601a      	str	r2, [r3, #0]
 80046b0:	e008      	b.n	80046c4 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80046b2:	4b0b      	ldr	r3, [pc, #44]	; (80046e0 <prvInsertBlockIntoFreeList+0xac>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	601a      	str	r2, [r3, #0]
 80046ba:	e003      	b.n	80046c4 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 80046c4:	68fa      	ldr	r2, [r7, #12]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d002      	beq.n	80046d2 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	687a      	ldr	r2, [r7, #4]
 80046d0:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80046d2:	bf00      	nop
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bc80      	pop	{r7}
 80046da:	4770      	bx	lr
 80046dc:	20001734 	.word	0x20001734
 80046e0:	2000173c 	.word	0x2000173c

080046e4 <__errno>:
 80046e4:	4b01      	ldr	r3, [pc, #4]	; (80046ec <__errno+0x8>)
 80046e6:	6818      	ldr	r0, [r3, #0]
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000014 	.word	0x20000014

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	2600      	movs	r6, #0
 80046f4:	4d0c      	ldr	r5, [pc, #48]	; (8004728 <__libc_init_array+0x38>)
 80046f6:	4c0d      	ldr	r4, [pc, #52]	; (800472c <__libc_init_array+0x3c>)
 80046f8:	1b64      	subs	r4, r4, r5
 80046fa:	10a4      	asrs	r4, r4, #2
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	f000 fc9c 	bl	800503c <_init>
 8004704:	2600      	movs	r6, #0
 8004706:	4d0a      	ldr	r5, [pc, #40]	; (8004730 <__libc_init_array+0x40>)
 8004708:	4c0a      	ldr	r4, [pc, #40]	; (8004734 <__libc_init_array+0x44>)
 800470a:	1b64      	subs	r4, r4, r5
 800470c:	10a4      	asrs	r4, r4, #2
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f855 3b04 	ldr.w	r3, [r5], #4
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	080050d0 	.word	0x080050d0
 800472c:	080050d0 	.word	0x080050d0
 8004730:	080050d0 	.word	0x080050d0
 8004734:	080050d4 	.word	0x080050d4

08004738 <memcpy>:
 8004738:	440a      	add	r2, r1
 800473a:	4291      	cmp	r1, r2
 800473c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004740:	d100      	bne.n	8004744 <memcpy+0xc>
 8004742:	4770      	bx	lr
 8004744:	b510      	push	{r4, lr}
 8004746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800474a:	4291      	cmp	r1, r2
 800474c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004750:	d1f9      	bne.n	8004746 <memcpy+0xe>
 8004752:	bd10      	pop	{r4, pc}

08004754 <memset>:
 8004754:	4603      	mov	r3, r0
 8004756:	4402      	add	r2, r0
 8004758:	4293      	cmp	r3, r2
 800475a:	d100      	bne.n	800475e <memset+0xa>
 800475c:	4770      	bx	lr
 800475e:	f803 1b01 	strb.w	r1, [r3], #1
 8004762:	e7f9      	b.n	8004758 <memset+0x4>

08004764 <siprintf>:
 8004764:	b40e      	push	{r1, r2, r3}
 8004766:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800476a:	b500      	push	{lr}
 800476c:	b09c      	sub	sp, #112	; 0x70
 800476e:	ab1d      	add	r3, sp, #116	; 0x74
 8004770:	9002      	str	r0, [sp, #8]
 8004772:	9006      	str	r0, [sp, #24]
 8004774:	9107      	str	r1, [sp, #28]
 8004776:	9104      	str	r1, [sp, #16]
 8004778:	4808      	ldr	r0, [pc, #32]	; (800479c <siprintf+0x38>)
 800477a:	4909      	ldr	r1, [pc, #36]	; (80047a0 <siprintf+0x3c>)
 800477c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004780:	9105      	str	r1, [sp, #20]
 8004782:	6800      	ldr	r0, [r0, #0]
 8004784:	a902      	add	r1, sp, #8
 8004786:	9301      	str	r3, [sp, #4]
 8004788:	f000 f868 	bl	800485c <_svfiprintf_r>
 800478c:	2200      	movs	r2, #0
 800478e:	9b02      	ldr	r3, [sp, #8]
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	b01c      	add	sp, #112	; 0x70
 8004794:	f85d eb04 	ldr.w	lr, [sp], #4
 8004798:	b003      	add	sp, #12
 800479a:	4770      	bx	lr
 800479c:	20000014 	.word	0x20000014
 80047a0:	ffff0208 	.word	0xffff0208

080047a4 <__ssputs_r>:
 80047a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	688e      	ldr	r6, [r1, #8]
 80047aa:	4682      	mov	sl, r0
 80047ac:	429e      	cmp	r6, r3
 80047ae:	460c      	mov	r4, r1
 80047b0:	4690      	mov	r8, r2
 80047b2:	461f      	mov	r7, r3
 80047b4:	d838      	bhi.n	8004828 <__ssputs_r+0x84>
 80047b6:	898a      	ldrh	r2, [r1, #12]
 80047b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047bc:	d032      	beq.n	8004824 <__ssputs_r+0x80>
 80047be:	6825      	ldr	r5, [r4, #0]
 80047c0:	6909      	ldr	r1, [r1, #16]
 80047c2:	3301      	adds	r3, #1
 80047c4:	eba5 0901 	sub.w	r9, r5, r1
 80047c8:	6965      	ldr	r5, [r4, #20]
 80047ca:	444b      	add	r3, r9
 80047cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047d4:	106d      	asrs	r5, r5, #1
 80047d6:	429d      	cmp	r5, r3
 80047d8:	bf38      	it	cc
 80047da:	461d      	movcc	r5, r3
 80047dc:	0553      	lsls	r3, r2, #21
 80047de:	d531      	bpl.n	8004844 <__ssputs_r+0xa0>
 80047e0:	4629      	mov	r1, r5
 80047e2:	f000 fb61 	bl	8004ea8 <_malloc_r>
 80047e6:	4606      	mov	r6, r0
 80047e8:	b950      	cbnz	r0, 8004800 <__ssputs_r+0x5c>
 80047ea:	230c      	movs	r3, #12
 80047ec:	f04f 30ff 	mov.w	r0, #4294967295
 80047f0:	f8ca 3000 	str.w	r3, [sl]
 80047f4:	89a3      	ldrh	r3, [r4, #12]
 80047f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047fa:	81a3      	strh	r3, [r4, #12]
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	464a      	mov	r2, r9
 8004802:	6921      	ldr	r1, [r4, #16]
 8004804:	f7ff ff98 	bl	8004738 <memcpy>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800480e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	6126      	str	r6, [r4, #16]
 8004816:	444e      	add	r6, r9
 8004818:	6026      	str	r6, [r4, #0]
 800481a:	463e      	mov	r6, r7
 800481c:	6165      	str	r5, [r4, #20]
 800481e:	eba5 0509 	sub.w	r5, r5, r9
 8004822:	60a5      	str	r5, [r4, #8]
 8004824:	42be      	cmp	r6, r7
 8004826:	d900      	bls.n	800482a <__ssputs_r+0x86>
 8004828:	463e      	mov	r6, r7
 800482a:	4632      	mov	r2, r6
 800482c:	4641      	mov	r1, r8
 800482e:	6820      	ldr	r0, [r4, #0]
 8004830:	f000 fab8 	bl	8004da4 <memmove>
 8004834:	68a3      	ldr	r3, [r4, #8]
 8004836:	2000      	movs	r0, #0
 8004838:	1b9b      	subs	r3, r3, r6
 800483a:	60a3      	str	r3, [r4, #8]
 800483c:	6823      	ldr	r3, [r4, #0]
 800483e:	4433      	add	r3, r6
 8004840:	6023      	str	r3, [r4, #0]
 8004842:	e7db      	b.n	80047fc <__ssputs_r+0x58>
 8004844:	462a      	mov	r2, r5
 8004846:	f000 fba3 	bl	8004f90 <_realloc_r>
 800484a:	4606      	mov	r6, r0
 800484c:	2800      	cmp	r0, #0
 800484e:	d1e1      	bne.n	8004814 <__ssputs_r+0x70>
 8004850:	4650      	mov	r0, sl
 8004852:	6921      	ldr	r1, [r4, #16]
 8004854:	f000 fac0 	bl	8004dd8 <_free_r>
 8004858:	e7c7      	b.n	80047ea <__ssputs_r+0x46>
	...

0800485c <_svfiprintf_r>:
 800485c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004860:	4698      	mov	r8, r3
 8004862:	898b      	ldrh	r3, [r1, #12]
 8004864:	4607      	mov	r7, r0
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	460d      	mov	r5, r1
 800486a:	4614      	mov	r4, r2
 800486c:	b09d      	sub	sp, #116	; 0x74
 800486e:	d50e      	bpl.n	800488e <_svfiprintf_r+0x32>
 8004870:	690b      	ldr	r3, [r1, #16]
 8004872:	b963      	cbnz	r3, 800488e <_svfiprintf_r+0x32>
 8004874:	2140      	movs	r1, #64	; 0x40
 8004876:	f000 fb17 	bl	8004ea8 <_malloc_r>
 800487a:	6028      	str	r0, [r5, #0]
 800487c:	6128      	str	r0, [r5, #16]
 800487e:	b920      	cbnz	r0, 800488a <_svfiprintf_r+0x2e>
 8004880:	230c      	movs	r3, #12
 8004882:	603b      	str	r3, [r7, #0]
 8004884:	f04f 30ff 	mov.w	r0, #4294967295
 8004888:	e0d1      	b.n	8004a2e <_svfiprintf_r+0x1d2>
 800488a:	2340      	movs	r3, #64	; 0x40
 800488c:	616b      	str	r3, [r5, #20]
 800488e:	2300      	movs	r3, #0
 8004890:	9309      	str	r3, [sp, #36]	; 0x24
 8004892:	2320      	movs	r3, #32
 8004894:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004898:	2330      	movs	r3, #48	; 0x30
 800489a:	f04f 0901 	mov.w	r9, #1
 800489e:	f8cd 800c 	str.w	r8, [sp, #12]
 80048a2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a48 <_svfiprintf_r+0x1ec>
 80048a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048aa:	4623      	mov	r3, r4
 80048ac:	469a      	mov	sl, r3
 80048ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048b2:	b10a      	cbz	r2, 80048b8 <_svfiprintf_r+0x5c>
 80048b4:	2a25      	cmp	r2, #37	; 0x25
 80048b6:	d1f9      	bne.n	80048ac <_svfiprintf_r+0x50>
 80048b8:	ebba 0b04 	subs.w	fp, sl, r4
 80048bc:	d00b      	beq.n	80048d6 <_svfiprintf_r+0x7a>
 80048be:	465b      	mov	r3, fp
 80048c0:	4622      	mov	r2, r4
 80048c2:	4629      	mov	r1, r5
 80048c4:	4638      	mov	r0, r7
 80048c6:	f7ff ff6d 	bl	80047a4 <__ssputs_r>
 80048ca:	3001      	adds	r0, #1
 80048cc:	f000 80aa 	beq.w	8004a24 <_svfiprintf_r+0x1c8>
 80048d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048d2:	445a      	add	r2, fp
 80048d4:	9209      	str	r2, [sp, #36]	; 0x24
 80048d6:	f89a 3000 	ldrb.w	r3, [sl]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 80a2 	beq.w	8004a24 <_svfiprintf_r+0x1c8>
 80048e0:	2300      	movs	r3, #0
 80048e2:	f04f 32ff 	mov.w	r2, #4294967295
 80048e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048ea:	f10a 0a01 	add.w	sl, sl, #1
 80048ee:	9304      	str	r3, [sp, #16]
 80048f0:	9307      	str	r3, [sp, #28]
 80048f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048f6:	931a      	str	r3, [sp, #104]	; 0x68
 80048f8:	4654      	mov	r4, sl
 80048fa:	2205      	movs	r2, #5
 80048fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004900:	4851      	ldr	r0, [pc, #324]	; (8004a48 <_svfiprintf_r+0x1ec>)
 8004902:	f000 fa41 	bl	8004d88 <memchr>
 8004906:	9a04      	ldr	r2, [sp, #16]
 8004908:	b9d8      	cbnz	r0, 8004942 <_svfiprintf_r+0xe6>
 800490a:	06d0      	lsls	r0, r2, #27
 800490c:	bf44      	itt	mi
 800490e:	2320      	movmi	r3, #32
 8004910:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004914:	0711      	lsls	r1, r2, #28
 8004916:	bf44      	itt	mi
 8004918:	232b      	movmi	r3, #43	; 0x2b
 800491a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800491e:	f89a 3000 	ldrb.w	r3, [sl]
 8004922:	2b2a      	cmp	r3, #42	; 0x2a
 8004924:	d015      	beq.n	8004952 <_svfiprintf_r+0xf6>
 8004926:	4654      	mov	r4, sl
 8004928:	2000      	movs	r0, #0
 800492a:	f04f 0c0a 	mov.w	ip, #10
 800492e:	9a07      	ldr	r2, [sp, #28]
 8004930:	4621      	mov	r1, r4
 8004932:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004936:	3b30      	subs	r3, #48	; 0x30
 8004938:	2b09      	cmp	r3, #9
 800493a:	d94e      	bls.n	80049da <_svfiprintf_r+0x17e>
 800493c:	b1b0      	cbz	r0, 800496c <_svfiprintf_r+0x110>
 800493e:	9207      	str	r2, [sp, #28]
 8004940:	e014      	b.n	800496c <_svfiprintf_r+0x110>
 8004942:	eba0 0308 	sub.w	r3, r0, r8
 8004946:	fa09 f303 	lsl.w	r3, r9, r3
 800494a:	4313      	orrs	r3, r2
 800494c:	46a2      	mov	sl, r4
 800494e:	9304      	str	r3, [sp, #16]
 8004950:	e7d2      	b.n	80048f8 <_svfiprintf_r+0x9c>
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	1d19      	adds	r1, r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	9103      	str	r1, [sp, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfbb      	ittet	lt
 800495e:	425b      	neglt	r3, r3
 8004960:	f042 0202 	orrlt.w	r2, r2, #2
 8004964:	9307      	strge	r3, [sp, #28]
 8004966:	9307      	strlt	r3, [sp, #28]
 8004968:	bfb8      	it	lt
 800496a:	9204      	strlt	r2, [sp, #16]
 800496c:	7823      	ldrb	r3, [r4, #0]
 800496e:	2b2e      	cmp	r3, #46	; 0x2e
 8004970:	d10c      	bne.n	800498c <_svfiprintf_r+0x130>
 8004972:	7863      	ldrb	r3, [r4, #1]
 8004974:	2b2a      	cmp	r3, #42	; 0x2a
 8004976:	d135      	bne.n	80049e4 <_svfiprintf_r+0x188>
 8004978:	9b03      	ldr	r3, [sp, #12]
 800497a:	3402      	adds	r4, #2
 800497c:	1d1a      	adds	r2, r3, #4
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	9203      	str	r2, [sp, #12]
 8004982:	2b00      	cmp	r3, #0
 8004984:	bfb8      	it	lt
 8004986:	f04f 33ff 	movlt.w	r3, #4294967295
 800498a:	9305      	str	r3, [sp, #20]
 800498c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8004a4c <_svfiprintf_r+0x1f0>
 8004990:	2203      	movs	r2, #3
 8004992:	4650      	mov	r0, sl
 8004994:	7821      	ldrb	r1, [r4, #0]
 8004996:	f000 f9f7 	bl	8004d88 <memchr>
 800499a:	b140      	cbz	r0, 80049ae <_svfiprintf_r+0x152>
 800499c:	2340      	movs	r3, #64	; 0x40
 800499e:	eba0 000a 	sub.w	r0, r0, sl
 80049a2:	fa03 f000 	lsl.w	r0, r3, r0
 80049a6:	9b04      	ldr	r3, [sp, #16]
 80049a8:	3401      	adds	r4, #1
 80049aa:	4303      	orrs	r3, r0
 80049ac:	9304      	str	r3, [sp, #16]
 80049ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049b2:	2206      	movs	r2, #6
 80049b4:	4826      	ldr	r0, [pc, #152]	; (8004a50 <_svfiprintf_r+0x1f4>)
 80049b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049ba:	f000 f9e5 	bl	8004d88 <memchr>
 80049be:	2800      	cmp	r0, #0
 80049c0:	d038      	beq.n	8004a34 <_svfiprintf_r+0x1d8>
 80049c2:	4b24      	ldr	r3, [pc, #144]	; (8004a54 <_svfiprintf_r+0x1f8>)
 80049c4:	bb1b      	cbnz	r3, 8004a0e <_svfiprintf_r+0x1b2>
 80049c6:	9b03      	ldr	r3, [sp, #12]
 80049c8:	3307      	adds	r3, #7
 80049ca:	f023 0307 	bic.w	r3, r3, #7
 80049ce:	3308      	adds	r3, #8
 80049d0:	9303      	str	r3, [sp, #12]
 80049d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049d4:	4433      	add	r3, r6
 80049d6:	9309      	str	r3, [sp, #36]	; 0x24
 80049d8:	e767      	b.n	80048aa <_svfiprintf_r+0x4e>
 80049da:	460c      	mov	r4, r1
 80049dc:	2001      	movs	r0, #1
 80049de:	fb0c 3202 	mla	r2, ip, r2, r3
 80049e2:	e7a5      	b.n	8004930 <_svfiprintf_r+0xd4>
 80049e4:	2300      	movs	r3, #0
 80049e6:	f04f 0c0a 	mov.w	ip, #10
 80049ea:	4619      	mov	r1, r3
 80049ec:	3401      	adds	r4, #1
 80049ee:	9305      	str	r3, [sp, #20]
 80049f0:	4620      	mov	r0, r4
 80049f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049f6:	3a30      	subs	r2, #48	; 0x30
 80049f8:	2a09      	cmp	r2, #9
 80049fa:	d903      	bls.n	8004a04 <_svfiprintf_r+0x1a8>
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0c5      	beq.n	800498c <_svfiprintf_r+0x130>
 8004a00:	9105      	str	r1, [sp, #20]
 8004a02:	e7c3      	b.n	800498c <_svfiprintf_r+0x130>
 8004a04:	4604      	mov	r4, r0
 8004a06:	2301      	movs	r3, #1
 8004a08:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a0c:	e7f0      	b.n	80049f0 <_svfiprintf_r+0x194>
 8004a0e:	ab03      	add	r3, sp, #12
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	462a      	mov	r2, r5
 8004a14:	4638      	mov	r0, r7
 8004a16:	4b10      	ldr	r3, [pc, #64]	; (8004a58 <_svfiprintf_r+0x1fc>)
 8004a18:	a904      	add	r1, sp, #16
 8004a1a:	f3af 8000 	nop.w
 8004a1e:	1c42      	adds	r2, r0, #1
 8004a20:	4606      	mov	r6, r0
 8004a22:	d1d6      	bne.n	80049d2 <_svfiprintf_r+0x176>
 8004a24:	89ab      	ldrh	r3, [r5, #12]
 8004a26:	065b      	lsls	r3, r3, #25
 8004a28:	f53f af2c 	bmi.w	8004884 <_svfiprintf_r+0x28>
 8004a2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a2e:	b01d      	add	sp, #116	; 0x74
 8004a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a34:	ab03      	add	r3, sp, #12
 8004a36:	9300      	str	r3, [sp, #0]
 8004a38:	462a      	mov	r2, r5
 8004a3a:	4638      	mov	r0, r7
 8004a3c:	4b06      	ldr	r3, [pc, #24]	; (8004a58 <_svfiprintf_r+0x1fc>)
 8004a3e:	a904      	add	r1, sp, #16
 8004a40:	f000 f87c 	bl	8004b3c <_printf_i>
 8004a44:	e7eb      	b.n	8004a1e <_svfiprintf_r+0x1c2>
 8004a46:	bf00      	nop
 8004a48:	0800509a 	.word	0x0800509a
 8004a4c:	080050a0 	.word	0x080050a0
 8004a50:	080050a4 	.word	0x080050a4
 8004a54:	00000000 	.word	0x00000000
 8004a58:	080047a5 	.word	0x080047a5

08004a5c <_printf_common>:
 8004a5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a60:	4616      	mov	r6, r2
 8004a62:	4699      	mov	r9, r3
 8004a64:	688a      	ldr	r2, [r1, #8]
 8004a66:	690b      	ldr	r3, [r1, #16]
 8004a68:	4607      	mov	r7, r0
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	bfb8      	it	lt
 8004a6e:	4613      	movlt	r3, r2
 8004a70:	6033      	str	r3, [r6, #0]
 8004a72:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a76:	460c      	mov	r4, r1
 8004a78:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a7c:	b10a      	cbz	r2, 8004a82 <_printf_common+0x26>
 8004a7e:	3301      	adds	r3, #1
 8004a80:	6033      	str	r3, [r6, #0]
 8004a82:	6823      	ldr	r3, [r4, #0]
 8004a84:	0699      	lsls	r1, r3, #26
 8004a86:	bf42      	ittt	mi
 8004a88:	6833      	ldrmi	r3, [r6, #0]
 8004a8a:	3302      	addmi	r3, #2
 8004a8c:	6033      	strmi	r3, [r6, #0]
 8004a8e:	6825      	ldr	r5, [r4, #0]
 8004a90:	f015 0506 	ands.w	r5, r5, #6
 8004a94:	d106      	bne.n	8004aa4 <_printf_common+0x48>
 8004a96:	f104 0a19 	add.w	sl, r4, #25
 8004a9a:	68e3      	ldr	r3, [r4, #12]
 8004a9c:	6832      	ldr	r2, [r6, #0]
 8004a9e:	1a9b      	subs	r3, r3, r2
 8004aa0:	42ab      	cmp	r3, r5
 8004aa2:	dc28      	bgt.n	8004af6 <_printf_common+0x9a>
 8004aa4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aa8:	1e13      	subs	r3, r2, #0
 8004aaa:	6822      	ldr	r2, [r4, #0]
 8004aac:	bf18      	it	ne
 8004aae:	2301      	movne	r3, #1
 8004ab0:	0692      	lsls	r2, r2, #26
 8004ab2:	d42d      	bmi.n	8004b10 <_printf_common+0xb4>
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	4638      	mov	r0, r7
 8004ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004abc:	47c0      	blx	r8
 8004abe:	3001      	adds	r0, #1
 8004ac0:	d020      	beq.n	8004b04 <_printf_common+0xa8>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	68e5      	ldr	r5, [r4, #12]
 8004ac6:	f003 0306 	and.w	r3, r3, #6
 8004aca:	2b04      	cmp	r3, #4
 8004acc:	bf18      	it	ne
 8004ace:	2500      	movne	r5, #0
 8004ad0:	6832      	ldr	r2, [r6, #0]
 8004ad2:	f04f 0600 	mov.w	r6, #0
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	bf08      	it	eq
 8004ada:	1aad      	subeq	r5, r5, r2
 8004adc:	6922      	ldr	r2, [r4, #16]
 8004ade:	bf08      	it	eq
 8004ae0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	bfc4      	itt	gt
 8004ae8:	1a9b      	subgt	r3, r3, r2
 8004aea:	18ed      	addgt	r5, r5, r3
 8004aec:	341a      	adds	r4, #26
 8004aee:	42b5      	cmp	r5, r6
 8004af0:	d11a      	bne.n	8004b28 <_printf_common+0xcc>
 8004af2:	2000      	movs	r0, #0
 8004af4:	e008      	b.n	8004b08 <_printf_common+0xac>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4652      	mov	r2, sl
 8004afa:	4649      	mov	r1, r9
 8004afc:	4638      	mov	r0, r7
 8004afe:	47c0      	blx	r8
 8004b00:	3001      	adds	r0, #1
 8004b02:	d103      	bne.n	8004b0c <_printf_common+0xb0>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	e7c4      	b.n	8004a9a <_printf_common+0x3e>
 8004b10:	2030      	movs	r0, #48	; 0x30
 8004b12:	18e1      	adds	r1, r4, r3
 8004b14:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b18:	1c5a      	adds	r2, r3, #1
 8004b1a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b1e:	4422      	add	r2, r4
 8004b20:	3302      	adds	r3, #2
 8004b22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b26:	e7c5      	b.n	8004ab4 <_printf_common+0x58>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	4638      	mov	r0, r7
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d0e6      	beq.n	8004b04 <_printf_common+0xa8>
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7d9      	b.n	8004aee <_printf_common+0x92>
	...

08004b3c <_printf_i>:
 8004b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	7e0f      	ldrb	r7, [r1, #24]
 8004b42:	4691      	mov	r9, r2
 8004b44:	2f78      	cmp	r7, #120	; 0x78
 8004b46:	4680      	mov	r8, r0
 8004b48:	460c      	mov	r4, r1
 8004b4a:	469a      	mov	sl, r3
 8004b4c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b52:	d807      	bhi.n	8004b64 <_printf_i+0x28>
 8004b54:	2f62      	cmp	r7, #98	; 0x62
 8004b56:	d80a      	bhi.n	8004b6e <_printf_i+0x32>
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	f000 80d9 	beq.w	8004d10 <_printf_i+0x1d4>
 8004b5e:	2f58      	cmp	r7, #88	; 0x58
 8004b60:	f000 80a4 	beq.w	8004cac <_printf_i+0x170>
 8004b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b6c:	e03a      	b.n	8004be4 <_printf_i+0xa8>
 8004b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b72:	2b15      	cmp	r3, #21
 8004b74:	d8f6      	bhi.n	8004b64 <_printf_i+0x28>
 8004b76:	a101      	add	r1, pc, #4	; (adr r1, 8004b7c <_printf_i+0x40>)
 8004b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b7c:	08004bd5 	.word	0x08004bd5
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004b65 	.word	0x08004b65
 8004b88:	08004b65 	.word	0x08004b65
 8004b8c:	08004b65 	.word	0x08004b65
 8004b90:	08004b65 	.word	0x08004b65
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004b65 	.word	0x08004b65
 8004b9c:	08004b65 	.word	0x08004b65
 8004ba0:	08004b65 	.word	0x08004b65
 8004ba4:	08004b65 	.word	0x08004b65
 8004ba8:	08004cf7 	.word	0x08004cf7
 8004bac:	08004c19 	.word	0x08004c19
 8004bb0:	08004cd9 	.word	0x08004cd9
 8004bb4:	08004b65 	.word	0x08004b65
 8004bb8:	08004b65 	.word	0x08004b65
 8004bbc:	08004d19 	.word	0x08004d19
 8004bc0:	08004b65 	.word	0x08004b65
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b65 	.word	0x08004b65
 8004bcc:	08004b65 	.word	0x08004b65
 8004bd0:	08004ce1 	.word	0x08004ce1
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	602a      	str	r2, [r5, #0]
 8004bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0a4      	b.n	8004d32 <_printf_i+0x1f6>
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	6829      	ldr	r1, [r5, #0]
 8004bec:	0606      	lsls	r6, r0, #24
 8004bee:	f101 0304 	add.w	r3, r1, #4
 8004bf2:	d50a      	bpl.n	8004c0a <_printf_i+0xce>
 8004bf4:	680e      	ldr	r6, [r1, #0]
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	2e00      	cmp	r6, #0
 8004bfa:	da03      	bge.n	8004c04 <_printf_i+0xc8>
 8004bfc:	232d      	movs	r3, #45	; 0x2d
 8004bfe:	4276      	negs	r6, r6
 8004c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c04:	230a      	movs	r3, #10
 8004c06:	485e      	ldr	r0, [pc, #376]	; (8004d80 <_printf_i+0x244>)
 8004c08:	e019      	b.n	8004c3e <_printf_i+0x102>
 8004c0a:	680e      	ldr	r6, [r1, #0]
 8004c0c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	bf18      	it	ne
 8004c14:	b236      	sxthne	r6, r6
 8004c16:	e7ef      	b.n	8004bf8 <_printf_i+0xbc>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	6029      	str	r1, [r5, #0]
 8004c20:	0601      	lsls	r1, r0, #24
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0xec>
 8004c24:	681e      	ldr	r6, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <_printf_i+0xf2>
 8004c28:	0646      	lsls	r6, r0, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0xe8>
 8004c2c:	881e      	ldrh	r6, [r3, #0]
 8004c2e:	2f6f      	cmp	r7, #111	; 0x6f
 8004c30:	bf0c      	ite	eq
 8004c32:	2308      	moveq	r3, #8
 8004c34:	230a      	movne	r3, #10
 8004c36:	4852      	ldr	r0, [pc, #328]	; (8004d80 <_printf_i+0x244>)
 8004c38:	2100      	movs	r1, #0
 8004c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c3e:	6865      	ldr	r5, [r4, #4]
 8004c40:	2d00      	cmp	r5, #0
 8004c42:	bfa8      	it	ge
 8004c44:	6821      	ldrge	r1, [r4, #0]
 8004c46:	60a5      	str	r5, [r4, #8]
 8004c48:	bfa4      	itt	ge
 8004c4a:	f021 0104 	bicge.w	r1, r1, #4
 8004c4e:	6021      	strge	r1, [r4, #0]
 8004c50:	b90e      	cbnz	r6, 8004c56 <_printf_i+0x11a>
 8004c52:	2d00      	cmp	r5, #0
 8004c54:	d04d      	beq.n	8004cf2 <_printf_i+0x1b6>
 8004c56:	4615      	mov	r5, r2
 8004c58:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5c:	fb03 6711 	mls	r7, r3, r1, r6
 8004c60:	5dc7      	ldrb	r7, [r0, r7]
 8004c62:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c66:	4637      	mov	r7, r6
 8004c68:	42bb      	cmp	r3, r7
 8004c6a:	460e      	mov	r6, r1
 8004c6c:	d9f4      	bls.n	8004c58 <_printf_i+0x11c>
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d10b      	bne.n	8004c8a <_printf_i+0x14e>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	07de      	lsls	r6, r3, #31
 8004c76:	d508      	bpl.n	8004c8a <_printf_i+0x14e>
 8004c78:	6923      	ldr	r3, [r4, #16]
 8004c7a:	6861      	ldr	r1, [r4, #4]
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	bfde      	ittt	le
 8004c80:	2330      	movle	r3, #48	; 0x30
 8004c82:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c86:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c8a:	1b52      	subs	r2, r2, r5
 8004c8c:	6122      	str	r2, [r4, #16]
 8004c8e:	464b      	mov	r3, r9
 8004c90:	4621      	mov	r1, r4
 8004c92:	4640      	mov	r0, r8
 8004c94:	f8cd a000 	str.w	sl, [sp]
 8004c98:	aa03      	add	r2, sp, #12
 8004c9a:	f7ff fedf 	bl	8004a5c <_printf_common>
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d14c      	bne.n	8004d3c <_printf_i+0x200>
 8004ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca6:	b004      	add	sp, #16
 8004ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cac:	4834      	ldr	r0, [pc, #208]	; (8004d80 <_printf_i+0x244>)
 8004cae:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cb2:	6829      	ldr	r1, [r5, #0]
 8004cb4:	6823      	ldr	r3, [r4, #0]
 8004cb6:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cba:	6029      	str	r1, [r5, #0]
 8004cbc:	061d      	lsls	r5, r3, #24
 8004cbe:	d514      	bpl.n	8004cea <_printf_i+0x1ae>
 8004cc0:	07df      	lsls	r7, r3, #31
 8004cc2:	bf44      	itt	mi
 8004cc4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc8:	6023      	strmi	r3, [r4, #0]
 8004cca:	b91e      	cbnz	r6, 8004cd4 <_printf_i+0x198>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	f023 0320 	bic.w	r3, r3, #32
 8004cd2:	6023      	str	r3, [r4, #0]
 8004cd4:	2310      	movs	r3, #16
 8004cd6:	e7af      	b.n	8004c38 <_printf_i+0xfc>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	f043 0320 	orr.w	r3, r3, #32
 8004cde:	6023      	str	r3, [r4, #0]
 8004ce0:	2378      	movs	r3, #120	; 0x78
 8004ce2:	4828      	ldr	r0, [pc, #160]	; (8004d84 <_printf_i+0x248>)
 8004ce4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce8:	e7e3      	b.n	8004cb2 <_printf_i+0x176>
 8004cea:	0659      	lsls	r1, r3, #25
 8004cec:	bf48      	it	mi
 8004cee:	b2b6      	uxthmi	r6, r6
 8004cf0:	e7e6      	b.n	8004cc0 <_printf_i+0x184>
 8004cf2:	4615      	mov	r5, r2
 8004cf4:	e7bb      	b.n	8004c6e <_printf_i+0x132>
 8004cf6:	682b      	ldr	r3, [r5, #0]
 8004cf8:	6826      	ldr	r6, [r4, #0]
 8004cfa:	1d18      	adds	r0, r3, #4
 8004cfc:	6961      	ldr	r1, [r4, #20]
 8004cfe:	6028      	str	r0, [r5, #0]
 8004d00:	0635      	lsls	r5, r6, #24
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	d501      	bpl.n	8004d0a <_printf_i+0x1ce>
 8004d06:	6019      	str	r1, [r3, #0]
 8004d08:	e002      	b.n	8004d10 <_printf_i+0x1d4>
 8004d0a:	0670      	lsls	r0, r6, #25
 8004d0c:	d5fb      	bpl.n	8004d06 <_printf_i+0x1ca>
 8004d0e:	8019      	strh	r1, [r3, #0]
 8004d10:	2300      	movs	r3, #0
 8004d12:	4615      	mov	r5, r2
 8004d14:	6123      	str	r3, [r4, #16]
 8004d16:	e7ba      	b.n	8004c8e <_printf_i+0x152>
 8004d18:	682b      	ldr	r3, [r5, #0]
 8004d1a:	2100      	movs	r1, #0
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	602a      	str	r2, [r5, #0]
 8004d20:	681d      	ldr	r5, [r3, #0]
 8004d22:	6862      	ldr	r2, [r4, #4]
 8004d24:	4628      	mov	r0, r5
 8004d26:	f000 f82f 	bl	8004d88 <memchr>
 8004d2a:	b108      	cbz	r0, 8004d30 <_printf_i+0x1f4>
 8004d2c:	1b40      	subs	r0, r0, r5
 8004d2e:	6060      	str	r0, [r4, #4]
 8004d30:	6863      	ldr	r3, [r4, #4]
 8004d32:	6123      	str	r3, [r4, #16]
 8004d34:	2300      	movs	r3, #0
 8004d36:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d3a:	e7a8      	b.n	8004c8e <_printf_i+0x152>
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	6923      	ldr	r3, [r4, #16]
 8004d44:	47d0      	blx	sl
 8004d46:	3001      	adds	r0, #1
 8004d48:	d0ab      	beq.n	8004ca2 <_printf_i+0x166>
 8004d4a:	6823      	ldr	r3, [r4, #0]
 8004d4c:	079b      	lsls	r3, r3, #30
 8004d4e:	d413      	bmi.n	8004d78 <_printf_i+0x23c>
 8004d50:	68e0      	ldr	r0, [r4, #12]
 8004d52:	9b03      	ldr	r3, [sp, #12]
 8004d54:	4298      	cmp	r0, r3
 8004d56:	bfb8      	it	lt
 8004d58:	4618      	movlt	r0, r3
 8004d5a:	e7a4      	b.n	8004ca6 <_printf_i+0x16a>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	4632      	mov	r2, r6
 8004d60:	4649      	mov	r1, r9
 8004d62:	4640      	mov	r0, r8
 8004d64:	47d0      	blx	sl
 8004d66:	3001      	adds	r0, #1
 8004d68:	d09b      	beq.n	8004ca2 <_printf_i+0x166>
 8004d6a:	3501      	adds	r5, #1
 8004d6c:	68e3      	ldr	r3, [r4, #12]
 8004d6e:	9903      	ldr	r1, [sp, #12]
 8004d70:	1a5b      	subs	r3, r3, r1
 8004d72:	42ab      	cmp	r3, r5
 8004d74:	dcf2      	bgt.n	8004d5c <_printf_i+0x220>
 8004d76:	e7eb      	b.n	8004d50 <_printf_i+0x214>
 8004d78:	2500      	movs	r5, #0
 8004d7a:	f104 0619 	add.w	r6, r4, #25
 8004d7e:	e7f5      	b.n	8004d6c <_printf_i+0x230>
 8004d80:	080050ab 	.word	0x080050ab
 8004d84:	080050bc 	.word	0x080050bc

08004d88 <memchr>:
 8004d88:	4603      	mov	r3, r0
 8004d8a:	b510      	push	{r4, lr}
 8004d8c:	b2c9      	uxtb	r1, r1
 8004d8e:	4402      	add	r2, r0
 8004d90:	4293      	cmp	r3, r2
 8004d92:	4618      	mov	r0, r3
 8004d94:	d101      	bne.n	8004d9a <memchr+0x12>
 8004d96:	2000      	movs	r0, #0
 8004d98:	e003      	b.n	8004da2 <memchr+0x1a>
 8004d9a:	7804      	ldrb	r4, [r0, #0]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	428c      	cmp	r4, r1
 8004da0:	d1f6      	bne.n	8004d90 <memchr+0x8>
 8004da2:	bd10      	pop	{r4, pc}

08004da4 <memmove>:
 8004da4:	4288      	cmp	r0, r1
 8004da6:	b510      	push	{r4, lr}
 8004da8:	eb01 0402 	add.w	r4, r1, r2
 8004dac:	d902      	bls.n	8004db4 <memmove+0x10>
 8004dae:	4284      	cmp	r4, r0
 8004db0:	4623      	mov	r3, r4
 8004db2:	d807      	bhi.n	8004dc4 <memmove+0x20>
 8004db4:	1e43      	subs	r3, r0, #1
 8004db6:	42a1      	cmp	r1, r4
 8004db8:	d008      	beq.n	8004dcc <memmove+0x28>
 8004dba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004dbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004dc2:	e7f8      	b.n	8004db6 <memmove+0x12>
 8004dc4:	4601      	mov	r1, r0
 8004dc6:	4402      	add	r2, r0
 8004dc8:	428a      	cmp	r2, r1
 8004dca:	d100      	bne.n	8004dce <memmove+0x2a>
 8004dcc:	bd10      	pop	{r4, pc}
 8004dce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004dd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dd6:	e7f7      	b.n	8004dc8 <memmove+0x24>

08004dd8 <_free_r>:
 8004dd8:	b538      	push	{r3, r4, r5, lr}
 8004dda:	4605      	mov	r5, r0
 8004ddc:	2900      	cmp	r1, #0
 8004dde:	d040      	beq.n	8004e62 <_free_r+0x8a>
 8004de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004de4:	1f0c      	subs	r4, r1, #4
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	bfb8      	it	lt
 8004dea:	18e4      	addlt	r4, r4, r3
 8004dec:	f000 f910 	bl	8005010 <__malloc_lock>
 8004df0:	4a1c      	ldr	r2, [pc, #112]	; (8004e64 <_free_r+0x8c>)
 8004df2:	6813      	ldr	r3, [r2, #0]
 8004df4:	b933      	cbnz	r3, 8004e04 <_free_r+0x2c>
 8004df6:	6063      	str	r3, [r4, #4]
 8004df8:	6014      	str	r4, [r2, #0]
 8004dfa:	4628      	mov	r0, r5
 8004dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e00:	f000 b90c 	b.w	800501c <__malloc_unlock>
 8004e04:	42a3      	cmp	r3, r4
 8004e06:	d908      	bls.n	8004e1a <_free_r+0x42>
 8004e08:	6820      	ldr	r0, [r4, #0]
 8004e0a:	1821      	adds	r1, r4, r0
 8004e0c:	428b      	cmp	r3, r1
 8004e0e:	bf01      	itttt	eq
 8004e10:	6819      	ldreq	r1, [r3, #0]
 8004e12:	685b      	ldreq	r3, [r3, #4]
 8004e14:	1809      	addeq	r1, r1, r0
 8004e16:	6021      	streq	r1, [r4, #0]
 8004e18:	e7ed      	b.n	8004df6 <_free_r+0x1e>
 8004e1a:	461a      	mov	r2, r3
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	b10b      	cbz	r3, 8004e24 <_free_r+0x4c>
 8004e20:	42a3      	cmp	r3, r4
 8004e22:	d9fa      	bls.n	8004e1a <_free_r+0x42>
 8004e24:	6811      	ldr	r1, [r2, #0]
 8004e26:	1850      	adds	r0, r2, r1
 8004e28:	42a0      	cmp	r0, r4
 8004e2a:	d10b      	bne.n	8004e44 <_free_r+0x6c>
 8004e2c:	6820      	ldr	r0, [r4, #0]
 8004e2e:	4401      	add	r1, r0
 8004e30:	1850      	adds	r0, r2, r1
 8004e32:	4283      	cmp	r3, r0
 8004e34:	6011      	str	r1, [r2, #0]
 8004e36:	d1e0      	bne.n	8004dfa <_free_r+0x22>
 8004e38:	6818      	ldr	r0, [r3, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	4401      	add	r1, r0
 8004e3e:	6011      	str	r1, [r2, #0]
 8004e40:	6053      	str	r3, [r2, #4]
 8004e42:	e7da      	b.n	8004dfa <_free_r+0x22>
 8004e44:	d902      	bls.n	8004e4c <_free_r+0x74>
 8004e46:	230c      	movs	r3, #12
 8004e48:	602b      	str	r3, [r5, #0]
 8004e4a:	e7d6      	b.n	8004dfa <_free_r+0x22>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	1821      	adds	r1, r4, r0
 8004e50:	428b      	cmp	r3, r1
 8004e52:	bf01      	itttt	eq
 8004e54:	6819      	ldreq	r1, [r3, #0]
 8004e56:	685b      	ldreq	r3, [r3, #4]
 8004e58:	1809      	addeq	r1, r1, r0
 8004e5a:	6021      	streq	r1, [r4, #0]
 8004e5c:	6063      	str	r3, [r4, #4]
 8004e5e:	6054      	str	r4, [r2, #4]
 8004e60:	e7cb      	b.n	8004dfa <_free_r+0x22>
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20001754 	.word	0x20001754

08004e68 <sbrk_aligned>:
 8004e68:	b570      	push	{r4, r5, r6, lr}
 8004e6a:	4e0e      	ldr	r6, [pc, #56]	; (8004ea4 <sbrk_aligned+0x3c>)
 8004e6c:	460c      	mov	r4, r1
 8004e6e:	6831      	ldr	r1, [r6, #0]
 8004e70:	4605      	mov	r5, r0
 8004e72:	b911      	cbnz	r1, 8004e7a <sbrk_aligned+0x12>
 8004e74:	f000 f8bc 	bl	8004ff0 <_sbrk_r>
 8004e78:	6030      	str	r0, [r6, #0]
 8004e7a:	4621      	mov	r1, r4
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	f000 f8b7 	bl	8004ff0 <_sbrk_r>
 8004e82:	1c43      	adds	r3, r0, #1
 8004e84:	d00a      	beq.n	8004e9c <sbrk_aligned+0x34>
 8004e86:	1cc4      	adds	r4, r0, #3
 8004e88:	f024 0403 	bic.w	r4, r4, #3
 8004e8c:	42a0      	cmp	r0, r4
 8004e8e:	d007      	beq.n	8004ea0 <sbrk_aligned+0x38>
 8004e90:	1a21      	subs	r1, r4, r0
 8004e92:	4628      	mov	r0, r5
 8004e94:	f000 f8ac 	bl	8004ff0 <_sbrk_r>
 8004e98:	3001      	adds	r0, #1
 8004e9a:	d101      	bne.n	8004ea0 <sbrk_aligned+0x38>
 8004e9c:	f04f 34ff 	mov.w	r4, #4294967295
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	bd70      	pop	{r4, r5, r6, pc}
 8004ea4:	20001758 	.word	0x20001758

08004ea8 <_malloc_r>:
 8004ea8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eac:	1ccd      	adds	r5, r1, #3
 8004eae:	f025 0503 	bic.w	r5, r5, #3
 8004eb2:	3508      	adds	r5, #8
 8004eb4:	2d0c      	cmp	r5, #12
 8004eb6:	bf38      	it	cc
 8004eb8:	250c      	movcc	r5, #12
 8004eba:	2d00      	cmp	r5, #0
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	db01      	blt.n	8004ec4 <_malloc_r+0x1c>
 8004ec0:	42a9      	cmp	r1, r5
 8004ec2:	d905      	bls.n	8004ed0 <_malloc_r+0x28>
 8004ec4:	230c      	movs	r3, #12
 8004ec6:	2600      	movs	r6, #0
 8004ec8:	603b      	str	r3, [r7, #0]
 8004eca:	4630      	mov	r0, r6
 8004ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed0:	4e2e      	ldr	r6, [pc, #184]	; (8004f8c <_malloc_r+0xe4>)
 8004ed2:	f000 f89d 	bl	8005010 <__malloc_lock>
 8004ed6:	6833      	ldr	r3, [r6, #0]
 8004ed8:	461c      	mov	r4, r3
 8004eda:	bb34      	cbnz	r4, 8004f2a <_malloc_r+0x82>
 8004edc:	4629      	mov	r1, r5
 8004ede:	4638      	mov	r0, r7
 8004ee0:	f7ff ffc2 	bl	8004e68 <sbrk_aligned>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	4604      	mov	r4, r0
 8004ee8:	d14d      	bne.n	8004f86 <_malloc_r+0xde>
 8004eea:	6834      	ldr	r4, [r6, #0]
 8004eec:	4626      	mov	r6, r4
 8004eee:	2e00      	cmp	r6, #0
 8004ef0:	d140      	bne.n	8004f74 <_malloc_r+0xcc>
 8004ef2:	6823      	ldr	r3, [r4, #0]
 8004ef4:	4631      	mov	r1, r6
 8004ef6:	4638      	mov	r0, r7
 8004ef8:	eb04 0803 	add.w	r8, r4, r3
 8004efc:	f000 f878 	bl	8004ff0 <_sbrk_r>
 8004f00:	4580      	cmp	r8, r0
 8004f02:	d13a      	bne.n	8004f7a <_malloc_r+0xd2>
 8004f04:	6821      	ldr	r1, [r4, #0]
 8004f06:	3503      	adds	r5, #3
 8004f08:	1a6d      	subs	r5, r5, r1
 8004f0a:	f025 0503 	bic.w	r5, r5, #3
 8004f0e:	3508      	adds	r5, #8
 8004f10:	2d0c      	cmp	r5, #12
 8004f12:	bf38      	it	cc
 8004f14:	250c      	movcc	r5, #12
 8004f16:	4638      	mov	r0, r7
 8004f18:	4629      	mov	r1, r5
 8004f1a:	f7ff ffa5 	bl	8004e68 <sbrk_aligned>
 8004f1e:	3001      	adds	r0, #1
 8004f20:	d02b      	beq.n	8004f7a <_malloc_r+0xd2>
 8004f22:	6823      	ldr	r3, [r4, #0]
 8004f24:	442b      	add	r3, r5
 8004f26:	6023      	str	r3, [r4, #0]
 8004f28:	e00e      	b.n	8004f48 <_malloc_r+0xa0>
 8004f2a:	6822      	ldr	r2, [r4, #0]
 8004f2c:	1b52      	subs	r2, r2, r5
 8004f2e:	d41e      	bmi.n	8004f6e <_malloc_r+0xc6>
 8004f30:	2a0b      	cmp	r2, #11
 8004f32:	d916      	bls.n	8004f62 <_malloc_r+0xba>
 8004f34:	1961      	adds	r1, r4, r5
 8004f36:	42a3      	cmp	r3, r4
 8004f38:	6025      	str	r5, [r4, #0]
 8004f3a:	bf18      	it	ne
 8004f3c:	6059      	strne	r1, [r3, #4]
 8004f3e:	6863      	ldr	r3, [r4, #4]
 8004f40:	bf08      	it	eq
 8004f42:	6031      	streq	r1, [r6, #0]
 8004f44:	5162      	str	r2, [r4, r5]
 8004f46:	604b      	str	r3, [r1, #4]
 8004f48:	4638      	mov	r0, r7
 8004f4a:	f104 060b 	add.w	r6, r4, #11
 8004f4e:	f000 f865 	bl	800501c <__malloc_unlock>
 8004f52:	f026 0607 	bic.w	r6, r6, #7
 8004f56:	1d23      	adds	r3, r4, #4
 8004f58:	1af2      	subs	r2, r6, r3
 8004f5a:	d0b6      	beq.n	8004eca <_malloc_r+0x22>
 8004f5c:	1b9b      	subs	r3, r3, r6
 8004f5e:	50a3      	str	r3, [r4, r2]
 8004f60:	e7b3      	b.n	8004eca <_malloc_r+0x22>
 8004f62:	6862      	ldr	r2, [r4, #4]
 8004f64:	42a3      	cmp	r3, r4
 8004f66:	bf0c      	ite	eq
 8004f68:	6032      	streq	r2, [r6, #0]
 8004f6a:	605a      	strne	r2, [r3, #4]
 8004f6c:	e7ec      	b.n	8004f48 <_malloc_r+0xa0>
 8004f6e:	4623      	mov	r3, r4
 8004f70:	6864      	ldr	r4, [r4, #4]
 8004f72:	e7b2      	b.n	8004eda <_malloc_r+0x32>
 8004f74:	4634      	mov	r4, r6
 8004f76:	6876      	ldr	r6, [r6, #4]
 8004f78:	e7b9      	b.n	8004eee <_malloc_r+0x46>
 8004f7a:	230c      	movs	r3, #12
 8004f7c:	4638      	mov	r0, r7
 8004f7e:	603b      	str	r3, [r7, #0]
 8004f80:	f000 f84c 	bl	800501c <__malloc_unlock>
 8004f84:	e7a1      	b.n	8004eca <_malloc_r+0x22>
 8004f86:	6025      	str	r5, [r4, #0]
 8004f88:	e7de      	b.n	8004f48 <_malloc_r+0xa0>
 8004f8a:	bf00      	nop
 8004f8c:	20001754 	.word	0x20001754

08004f90 <_realloc_r>:
 8004f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f94:	4680      	mov	r8, r0
 8004f96:	4614      	mov	r4, r2
 8004f98:	460e      	mov	r6, r1
 8004f9a:	b921      	cbnz	r1, 8004fa6 <_realloc_r+0x16>
 8004f9c:	4611      	mov	r1, r2
 8004f9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fa2:	f7ff bf81 	b.w	8004ea8 <_malloc_r>
 8004fa6:	b92a      	cbnz	r2, 8004fb4 <_realloc_r+0x24>
 8004fa8:	f7ff ff16 	bl	8004dd8 <_free_r>
 8004fac:	4625      	mov	r5, r4
 8004fae:	4628      	mov	r0, r5
 8004fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fb4:	f000 f838 	bl	8005028 <_malloc_usable_size_r>
 8004fb8:	4284      	cmp	r4, r0
 8004fba:	4607      	mov	r7, r0
 8004fbc:	d802      	bhi.n	8004fc4 <_realloc_r+0x34>
 8004fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004fc2:	d812      	bhi.n	8004fea <_realloc_r+0x5a>
 8004fc4:	4621      	mov	r1, r4
 8004fc6:	4640      	mov	r0, r8
 8004fc8:	f7ff ff6e 	bl	8004ea8 <_malloc_r>
 8004fcc:	4605      	mov	r5, r0
 8004fce:	2800      	cmp	r0, #0
 8004fd0:	d0ed      	beq.n	8004fae <_realloc_r+0x1e>
 8004fd2:	42bc      	cmp	r4, r7
 8004fd4:	4622      	mov	r2, r4
 8004fd6:	4631      	mov	r1, r6
 8004fd8:	bf28      	it	cs
 8004fda:	463a      	movcs	r2, r7
 8004fdc:	f7ff fbac 	bl	8004738 <memcpy>
 8004fe0:	4631      	mov	r1, r6
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	f7ff fef8 	bl	8004dd8 <_free_r>
 8004fe8:	e7e1      	b.n	8004fae <_realloc_r+0x1e>
 8004fea:	4635      	mov	r5, r6
 8004fec:	e7df      	b.n	8004fae <_realloc_r+0x1e>
	...

08004ff0 <_sbrk_r>:
 8004ff0:	b538      	push	{r3, r4, r5, lr}
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	4d05      	ldr	r5, [pc, #20]	; (800500c <_sbrk_r+0x1c>)
 8004ff6:	4604      	mov	r4, r0
 8004ff8:	4608      	mov	r0, r1
 8004ffa:	602b      	str	r3, [r5, #0]
 8004ffc:	f7fb fc8c 	bl	8000918 <_sbrk>
 8005000:	1c43      	adds	r3, r0, #1
 8005002:	d102      	bne.n	800500a <_sbrk_r+0x1a>
 8005004:	682b      	ldr	r3, [r5, #0]
 8005006:	b103      	cbz	r3, 800500a <_sbrk_r+0x1a>
 8005008:	6023      	str	r3, [r4, #0]
 800500a:	bd38      	pop	{r3, r4, r5, pc}
 800500c:	2000175c 	.word	0x2000175c

08005010 <__malloc_lock>:
 8005010:	4801      	ldr	r0, [pc, #4]	; (8005018 <__malloc_lock+0x8>)
 8005012:	f000 b811 	b.w	8005038 <__retarget_lock_acquire_recursive>
 8005016:	bf00      	nop
 8005018:	20001760 	.word	0x20001760

0800501c <__malloc_unlock>:
 800501c:	4801      	ldr	r0, [pc, #4]	; (8005024 <__malloc_unlock+0x8>)
 800501e:	f000 b80c 	b.w	800503a <__retarget_lock_release_recursive>
 8005022:	bf00      	nop
 8005024:	20001760 	.word	0x20001760

08005028 <_malloc_usable_size_r>:
 8005028:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800502c:	1f18      	subs	r0, r3, #4
 800502e:	2b00      	cmp	r3, #0
 8005030:	bfbc      	itt	lt
 8005032:	580b      	ldrlt	r3, [r1, r0]
 8005034:	18c0      	addlt	r0, r0, r3
 8005036:	4770      	bx	lr

08005038 <__retarget_lock_acquire_recursive>:
 8005038:	4770      	bx	lr

0800503a <__retarget_lock_release_recursive>:
 800503a:	4770      	bx	lr

0800503c <_init>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr

08005048 <_fini>:
 8005048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800504a:	bf00      	nop
 800504c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800504e:	bc08      	pop	{r3}
 8005050:	469e      	mov	lr, r3
 8005052:	4770      	bx	lr
